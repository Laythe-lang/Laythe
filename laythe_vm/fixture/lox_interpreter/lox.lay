import std.env;
import std.io.stdio:{stdout, stderr, stdin};
import std.io.fs:{File};

import self.object:{defaultGlobals};
import self.parser:{Parser};
import self.resolver:{Resolver, setResolver};

class Interpreter {
  init(program, globals) {
    self.program = program;
    self.globals = globals;
    self.environment = globals;
    self.locals = {};
  }

  static default(program) {
    return Interpreter(program, defaultGlobals());
  }

  interpret() {
    self.program.execute(self);
  }

  executeBlock(statements, environment) {
    let previous = self.environment;
    self.environment = environment;
    let ret;

    for statement in statements {
      ret = statement.execute(self);

      if ret {
        break;
      }
    }

    self.environment = previous;
    return ret;
  }

  resolve(expr, depth) {
    self.locals.set(expr, depth);
  }

  lookupVariable(name, expr) {
    let distance = self.locals.get(expr);
    if distance {
      return self.environment.getAt(distance, name);
    } else {
      return self.globals.get(name);
    }
  }
}

fn runtimeError(message) {
  stderr.writeln(message);
  // stderr.writeln("[line 1]"); // This is hack for tests (it's not always line 1)
  exit(70);
}

fn print_error(message) {
  stderr.writeln(message);
}

let args = env.args();
let parser;
let resolver;
let interpreter;


if args.len() < 3 {
  // do repl

  let globals = defaultGlobals();
  while true {
    stdout.write('lox:> ');
    stdout.flush();
    let line = stdin.readLine();

    parser = Parser(line);
    let program = parser.parse();

    // Uncomment these two lines to pretty-print the parsed syntax tree
    // print(program.str());
    // print("-----");

    interpreter = Interpreter(program, globals);
    resolver = Resolver(program, interpreter);
    setResolver(resolver);
    resolver.resolve();
    interpreter.interpret();

    globals = interpreter.globals;
  }
} else {
  let filePath = args[2];

  parser = Parser(File.readAllText(filePath));
  let program = parser.parse();

  // Uncomment these two lines to pretty-print the parsed syntax tree
  print(program.str());
  print("-----");

  interpreter = Interpreter.default(program);
  resolver = Resolver(program, interpreter);
  resolver.resolve();
  interpreter.interpret();
}


