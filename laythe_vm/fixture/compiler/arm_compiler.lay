import std.regexp:{RegExp};

let emit = print;
let throwError = |message| {
  print(message);
  0 / 1;
};

trait Ast {
  emit(env: Environment) -> nil;
  equals(other: Ast) -> bool;
}

trait Parser<T> {
  parse(source: Source) -> ParseResult<T> | nil;
}

let if_ = |cond, then, else_| {
  if cond {
    return then;
  } else {
    return else_;
  }
};

class Environment {
  init(
    locals: Map<string, number>,
    nextLocalOffset: number
  ) {
    @locals = locals;
    @nextLocalOffset = nextLocalOffset;
  }

  static default() {
    Environment({}, 0);
  }
}

class Num {
  init(value: number) {
    @value = value;
  }

  emit(env: Environment) {
    emit('  ldr r0, =${@value}');
  }

  equals(other: Ast) -> bool {
    other.cls() == Num
      && @value == other.value
  }
}

class Id {
  init(value: string) {
    @value = value;
  }

  emit(env: Environment) {
    let offset = env.locals.get(@value);
    if offset {
      emit('  ldr r0, [fp, #${offset}]');
    } else {
      throwError('Undefined variable: {@value}');
    }
  }

  equals(other: Ast) -> bool {
    other.cls() == Id
      && @value.equals(other.value)
  }
}

class Not {
  init(term: Ast) {
    @term = term;
  }

  emit(env: Environment) {
    @term.emit(env);
    emit('  cmp r0, #0');
    emit('  moveq r0, #1');
    emit('  movne r0, #0');
  }

  equals(other: Ast) -> bool {
    other.cls() == Not
      && @term == other.term
  }
}

class Infix {
  init(left: Ast, right: Ast) {
    @left = left;
    @right = right;
  }

  emit(env: Environment) {
    @left.emit(env);
    emit('  push {r0, ip}');
    @right.emit(env);
    emit('  pop {r1, ip}');
  }

  equals(other: Ast) -> bool {
    other.cls() == @cls()
      && @left.equals(other.left)
      && @right.equals(other.right)
  }
}

class Equal : Infix {
  emit(env: Environment) {
    super.emit(env);
    emit('  cmp r0, r1');
    emit('  moveq r0, #1');
    emit('  movne r0, #0');
  }
}

class NotEqual : Infix {
  emit(env: Environment) {
    super.emit(env);
    emit('  cmp r0, r1');
    emit('  moveq r0, #0');
    emit('  movne r0, #1');
  }
}

class Add : Infix {
  emit(env: Environment) {
    super.emit(env);
    emit('  add r0, r0, r1');
  }
}

class Subtract : Infix {
  emit(env: Environment) {
    super.emit(env);
    emit('  sub r0, r0, r1');
  }
}

class Multiply : Infix {
  emit(env: Environment) {
    super.emit(env);
    emit('  mul r0, r0, r1');
  }
}

class Divide : Infix {
  emit(env: Environment) {
    super.emit(env);
    emit('  udiv r0, r0, r1');
  }
}

class Call {
  init(callee: string, args: Ast[]) {
    @callee = callee;
    @args = args;
  }

  emit(env: Environment) {
    let count = @args.len();
    if count == 0 {
      emit('  bl ${@callee}');
    } else if count == 1 {
      @args[0].emit(env);
      emit('  bl ${@callee}');
    } else if count >= 2 && count <= 4 {
      emit('  sub sp, sp, #16');
      let i = 0;
      for arg in @args {
        arg.emit(env);
        emit('  str r0, [sp, #${4 * i}]');
        i = i + 1;
      }

      emit('  pop {r0, r1, r2, r3}');
      emit('  bl ${@callee}');
    } else {
      throwError('More than 4 arguments are not supported.');
    }

  }

  equals(other: Ast) -> bool {
    other.cls() == Call
      && @callee == other.callee
      && @args.len() == other.len()
      && @args.iter()
        .zip(other.args.iter())
        .all(|both| both[0].equals(both[1]))
  }
}

class Return {
  init(term: Ast) {
    @term = term;
  }

  emit(env: Environment) {
    @term.emit(env);
    emit('  mov sp, fp');
    emit('  pop {fp, pc}');
  }

  equals(other: Ast) -> bool {
    other.cls() == Return
      && @term.equals(other.term)
  }
}

class Block {
  init(stmts: Ast[]) {
    @stmts = stmts;
  }

  emit(env: Environment) {
    for stmt in @stmts {
      stmt.emit(env);
    }
  }

  equals(other: Ast) -> bool {
    other.cls() == Block
      && @stmts.len() == other.stmts.len()
      && @stmts.iter()
        .zip(other.stmts.iter())
        .all(|both| both[0].equals(both[1]))
  }
}

let counter = 0;
class Label {
  value: number;

  init() {
    @value = counter + 1;
    counter = counter + 1;
  }

  str() {
    '.L${@value}';
  }
}

class If {
  init(
    cond: Ast,
    then: Ast,
    else_: Ast
  ) {
    @cond = cond;
    @then = then;
    @else_ = else_;
  }

  emit(env: Environment) {
    let ifFalseLabel = Label();
    let endIfLabel = Label();
    @cond.emit(env);
    emit('  cmp r0, #0');
    emit('  beq ${ifFalseLabel}');
    @then.emit(env);
    emit('  b ${endIfLabel}');
    emit('${ifFalseLabel}:');
    @else_.emit(env);
    emit('${endIfLabel}:');
  }

  equals(other: Ast) -> bool {
    other.cls() == If
      && @cond.equals(other.cond)
      && @then.equals(other.then)
      && @else_.equals(other.else_)
  }
}

class Function {
  init(
    name: string,
    parameters: string[],
    body: Ast
  ) {
    @name = name;
    @parameters = parameters;
    @body = body;
  }

  emit(_: Environment) {
    if (@parameters.len() > 4) {
      throwError("More than 4 params is not supported");
    }

    emit('');
    emit('.global ${@name}');
    emit('${@name}:');
    @emitPrologue();
    let env = @setUpEnvironment();

    @body.emit(env);
    @emitEpilogue();
  }

  setUpEnvironment() {
    let locals = {};
    let i = 0;
    for param in @parameters {
      locals.set(param, 4 * i);
      i = i + 1;
    }
    let nextLocalOffset = -20;
    Environment(locals, nextLocalOffset)
  }

  emitPrologue() {
    emit('  push {fp, lr}');
    emit('  mov fp, sp');
    emit('  push {r0, r1, r2, r3}');
  }

  emitEpilogue() {
    emit('  mov sp, fp');
    emit('  mov r0, #0');
    emit('  pop {fp, pc}');
  }

  equals(other: Ast) -> bool {
    other.cls() == Function
      && @name == other.name
      && @parameters.iter()
        .zip(other.parameters.iter())
        .all(|both| both[0] == both[1])
      && @body.equals(other.body)
  }
}

class Var {
  init(name: string, value: Ast) {
    @name = name;
    @value = value;
  }

  emit(env: Environment) {
    @value.emit(env);
    emit('  push {r0, ip}');
    env.locals.set(@name, env.nextLocalOffset - 4);
    env.nextLocalOffset = env.nextLocalOffset - 8;
  }

  equals(other: Ast) -> bool {
    other.cls() == Var
      && @name == other.name
      && @value.equals(other.value)
  }
}

class Assign {
  init(name: string, value: Ast) {
    @name = name;
    @value = value;
  }

  emit(env: Environment) {
    @value.emit(env);
    let offset = env.locals.get(@name);
    if offset {
      emit('  str r0, [fp, #${offset}]');
    } else {
      throwError('Undefined variable: ${@name}');
    }
  }

  equals(other: Ast) -> bool {
    other.cls() == Assign
      && @name == other.name
      && @value.equals(other.value)
  }
}

class While {
  init(cond: Ast, body: Ast) {
    @cond = cond;
    @body = body;
  }

  emit(env: Environment) {
    let loopStart = Label();
    let loopEnd = Label();

    emit('${loopStart}:');
    @cond.emit(env);
    emit('  cmp r0, #0');
    emit('  beq ${loopEnd}');
    @body.emit(env);
    emit('  b ${loopStart}');
    emit('${loopEnd}:');
  }

  equals(other: Ast) -> bool {
    other.cls() == While
      && @cond.equals(other.cond)
      && @body.equals(other.body)
  }
}

class Source {
  init(string: string, index: number) {
    @string = string;
    @index = index;
  }

  match(matcher: RegExp) -> ParseResult<string> | nil {
    let slice = @string.slice(@index);
    let match = matcher.match(slice);
    let test = matcher.test(slice);

    if match {
      let newIndex = @index + match.len();
      let source = Source(@string, newIndex);
      return ParseResult(match, source);
    }

    nil
  }

  str() {
    "string: '${elf.string}'"
      + "\nindex: ${@index}"
      + "\nremaining: '${@string.slice(@index)}'";
  }
}

class ParseResult<T> {
  init(value: T, source: Source) {
    @value = value;
    @source = source;
  }

  str() {
    "value: ${@value}"
      + "\nsource: '${@source}'";
  }
}

type ParseCombinator = (source: Source) -> ParseResult<T> | nil;

fn regexp(re: RegExp) -> Parser<string> {
  Parser(|source| source.match(re))
}

fn constant<T>(value: T) -> Parser<T> {
  Parser(|source| ParseResult(value, source))
}

fn error<T>(message: string) -> Parser<T> {
  Parser(|source| 1/0)
}

fn maybe<T>(parser: Parser<T>) {
  parser.or_(constant(nil))
}

fn zeroOrMore<T>(parser: Parser<T>) -> Parser<T> {
  Parser(|source| {
    let results = [];
    let item;

    while item = parser.parse(source) {
      source = item.source;
      results.push(item.value);
    }

    ParseResult(results, source)
  })
}

fn debugResult<T>(
  parser: Parser<T>,
  source: Source,
  result: ParseResult
) {
  print("parser: " + parser.cls().str());
  print(source);
  print(result);
}

class Parser<T> {
  init(parse: ParseCombinator) {
    @parse = parse;
  }

  or_(parser: Parser<T>) -> Parser<T> {
    Parser(|source| {
      let result = @parse(source);
      if result {
        return result;
      } else {
        return parser.parse(source);
      }
    })
  }


  bind<U>(callback: (value: T) -> Parser<U>) -> Parser<U> {
    Parser(|source| {
      let result = @parse(source);
      if result {
        let value = result.value;
        let source = result.source;
        return callback(value).parse(source);
      } else {
        return nil;
      }
    })
  }

  and_<U>(parser: Parser<U>) -> Parser<U> {
    @bind(|_| parser)
  }

  map<U>(callback: (t: T) -> U) -> Parser<U> {
    @bind(|value| constant(callback(value)))
  }

  parseStringToCompletion(string: string) -> T {
    let source = Source(string, 0);

    let result = @parse(source);
    if !result {
      debugResult(self, source, result);
      throwError("failure");
    }

    let index = result.source.index;
    if index != result.source.string.len() {
      debugResult(self, source, result);
      throwError("failure");
    }

    result.value
  }
}

let r = |source| RegExp(source);
let whitespace = regexp(r('^[ \\n\\r\\t]+'));
let comments = regexp(r('^//.*')).or_(regexp(r('^/\\*.*\\*/')));
let ignored = zeroOrMore(whitespace.or_(comments));

let token = |pattern|
  regexp(pattern).bind(|value|
    ignored.and_(constant(value)));

let FUNCTION = token(r('^function\\b'));
let IF = token(r('^if\\b'));
let ELSE = token(r('^else\\b'));
let RETURN = token(r('^return\\b'));
let VAR = token(r('^var\\b'));
let WHILE = token(r('^while\\b'));

let COMMA = token(r('^,'));
let SEMICOLON = token(r('^;'));
let LEFT_PAREN = token(r('^\\('));
let RIGHT_PAREN = token(r('^\\)'));
let LEFT_BRACE = token(r('^\\{'));
let RIGHT_BRACE = token(r('^\\}'));

let NUMBER = token(r('^[0-9]+')).map(|digits| Num(Number.parse(digits)));
let ID = token(r('^[a-zA-Z_][a-zA-Z0-9_]*'));
let id = ID.map(|x| Id(x));

let NOT = token(r('^!')).map(|_| Not);
let EQUAL = token(r('^==')).map(|_| Equal);
let NOT_EQUAL = token(r('^!=')).map(|_| NotEqual);
let PLUS = token(r('^\\+')).map(|_| Add);
let MINUS = token(r('^-')).map(|_| Subtract);
let STAR = token(r('^\\*')).map(|_| Multiply);
let SLASH = token(r('^/')).map(|_| Divide);

let ASSIGN = token(r('^='));

let expr = error("expression parser used before definition");

fn mergeLists(list1, list2) {
  list1.iter().chain(list2.iter()).into(List.collect)
}

let args: Parser<Ast[]> =
  expr.bind(|arg|
    zeroOrMore(COMMA.and_(expr)).bind(|args|
      constant(mergeLists([arg], args)))).or_(constant([]));

let call: Parser<Ast> =
  ID.bind(|callee|
    LEFT_PAREN.and_(args.bind(|args|
      RIGHT_PAREN.and_(constant(Call(callee, args))))));

let atom: Parser<Ast> =
  call.or_(id).or_(NUMBER).or_(
    LEFT_PAREN.and_(expr).bind(|e|
      RIGHT_PAREN.and_(constant(e))));

let unary: Parser<Ast> =
  maybe(NOT).bind(|not|
    atom.map(|term| {
      if not {
        return Not(term);
      } else {
        return term;
      }
    }));

let infix = |operatorParser, termParser|
  termParser.bind(|first|
    zeroOrMore(operatorParser.bind(|operator|
      termParser.bind(|term|
        constant([operator, term])))).map(|operatorTerms|
          operatorTerms.iter().reduce(first, |left, end|
            end[0](left, end[1]))));

let product = infix(STAR.or_(SLASH), unary);
let sum = infix(PLUS.or_(MINUS), product);
let comparison = infix(EQUAL.or_(NOT_EQUAL), sum);

expr.parse = comparison.parse;

let stmt: Parser<Ast> =
  error("statement parser used before definition");

let returnStmt: Parser<Ast> =
  RETURN.and_(expr).bind(|term|
    SEMICOLON.and_(constant(Return(term))));

let exprStmt: Parser<Ast> =
  expr.bind(|term|
    SEMICOLON.and_(constant(term)));

let ifStmt: Parser<Ast> =
  IF.and_(LEFT_PAREN).and_(expr).bind(|cond|
    RIGHT_PAREN.and_(stmt).bind(|then|
      ELSE.and_(stmt).bind(|else_|
        constant(If(cond, then, else_)))));

let whileStmt: Parser<Ast> =
  WHILE.and_(LEFT_PAREN).and_(expr).bind(|cond|
    RIGHT_PAREN.and_(stmt).bind(|body|
      constant(While(cond, body))));

let varStmt: Parser<Ast> =
  VAR.and_(ID).bind(|name|
    ASSIGN.and_(expr).bind(|value|
      SEMICOLON.and_(constant(Var(name, value)))));

let assignmentStmt: Parser<Ast> =
  ID.bind(|name|
    ASSIGN.and_(expr).bind(|value|
      SEMICOLON.and_(constant(Assign(name, value)))));

let blockStmt: Parser<Ast> =
  LEFT_BRACE.and_(zeroOrMore(stmt)).bind(|stmts|
    RIGHT_BRACE.and_(constant(Block(stmts))));

let parameters: Parser<string[]> =
  ID.bind(|param|
    zeroOrMore(COMMA.and_(ID)).bind(|params|
      constant(mergeLists([param], params)))).or_(constant([]));

let functionStmt: Parser<Ast> =
  FUNCTION.and_(ID).bind(|name|
    LEFT_PAREN.and_(parameters).bind(|parameters|
      RIGHT_PAREN.and_(blockStmt).bind(|block|
        constant(Function(name, parameters, block)))));

let stmtParser: Parser<Ast> =
  returnStmt
    .or_(functionStmt)
    .or_(ifStmt)
    .or_(whileStmt)
    .or_(varStmt)
    .or_(assignmentStmt)
    .or_(blockStmt)
    .or_(exprStmt);

stmt.parse = stmtParser.parse;

let parser: Parser<Ast> =
  ignored.and_(zeroOrMore(stmt)).map(|stmts|
    Block(stmts));

parser.parseStringToCompletion('
function assert(x) {
  if (x) {
    putchar(46);
  } else {
    putchar(70);
  }
}

function assert1234(a, b, c, d) {
  assert(a == 1);
  assert(b == 2);
  assert(c == 3);
  assert(d == 4);
}

function factorial(n) {
  if (n == 0) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}

function factorial2(n) {
  var result = 1;
  while (n != 1) {
    result = result * n;
    n = n - 1;
  }
  return result;
}


function main() {
  assert(1);
  assert(!0);
  assert(42 == 4 + 2 * (12 - 2) + 3 * (5 + 1));

  {
    assert(1);
    assert(1);
  }

  assert1234(1, 2, 3, 4);
  assert(rand() != 42);
  putchar(46);

  assert(factorial(5) == 5);
  // assert(factorial2(5) == 5);
  if (1) {
    assert(1);
  } else {
    assert(0);
  }
  if (0) {
    assert(0);
  } else {
    assert(1);
  }

  var x = 4 + 2 * (12 - 2);
  var y = 3 * (5 + 1);
  var z = x + y;

  var a = 1;
  assert(a == 1);
  a = 0;
  assert(a == 0);

  assert(z == 42);

  var i = 0;
  // while (i != 3) {
  //   i = i + 1;
  // }
  assert(i != 3);
}
').emit(Environment.default());
