class Tree {
  init(item, depth) {
    @item = item;
    @depth = depth;
    if depth > 0 {
      let item2 = item + item;
      depth -= 1;
      @left = Tree(item2 - 1, depth);
      @right = Tree(item2, depth);
    } else {
      @left = nil;
      @right = nil;
    }
  }

  check() {
    if @left == nil {
      return @item;
    }

    @item + @left.check() - @right.check()
  }
}

let minDepth = 3;
let maxDepth = 6;
let stretchDepth = maxDepth + 1;

Tree(0, stretchDepth).check();

let longLivedTree = Tree(0, maxDepth);

// iterations = 2 ** maxDepth
let iterations = 1;
let d = 0;
while d < maxDepth {
  iterations *= 2;
  d += 1;
}

let depth = minDepth;
while depth < stretchDepth {
  let check = 0;
  let i = 1;
  while i <= iterations {
    check += Tree(i, depth).check() + Tree(-i, depth).check();
    i += 1;
  }

  iterations /= 4;
  depth += 2;
}