<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="693.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="693.00"> </text><svg id="frames" x="10" width="1180"><g><title>perf (5 samples, 0.19%)</title><rect x="0.0000%" y="645" width="0.1861%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.19%)</title><rect x="0.0000%" y="629" width="0.1861%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.19%)</title><rect x="0.0000%" y="613" width="0.1861%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.19%)</title><rect x="0.0000%" y="597" width="0.1861%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.19%)</title><rect x="0.0000%" y="581" width="0.1861%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.19%)</title><rect x="0.0000%" y="565" width="0.1861%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.19%)</title><rect x="0.0000%" y="549" width="0.1861%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.19%)</title><rect x="0.0000%" y="533" width="0.1861%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.19%)</title><rect x="0.0000%" y="517" width="0.1861%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.19%)</title><rect x="0.0000%" y="501" width="0.1861%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.15%)</title><rect x="0.0372%" y="485" width="0.1489%" height="15" fill="rgb(250,228,42)"/><text x="0.2872%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.15%)</title><rect x="0.0372%" y="469" width="0.1489%" height="15" fill="rgb(240,193,28)"/><text x="0.2872%" y="479.50"></text></g><g><title>&lt;spacelox_core::value::Closure as spacelox_core::managed::Trace&gt;::trace (5 samples, 0.19%)</title><rect x="0.1861%" y="613" width="0.1861%" height="15" fill="rgb(216,20,37)"/><text x="0.4361%" y="623.50"></text></g><g><title>_int_free (5 samples, 0.19%)</title><rect x="0.3722%" y="613" width="0.1861%" height="15" fill="rgb(206,188,39)"/><text x="0.6222%" y="623.50"></text></g><g><title>spacelox_core::value::Value::to_string (13 samples, 0.48%)</title><rect x="0.5582%" y="613" width="0.4838%" height="15" fill="rgb(217,207,13)"/><text x="0.8082%" y="623.50"></text></g><g><title>spacelox_vm::memory::Gc::allocate (30 samples, 1.12%)</title><rect x="1.0421%" y="613" width="1.1165%" height="15" fill="rgb(231,73,38)"/><text x="1.2921%" y="623.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::size (10 samples, 0.37%)</title><rect x="1.7864%" y="597" width="0.3722%" height="15" fill="rgb(225,20,46)"/><text x="2.0364%" y="607.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::close_upvalues (7 samples, 0.26%)</title><rect x="2.1585%" y="613" width="0.2605%" height="15" fill="rgb(210,31,41)"/><text x="2.4085%" y="623.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::invoke_from_class (7 samples, 0.26%)</title><rect x="2.4191%" y="613" width="0.2605%" height="15" fill="rgb(221,200,47)"/><text x="2.6691%" y="623.50"></text></g><g><title>[[heap]] (76 samples, 2.83%)</title><rect x="0.1861%" y="629" width="2.8284%" height="15" fill="rgb(226,26,5)"/><text x="0.4361%" y="639.50">[[..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (9 samples, 0.33%)</title><rect x="2.6796%" y="613" width="0.3349%" height="15" fill="rgb(249,33,26)"/><text x="2.9296%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (8 samples, 0.30%)</title><rect x="2.7168%" y="597" width="0.2977%" height="15" fill="rgb(235,183,28)"/><text x="2.9668%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (8 samples, 0.30%)</title><rect x="2.7168%" y="581" width="0.2977%" height="15" fill="rgb(221,5,38)"/><text x="2.9668%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.30%)</title><rect x="2.7168%" y="565" width="0.2977%" height="15" fill="rgb(247,18,42)"/><text x="2.9668%" y="575.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (8 samples, 0.30%)</title><rect x="2.7168%" y="549" width="0.2977%" height="15" fill="rgb(241,131,45)"/><text x="2.9668%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.74%)</title><rect x="3.0145%" y="597" width="0.7443%" height="15" fill="rgb(249,31,29)"/><text x="3.2645%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (27 samples, 1.00%)</title><rect x="3.0145%" y="613" width="1.0048%" height="15" fill="rgb(225,111,53)"/><text x="3.2645%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.26%)</title><rect x="3.7588%" y="597" width="0.2605%" height="15" fill="rgb(238,160,17)"/><text x="4.0088%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.26%)</title><rect x="3.7588%" y="581" width="0.2605%" height="15" fill="rgb(214,148,48)"/><text x="4.0088%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (7 samples, 0.26%)</title><rect x="3.7588%" y="565" width="0.2605%" height="15" fill="rgb(232,36,49)"/><text x="4.0088%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.26%)</title><rect x="3.7588%" y="549" width="0.2605%" height="15" fill="rgb(209,103,24)"/><text x="4.0088%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (7 samples, 0.26%)</title><rect x="3.7588%" y="533" width="0.2605%" height="15" fill="rgb(229,88,8)"/><text x="4.0088%" y="543.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.30%)</title><rect x="4.0566%" y="613" width="0.2977%" height="15" fill="rgb(213,181,19)"/><text x="4.3066%" y="623.50"></text></g><g><title>_int_free (9 samples, 0.33%)</title><rect x="4.3543%" y="613" width="0.3349%" height="15" fill="rgb(254,191,54)"/><text x="4.6043%" y="623.50"></text></g><g><title>_int_malloc (7 samples, 0.26%)</title><rect x="4.6892%" y="613" width="0.2605%" height="15" fill="rgb(241,83,37)"/><text x="4.9392%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.11%)</title><rect x="4.9498%" y="613" width="0.1116%" height="15" fill="rgb(233,36,39)"/><text x="5.1998%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (5 samples, 0.19%)</title><rect x="5.0614%" y="597" width="0.1861%" height="15" fill="rgb(226,3,54)"/><text x="5.3114%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.19%)</title><rect x="5.0614%" y="581" width="0.1861%" height="15" fill="rgb(245,192,40)"/><text x="5.3114%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.19%)</title><rect x="5.0614%" y="565" width="0.1861%" height="15" fill="rgb(238,167,29)"/><text x="5.3114%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.19%)</title><rect x="5.0614%" y="549" width="0.1861%" height="15" fill="rgb(232,182,51)"/><text x="5.3114%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::retain (6 samples, 0.22%)</title><rect x="5.0614%" y="613" width="0.2233%" height="15" fill="rgb(231,60,39)"/><text x="5.3114%" y="623.50"></text></g><g><title>[[stack]] (86 samples, 3.20%)</title><rect x="3.0145%" y="629" width="3.2006%" height="15" fill="rgb(208,69,12)"/><text x="3.2645%" y="639.50">[[s..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (24 samples, 0.89%)</title><rect x="5.3219%" y="613" width="0.8932%" height="15" fill="rgb(235,93,37)"/><text x="5.5719%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (15 samples, 0.56%)</title><rect x="5.6569%" y="597" width="0.5582%" height="15" fill="rgb(213,116,39)"/><text x="5.9069%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (15 samples, 0.56%)</title><rect x="5.6569%" y="581" width="0.5582%" height="15" fill="rgb(222,207,29)"/><text x="5.9069%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.56%)</title><rect x="5.6569%" y="565" width="0.5582%" height="15" fill="rgb(206,96,30)"/><text x="5.9069%" y="575.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (15 samples, 0.56%)</title><rect x="5.6569%" y="549" width="0.5582%" height="15" fill="rgb(218,138,4)"/><text x="5.9069%" y="559.50"></text></g><g><title>&lt;spacelox_core::value::Closure as spacelox_core::managed::Trace&gt;::trace (4 samples, 0.15%)</title><rect x="6.2151%" y="613" width="0.1489%" height="15" fill="rgb(250,191,14)"/><text x="6.4651%" y="623.50"></text></g><g><title>[spacelox] (7 samples, 0.26%)</title><rect x="6.2151%" y="629" width="0.2605%" height="15" fill="rgb(239,60,40)"/><text x="6.4651%" y="639.50"></text></g><g><title>&lt;spacelox_core::value::Fun as spacelox_core::managed::Trace&gt;::trace (3 samples, 0.11%)</title><rect x="6.3640%" y="613" width="0.1116%" height="15" fill="rgb(206,27,48)"/><text x="6.6140%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.11%)</title><rect x="6.3640%" y="597" width="0.1116%" height="15" fill="rgb(225,35,8)"/><text x="6.6140%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.48%)</title><rect x="6.4756%" y="613" width="0.4838%" height="15" fill="rgb(250,213,24)"/><text x="6.7256%" y="623.50"></text></g><g><title>&lt;spacelox_core::chunk::ByteCode as core::convert::From&lt;u8&gt;&gt;::from (37 samples, 1.38%)</title><rect x="6.9594%" y="613" width="1.3770%" height="15" fill="rgb(247,123,22)"/><text x="7.2094%" y="623.50"></text></g><g><title>&lt;spacelox_core::value::Closure as spacelox_core::managed::Manage&gt;::size (7 samples, 0.26%)</title><rect x="8.3737%" y="613" width="0.2605%" height="15" fill="rgb(231,138,38)"/><text x="8.6237%" y="623.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.41%)</title><rect x="8.7086%" y="613" width="0.4094%" height="15" fill="rgb(231,145,46)"/><text x="8.9586%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (15 samples, 0.56%)</title><rect x="9.1180%" y="613" width="0.5582%" height="15" fill="rgb(251,118,11)"/><text x="9.3680%" y="623.50"></text></g><g><title>_int_free (19 samples, 0.71%)</title><rect x="9.6762%" y="613" width="0.7071%" height="15" fill="rgb(217,147,25)"/><text x="9.9262%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.30%)</title><rect x="10.3833%" y="613" width="0.2977%" height="15" fill="rgb(247,81,37)"/><text x="10.6333%" y="623.50"></text></g><g><title>core::ptr::hash (16 samples, 0.60%)</title><rect x="10.6811%" y="613" width="0.5955%" height="15" fill="rgb(209,12,38)"/><text x="10.9311%" y="623.50"></text></g><g><title>spacelox_core::value::Value::to_string (4 samples, 0.15%)</title><rect x="11.3509%" y="613" width="0.1489%" height="15" fill="rgb(227,1,9)"/><text x="11.6009%" y="623.50"></text></g><g><title>spacelox_vm::memory::Gc::allocate (14 samples, 0.52%)</title><rect x="11.4998%" y="613" width="0.5210%" height="15" fill="rgb(248,47,43)"/><text x="11.7498%" y="623.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::call (17 samples, 0.63%)</title><rect x="12.0208%" y="613" width="0.6327%" height="15" fill="rgb(221,10,30)"/><text x="12.2708%" y="623.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::close_upvalues (19 samples, 0.71%)</title><rect x="12.6535%" y="613" width="0.7071%" height="15" fill="rgb(210,229,1)"/><text x="12.9035%" y="623.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::invoke_from_class (25 samples, 0.93%)</title><rect x="13.3606%" y="613" width="0.9304%" height="15" fill="rgb(222,148,37)"/><text x="13.6106%" y="623.50"></text></g><g><title>[unknown] (236 samples, 8.78%)</title><rect x="6.4756%" y="629" width="8.7830%" height="15" fill="rgb(234,67,33)"/><text x="6.7256%" y="639.50">[unknown]</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (26 samples, 0.97%)</title><rect x="14.2910%" y="613" width="0.9676%" height="15" fill="rgb(247,98,35)"/><text x="14.5410%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.89%)</title><rect x="19.4641%" y="421" width="0.8932%" height="15" fill="rgb(247,138,52)"/><text x="19.7141%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (24 samples, 0.89%)</title><rect x="19.4641%" y="405" width="0.8932%" height="15" fill="rgb(213,79,30)"/><text x="19.7141%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (24 samples, 0.89%)</title><rect x="19.4641%" y="389" width="0.8932%" height="15" fill="rgb(246,177,23)"/><text x="19.7141%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::frame_instruction (44 samples, 1.64%)</title><rect x="19.1291%" y="437" width="1.6375%" height="15" fill="rgb(230,62,27)"/><text x="19.3791%" y="447.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.33%)</title><rect x="20.4317%" y="421" width="0.3349%" height="15" fill="rgb(216,154,8)"/><text x="20.6817%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_add (3 samples, 0.11%)</title><rect x="20.7667%" y="437" width="0.1116%" height="15" fill="rgb(244,35,45)"/><text x="21.0167%" y="447.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_constant (4 samples, 0.15%)</title><rect x="20.8783%" y="437" width="0.1489%" height="15" fill="rgb(251,115,12)"/><text x="21.1283%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.30%)</title><rect x="22.1437%" y="405" width="0.2977%" height="15" fill="rgb(240,54,50)"/><text x="22.3937%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (8 samples, 0.30%)</title><rect x="22.1437%" y="389" width="0.2977%" height="15" fill="rgb(233,84,52)"/><text x="22.3937%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.30%)</title><rect x="22.1437%" y="373" width="0.2977%" height="15" fill="rgb(207,117,47)"/><text x="22.3937%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (10 samples, 0.37%)</title><rect x="22.1064%" y="421" width="0.3722%" height="15" fill="rgb(249,43,39)"/><text x="22.3564%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_string (20 samples, 0.74%)</title><rect x="22.4786%" y="421" width="0.7443%" height="15" fill="rgb(209,38,44)"/><text x="22.7286%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_constant (19 samples, 0.71%)</title><rect x="22.5158%" y="405" width="0.7071%" height="15" fill="rgb(236,212,23)"/><text x="22.7658%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.41%)</title><rect x="22.8135%" y="389" width="0.4094%" height="15" fill="rgb(242,79,21)"/><text x="23.0635%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.41%)</title><rect x="22.8135%" y="373" width="0.4094%" height="15" fill="rgb(211,96,35)"/><text x="23.0635%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (11 samples, 0.41%)</title><rect x="22.8135%" y="357" width="0.4094%" height="15" fill="rgb(253,215,40)"/><text x="23.0635%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.41%)</title><rect x="22.8135%" y="341" width="0.4094%" height="15" fill="rgb(211,81,21)"/><text x="23.0635%" y="351.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.22%)</title><rect x="23.3718%" y="341" width="0.2233%" height="15" fill="rgb(208,190,38)"/><text x="23.6218%" y="351.50"></text></g><g><title>spacelox_core::managed::Managed&lt;T&gt;::obj (6 samples, 0.22%)</title><rect x="23.3718%" y="325" width="0.2233%" height="15" fill="rgb(235,213,38)"/><text x="23.6218%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.33%)</title><rect x="25.1210%" y="229" width="0.3349%" height="15" fill="rgb(237,122,38)"/><text x="25.3710%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (37 samples, 1.38%)</title><rect x="24.3766%" y="245" width="1.3770%" height="15" fill="rgb(244,218,35)"/><text x="24.6266%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 0.30%)</title><rect x="25.4559%" y="229" width="0.2977%" height="15" fill="rgb(240,68,47)"/><text x="25.7059%" y="239.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (84 samples, 3.13%)</title><rect x="23.3718%" y="357" width="3.1262%" height="15" fill="rgb(210,16,53)"/><text x="23.6218%" y="367.50">&lt;sp..</text></g><g><title>core::ptr::hash (78 samples, 2.90%)</title><rect x="23.5951%" y="341" width="2.9029%" height="15" fill="rgb(235,124,12)"/><text x="23.8451%" y="351.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (74 samples, 2.75%)</title><rect x="23.7440%" y="325" width="2.7540%" height="15" fill="rgb(224,169,11)"/><text x="23.9940%" y="335.50">co..</text></g><g><title>core::hash::Hasher::write_usize (74 samples, 2.75%)</title><rect x="23.7440%" y="309" width="2.7540%" height="15" fill="rgb(250,166,2)"/><text x="23.9940%" y="319.50">co..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (73 samples, 2.72%)</title><rect x="23.7812%" y="293" width="2.7168%" height="15" fill="rgb(242,216,29)"/><text x="24.0312%" y="303.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (73 samples, 2.72%)</title><rect x="23.7812%" y="277" width="2.7168%" height="15" fill="rgb(230,116,27)"/><text x="24.0312%" y="287.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (73 samples, 2.72%)</title><rect x="23.7812%" y="261" width="2.7168%" height="15" fill="rgb(228,99,48)"/><text x="24.0312%" y="271.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (20 samples, 0.74%)</title><rect x="25.7536%" y="245" width="0.7443%" height="15" fill="rgb(253,11,6)"/><text x="26.0036%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10 samples, 0.37%)</title><rect x="27.2423%" y="293" width="0.3722%" height="15" fill="rgb(247,143,39)"/><text x="27.4923%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (20 samples, 0.74%)</title><rect x="27.0562%" y="309" width="0.7443%" height="15" fill="rgb(236,97,10)"/><text x="27.3062%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.19%)</title><rect x="27.6144%" y="293" width="0.1861%" height="15" fill="rgb(233,208,19)"/><text x="27.8644%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (28 samples, 1.04%)</title><rect x="28.2471%" y="293" width="1.0421%" height="15" fill="rgb(216,164,2)"/><text x="28.4971%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (92 samples, 3.42%)</title><rect x="26.4980%" y="357" width="3.4239%" height="15" fill="rgb(220,129,5)"/><text x="26.7480%" y="367.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (92 samples, 3.42%)</title><rect x="26.4980%" y="341" width="3.4239%" height="15" fill="rgb(242,17,10)"/><text x="26.7480%" y="351.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (92 samples, 3.42%)</title><rect x="26.4980%" y="325" width="3.4239%" height="15" fill="rgb(242,107,0)"/><text x="26.7480%" y="335.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (57 samples, 2.12%)</title><rect x="27.8005%" y="309" width="2.1213%" height="15" fill="rgb(251,28,31)"/><text x="28.0505%" y="319.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (17 samples, 0.63%)</title><rect x="29.2892%" y="293" width="0.6327%" height="15" fill="rgb(233,223,10)"/><text x="29.5392%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (201 samples, 7.48%)</title><rect x="23.3718%" y="373" width="7.4805%" height="15" fill="rgb(215,21,27)"/><text x="23.6218%" y="383.50">hashbrown:..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (25 samples, 0.93%)</title><rect x="29.9218%" y="357" width="0.9304%" height="15" fill="rgb(232,23,21)"/><text x="30.1718%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (9 samples, 0.33%)</title><rect x="30.5173%" y="341" width="0.3349%" height="15" fill="rgb(244,5,23)"/><text x="30.7673%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (9 samples, 0.33%)</title><rect x="30.5173%" y="325" width="0.3349%" height="15" fill="rgb(226,81,46)"/><text x="30.7673%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (9 samples, 0.33%)</title><rect x="30.5173%" y="309" width="0.3349%" height="15" fill="rgb(247,70,30)"/><text x="30.7673%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="31.1872%" y="357" width="0.1489%" height="15" fill="rgb(212,68,19)"/><text x="31.4372%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.15%)</title><rect x="31.1872%" y="341" width="0.1489%" height="15" fill="rgb(240,187,13)"/><text x="31.4372%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (6 samples, 0.22%)</title><rect x="31.3361%" y="357" width="0.2233%" height="15" fill="rgb(223,113,26)"/><text x="31.5861%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::ctrl (3 samples, 0.11%)</title><rect x="31.5594%" y="357" width="0.1116%" height="15" fill="rgb(206,192,2)"/><text x="31.8094%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (7 samples, 0.26%)</title><rect x="31.7082%" y="357" width="0.2605%" height="15" fill="rgb(241,108,4)"/><text x="31.9582%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (7 samples, 0.26%)</title><rect x="31.7082%" y="341" width="0.2605%" height="15" fill="rgb(247,173,49)"/><text x="31.9582%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.26%)</title><rect x="31.7082%" y="325" width="0.2605%" height="15" fill="rgb(224,114,35)"/><text x="31.9582%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.15%)</title><rect x="31.9687%" y="341" width="0.1489%" height="15" fill="rgb(245,159,27)"/><text x="32.2187%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_get_global (305 samples, 11.35%)</title><rect x="21.0272%" y="437" width="11.3509%" height="15" fill="rgb(245,172,44)"/><text x="21.2772%" y="447.50">spacelox_vm::vm::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (246 samples, 9.16%)</title><rect x="23.2229%" y="421" width="9.1552%" height="15" fill="rgb(236,23,11)"/><text x="23.4729%" y="431.50">std::collecti..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (242 samples, 9.01%)</title><rect x="23.3718%" y="405" width="9.0063%" height="15" fill="rgb(205,117,38)"/><text x="23.6218%" y="415.50">hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (242 samples, 9.01%)</title><rect x="23.3718%" y="389" width="9.0063%" height="15" fill="rgb(237,72,25)"/><text x="23.6218%" y="399.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (41 samples, 1.53%)</title><rect x="30.8523%" y="373" width="1.5259%" height="15" fill="rgb(244,70,9)"/><text x="31.1023%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (11 samples, 0.41%)</title><rect x="31.9687%" y="357" width="0.4094%" height="15" fill="rgb(217,125,39)"/><text x="32.2187%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (7 samples, 0.26%)</title><rect x="32.1176%" y="341" width="0.2605%" height="15" fill="rgb(235,36,10)"/><text x="32.3676%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (7 samples, 0.26%)</title><rect x="32.1176%" y="325" width="0.2605%" height="15" fill="rgb(251,123,47)"/><text x="32.3676%" y="335.50"></text></g><g><title>core::core_arch::simd::i8x16::new (7 samples, 0.26%)</title><rect x="32.1176%" y="309" width="0.2605%" height="15" fill="rgb(221,13,13)"/><text x="32.3676%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (11 samples, 0.41%)</title><rect x="36.9929%" y="405" width="0.4094%" height="15" fill="rgb(238,131,9)"/><text x="37.2429%" y="415.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (9 samples, 0.33%)</title><rect x="37.0674%" y="389" width="0.3349%" height="15" fill="rgb(211,50,8)"/><text x="37.3174%" y="399.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (9 samples, 0.33%)</title><rect x="37.0674%" y="373" width="0.3349%" height="15" fill="rgb(245,182,24)"/><text x="37.3174%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (7 samples, 0.26%)</title><rect x="39.5608%" y="293" width="0.2605%" height="15" fill="rgb(242,14,37)"/><text x="39.8108%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.26%)</title><rect x="39.5608%" y="277" width="0.2605%" height="15" fill="rgb(246,228,12)"/><text x="39.8108%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_internal (7 samples, 0.26%)</title><rect x="39.5608%" y="261" width="0.2605%" height="15" fill="rgb(213,55,15)"/><text x="39.8108%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (6 samples, 0.22%)</title><rect x="39.5981%" y="245" width="0.2233%" height="15" fill="rgb(209,9,3)"/><text x="39.8481%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::set_len (5 samples, 0.19%)</title><rect x="39.8214%" y="293" width="0.1861%" height="15" fill="rgb(230,59,30)"/><text x="40.0714%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (41 samples, 1.53%)</title><rect x="39.2631%" y="325" width="1.5259%" height="15" fill="rgb(209,121,21)"/><text x="39.5131%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (41 samples, 1.53%)</title><rect x="39.2631%" y="309" width="1.5259%" height="15" fill="rgb(220,109,13)"/><text x="39.5131%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (21 samples, 0.78%)</title><rect x="40.0074%" y="293" width="0.7815%" height="15" fill="rgb(232,18,1)"/><text x="40.2574%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.78%)</title><rect x="40.0074%" y="277" width="0.7815%" height="15" fill="rgb(215,41,42)"/><text x="40.2574%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (15 samples, 0.56%)</title><rect x="40.2307%" y="261" width="0.5582%" height="15" fill="rgb(224,123,36)"/><text x="40.4807%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (94 samples, 3.50%)</title><rect x="38.7421%" y="373" width="3.4983%" height="15" fill="rgb(240,125,3)"/><text x="38.9921%" y="383.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (94 samples, 3.50%)</title><rect x="38.7421%" y="357" width="3.4983%" height="15" fill="rgb(205,98,50)"/><text x="38.9921%" y="367.50">all..</text></g><g><title>alloc::slice::hack::to_vec (94 samples, 3.50%)</title><rect x="38.7421%" y="341" width="3.4983%" height="15" fill="rgb(205,185,37)"/><text x="38.9921%" y="351.50">all..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (39 samples, 1.45%)</title><rect x="40.7890%" y="325" width="1.4514%" height="15" fill="rgb(238,207,15)"/><text x="41.0390%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (21 samples, 0.78%)</title><rect x="41.4589%" y="309" width="0.7815%" height="15" fill="rgb(213,199,42)"/><text x="41.7089%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.78%)</title><rect x="41.4589%" y="293" width="0.7815%" height="15" fill="rgb(235,201,11)"/><text x="41.7089%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (4 samples, 0.15%)</title><rect x="42.0916%" y="277" width="0.1489%" height="15" fill="rgb(207,46,11)"/><text x="42.3416%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (4 samples, 0.15%)</title><rect x="42.0916%" y="261" width="0.1489%" height="15" fill="rgb(241,35,35)"/><text x="42.3416%" y="271.50"></text></g><g><title>&lt;spacelox_core::value::Closure as core::clone::Clone&gt;::clone (133 samples, 4.95%)</title><rect x="38.1466%" y="389" width="4.9498%" height="15" fill="rgb(243,32,47)"/><text x="38.3966%" y="399.50">&lt;space..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::clone::Clone&gt;::clone (23 samples, 0.86%)</title><rect x="42.2404%" y="373" width="0.8560%" height="15" fill="rgb(247,202,23)"/><text x="42.4904%" y="383.50"></text></g><g><title>alloc_perturb (3 samples, 0.11%)</title><rect x="47.8601%" y="277" width="0.1116%" height="15" fill="rgb(219,102,11)"/><text x="48.1101%" y="287.50"></text></g><g><title>checked_request2size (3 samples, 0.11%)</title><rect x="47.9717%" y="277" width="0.1116%" height="15" fill="rgb(243,110,44)"/><text x="48.2217%" y="287.50"></text></g><g><title>_int_malloc (59 samples, 2.20%)</title><rect x="46.6691%" y="293" width="2.1958%" height="15" fill="rgb(222,74,54)"/><text x="46.9191%" y="303.50">_..</text></g><g><title>tcache_put (19 samples, 0.71%)</title><rect x="48.1578%" y="277" width="0.7071%" height="15" fill="rgb(216,99,12)"/><text x="48.4078%" y="287.50"></text></g><g><title>checked_request2size (32 samples, 1.19%)</title><rect x="48.8649%" y="293" width="1.1909%" height="15" fill="rgb(226,22,26)"/><text x="49.1149%" y="303.50"></text></g><g><title>__GI___libc_malloc (165 samples, 6.14%)</title><rect x="44.4734%" y="309" width="6.1407%" height="15" fill="rgb(217,163,10)"/><text x="44.7234%" y="319.50">__GI___l..</text></g><g><title>tcache_get (15 samples, 0.56%)</title><rect x="50.0558%" y="293" width="0.5582%" height="15" fill="rgb(213,25,53)"/><text x="50.3058%" y="303.50"></text></g><g><title>__rdl_alloc (20 samples, 0.74%)</title><rect x="50.6141%" y="309" width="0.7443%" height="15" fill="rgb(252,105,26)"/><text x="50.8641%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.74%)</title><rect x="50.6141%" y="293" width="0.7443%" height="15" fill="rgb(220,39,43)"/><text x="50.8641%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (227 samples, 8.45%)</title><rect x="43.4686%" y="373" width="8.4481%" height="15" fill="rgb(229,68,48)"/><text x="43.7186%" y="383.50">alloc::boxed..</text></g><g><title>alloc::alloc::exchange_malloc (200 samples, 7.44%)</title><rect x="44.4734%" y="357" width="7.4432%" height="15" fill="rgb(252,8,32)"/><text x="44.7234%" y="367.50">alloc::all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (200 samples, 7.44%)</title><rect x="44.4734%" y="341" width="7.4432%" height="15" fill="rgb(223,20,43)"/><text x="44.7234%" y="351.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::alloc (200 samples, 7.44%)</title><rect x="44.4734%" y="325" width="7.4432%" height="15" fill="rgb(229,81,49)"/><text x="44.7234%" y="335.50">alloc::all..</text></g><g><title>__rust_alloc (15 samples, 0.56%)</title><rect x="51.3584%" y="309" width="0.5582%" height="15" fill="rgb(236,28,36)"/><text x="51.6084%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (37 samples, 1.38%)</title><rect x="51.9166%" y="373" width="1.3770%" height="15" fill="rgb(249,185,26)"/><text x="52.1666%" y="383.50"></text></g><g><title>core::ptr::write (12 samples, 0.45%)</title><rect x="52.8470%" y="357" width="0.4466%" height="15" fill="rgb(249,174,33)"/><text x="53.0970%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (10 samples, 0.37%)</title><rect x="53.2936%" y="373" width="0.3722%" height="15" fill="rgb(233,201,37)"/><text x="53.5436%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (10 samples, 0.37%)</title><rect x="53.2936%" y="357" width="0.3722%" height="15" fill="rgb(221,78,26)"/><text x="53.5436%" y="367.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::new (17 samples, 0.63%)</title><rect x="53.7030%" y="373" width="0.6327%" height="15" fill="rgb(250,127,30)"/><text x="53.9530%" y="383.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.22%)</title><rect x="54.5218%" y="133" width="0.2233%" height="15" fill="rgb(230,49,44)"/><text x="54.7718%" y="143.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as spacelox_core::managed::Trace&gt;::trace (20 samples, 0.74%)</title><rect x="54.5218%" y="245" width="0.7443%" height="15" fill="rgb(229,67,23)"/><text x="54.7718%" y="255.50"></text></g><g><title>&lt;spacelox_core::value::Closure as spacelox_core::managed::Trace&gt;::trace (20 samples, 0.74%)</title><rect x="54.5218%" y="229" width="0.7443%" height="15" fill="rgb(249,83,47)"/><text x="54.7718%" y="239.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as spacelox_core::managed::Trace&gt;::trace (20 samples, 0.74%)</title><rect x="54.5218%" y="213" width="0.7443%" height="15" fill="rgb(215,43,3)"/><text x="54.7718%" y="223.50"></text></g><g><title>&lt;spacelox_core::value::Fun as spacelox_core::managed::Trace&gt;::trace (20 samples, 0.74%)</title><rect x="54.5218%" y="197" width="0.7443%" height="15" fill="rgb(238,154,13)"/><text x="54.7718%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (20 samples, 0.74%)</title><rect x="54.5218%" y="181" width="0.7443%" height="15" fill="rgb(219,56,2)"/><text x="54.7718%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (20 samples, 0.74%)</title><rect x="54.5218%" y="165" width="0.7443%" height="15" fill="rgb(233,0,4)"/><text x="54.7718%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20 samples, 0.74%)</title><rect x="54.5218%" y="149" width="0.7443%" height="15" fill="rgb(235,30,7)"/><text x="54.7718%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (14 samples, 0.52%)</title><rect x="54.7451%" y="133" width="0.5210%" height="15" fill="rgb(250,79,13)"/><text x="54.9951%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (14 samples, 0.52%)</title><rect x="54.7451%" y="117" width="0.5210%" height="15" fill="rgb(211,146,34)"/><text x="54.9951%" y="127.50"></text></g><g><title>&lt;spacelox_core::value::Fun as spacelox_core::managed::Trace&gt;::trace::_{{closure}} (14 samples, 0.52%)</title><rect x="54.7451%" y="101" width="0.5210%" height="15" fill="rgb(228,22,38)"/><text x="54.9951%" y="111.50"></text></g><g><title>spacelox_core::value::Value::trace (14 samples, 0.52%)</title><rect x="54.7451%" y="85" width="0.5210%" height="15" fill="rgb(235,168,5)"/><text x="54.9951%" y="95.50"></text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace (13 samples, 0.48%)</title><rect x="55.3405%" y="213" width="0.4838%" height="15" fill="rgb(221,155,16)"/><text x="55.5905%" y="223.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as spacelox_core::managed::Trace&gt;::trace (13 samples, 0.48%)</title><rect x="55.3405%" y="197" width="0.4838%" height="15" fill="rgb(215,215,53)"/><text x="55.5905%" y="207.50"></text></g><g><title>&lt;spacelox_core::value::Class as spacelox_core::managed::Trace&gt;::trace (13 samples, 0.48%)</title><rect x="55.3405%" y="181" width="0.4838%" height="15" fill="rgb(223,4,10)"/><text x="55.5905%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (13 samples, 0.48%)</title><rect x="55.3405%" y="165" width="0.4838%" height="15" fill="rgb(234,103,6)"/><text x="55.5905%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (13 samples, 0.48%)</title><rect x="55.3405%" y="149" width="0.4838%" height="15" fill="rgb(227,97,0)"/><text x="55.5905%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (13 samples, 0.48%)</title><rect x="55.3405%" y="133" width="0.4838%" height="15" fill="rgb(234,150,53)"/><text x="55.5905%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (8 samples, 0.30%)</title><rect x="55.5266%" y="117" width="0.2977%" height="15" fill="rgb(228,201,54)"/><text x="55.7766%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8 samples, 0.30%)</title><rect x="55.5266%" y="101" width="0.2977%" height="15" fill="rgb(222,22,37)"/><text x="55.7766%" y="111.50"></text></g><g><title>&lt;spacelox_core::value::Class as spacelox_core::managed::Trace&gt;::trace::_{{closure}} (8 samples, 0.30%)</title><rect x="55.5266%" y="85" width="0.2977%" height="15" fill="rgb(237,53,32)"/><text x="55.7766%" y="95.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as spacelox_core::managed::Trace&gt;::trace (8 samples, 0.30%)</title><rect x="55.5266%" y="69" width="0.2977%" height="15" fill="rgb(233,25,53)"/><text x="55.7766%" y="79.50"></text></g><g><title>&lt;spacelox_core::value::Closure as spacelox_core::managed::Trace&gt;::trace (7 samples, 0.26%)</title><rect x="55.5638%" y="53" width="0.2605%" height="15" fill="rgb(210,40,34)"/><text x="55.8138%" y="63.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as spacelox_core::managed::Trace&gt;::trace (4 samples, 0.15%)</title><rect x="55.6755%" y="37" width="0.1489%" height="15" fill="rgb(241,220,44)"/><text x="55.9255%" y="47.50"></text></g><g><title>&lt;spacelox_vm::vm::VmExecutor as spacelox_core::managed::Trace&gt;::trace (38 samples, 1.41%)</title><rect x="54.4473%" y="357" width="1.4142%" height="15" fill="rgb(235,28,35)"/><text x="54.6973%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (38 samples, 1.41%)</title><rect x="54.4473%" y="341" width="1.4142%" height="15" fill="rgb(210,56,17)"/><text x="54.6973%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (38 samples, 1.41%)</title><rect x="54.4473%" y="325" width="1.4142%" height="15" fill="rgb(224,130,29)"/><text x="54.6973%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (38 samples, 1.41%)</title><rect x="54.4473%" y="309" width="1.4142%" height="15" fill="rgb(235,212,8)"/><text x="54.6973%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (37 samples, 1.38%)</title><rect x="54.4846%" y="293" width="1.3770%" height="15" fill="rgb(223,33,50)"/><text x="54.7346%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (37 samples, 1.38%)</title><rect x="54.4846%" y="277" width="1.3770%" height="15" fill="rgb(219,149,13)"/><text x="54.7346%" y="287.50"></text></g><g><title>&lt;spacelox_vm::vm::VmExecutor as spacelox_core::managed::Trace&gt;::trace::_{{closure}} (37 samples, 1.38%)</title><rect x="54.4846%" y="261" width="1.3770%" height="15" fill="rgb(250,156,29)"/><text x="54.7346%" y="271.50"></text></g><g><title>spacelox_core::value::Value::trace (16 samples, 0.60%)</title><rect x="55.2661%" y="245" width="0.5955%" height="15" fill="rgb(216,193,19)"/><text x="55.5161%" y="255.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as spacelox_core::managed::Trace&gt;::trace (14 samples, 0.52%)</title><rect x="55.3405%" y="229" width="0.5210%" height="15" fill="rgb(216,135,14)"/><text x="55.5905%" y="239.50"></text></g><g><title>__GI___libc_free (25 samples, 0.93%)</title><rect x="57.0525%" y="229" width="0.9304%" height="15" fill="rgb(241,47,5)"/><text x="57.3025%" y="239.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.11%)</title><rect x="57.9829%" y="229" width="0.1116%" height="15" fill="rgb(233,42,35)"/><text x="58.2329%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.11%)</title><rect x="57.9829%" y="213" width="0.1116%" height="15" fill="rgb(231,13,6)"/><text x="58.2329%" y="223.50"></text></g><g><title>__rust_dealloc (10 samples, 0.37%)</title><rect x="58.0945%" y="229" width="0.3722%" height="15" fill="rgb(207,181,40)"/><text x="58.3445%" y="239.50"></text></g><g><title>alloc::alloc::box_free (154 samples, 5.73%)</title><rect x="56.6059%" y="277" width="5.7313%" height="15" fill="rgb(254,173,49)"/><text x="56.8559%" y="287.50">alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (146 samples, 5.43%)</title><rect x="56.9036%" y="261" width="5.4336%" height="15" fill="rgb(221,1,38)"/><text x="57.1536%" y="271.50">&lt;alloc:..</text></g><g><title>alloc::alloc::dealloc (146 samples, 5.43%)</title><rect x="56.9036%" y="245" width="5.4336%" height="15" fill="rgb(206,124,46)"/><text x="57.1536%" y="255.50">alloc::..</text></g><g><title>_int_free (104 samples, 3.87%)</title><rect x="58.4667%" y="229" width="3.8705%" height="15" fill="rgb(249,21,11)"/><text x="58.7167%" y="239.50">_int..</text></g><g><title>free_perturb (4 samples, 0.15%)</title><rect x="62.1883%" y="213" width="0.1489%" height="15" fill="rgb(222,201,40)"/><text x="62.4383%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (180 samples, 6.70%)</title><rect x="56.2337%" y="325" width="6.6989%" height="15" fill="rgb(235,61,29)"/><text x="56.4837%" y="335.50">alloc::ve..</text></g><g><title>core::ptr::drop_in_place (180 samples, 6.70%)</title><rect x="56.2337%" y="309" width="6.6989%" height="15" fill="rgb(219,207,3)"/><text x="56.4837%" y="319.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place (180 samples, 6.70%)</title><rect x="56.2337%" y="293" width="6.6989%" height="15" fill="rgb(222,56,46)"/><text x="56.4837%" y="303.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place (16 samples, 0.60%)</title><rect x="62.3372%" y="277" width="0.5955%" height="15" fill="rgb(239,76,54)"/><text x="62.5872%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.19%)</title><rect x="62.7466%" y="261" width="0.1861%" height="15" fill="rgb(231,124,27)"/><text x="62.9966%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.19%)</title><rect x="62.7466%" y="245" width="0.1861%" height="15" fill="rgb(249,195,6)"/><text x="62.9966%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.19%)</title><rect x="62.7466%" y="229" width="0.1861%" height="15" fill="rgb(237,174,47)"/><text x="62.9966%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.19%)</title><rect x="62.7466%" y="213" width="0.1861%" height="15" fill="rgb(206,201,31)"/><text x="62.9966%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8 samples, 0.30%)</title><rect x="62.9326%" y="325" width="0.2977%" height="15" fill="rgb(231,57,52)"/><text x="63.1826%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4 samples, 0.15%)</title><rect x="63.0815%" y="309" width="0.1489%" height="15" fill="rgb(248,177,22)"/><text x="63.3315%" y="319.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::unmark (21 samples, 0.78%)</title><rect x="63.4909%" y="309" width="0.7815%" height="15" fill="rgb(215,211,37)"/><text x="63.7409%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (21 samples, 0.78%)</title><rect x="63.4909%" y="293" width="0.7815%" height="15" fill="rgb(241,128,51)"/><text x="63.7409%" y="303.50"></text></g><g><title>core::mem::replace (21 samples, 0.78%)</title><rect x="63.4909%" y="277" width="0.7815%" height="15" fill="rgb(227,165,31)"/><text x="63.7409%" y="287.50"></text></g><g><title>core::mem::swap (4 samples, 0.15%)</title><rect x="64.1236%" y="261" width="0.1489%" height="15" fill="rgb(228,167,24)"/><text x="64.3736%" y="271.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (4 samples, 0.15%)</title><rect x="64.1236%" y="245" width="0.1489%" height="15" fill="rgb(228,143,12)"/><text x="64.3736%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.15%)</title><rect x="64.1236%" y="229" width="0.1489%" height="15" fill="rgb(249,149,8)"/><text x="64.3736%" y="239.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;dyn spacelox_core::managed::Manage&gt;::size (10 samples, 0.37%)</title><rect x="64.2724%" y="309" width="0.3722%" height="15" fill="rgb(243,35,44)"/><text x="64.5224%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::retain (237 samples, 8.82%)</title><rect x="55.8616%" y="341" width="8.8202%" height="15" fill="rgb(246,89,9)"/><text x="56.1116%" y="351.50">alloc::vec::..</text></g><g><title>spacelox_vm::memory::Gc::sweep::_{{closure}} (38 samples, 1.41%)</title><rect x="63.2676%" y="325" width="1.4142%" height="15" fill="rgb(233,213,13)"/><text x="63.5176%" y="335.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep (239 samples, 8.89%)</title><rect x="55.8616%" y="357" width="8.8947%" height="15" fill="rgb(233,141,41)"/><text x="56.1116%" y="367.50">spacelox_vm::..</text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="64.8307%" y="309" width="0.1489%" height="15" fill="rgb(239,167,4)"/><text x="65.0807%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="64.8307%" y="293" width="0.1489%" height="15" fill="rgb(209,217,16)"/><text x="65.0807%" y="303.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::call (822 samples, 30.59%)</title><rect x="34.5367%" y="421" width="30.5917%" height="15" fill="rgb(219,88,35)"/><text x="34.7867%" y="431.50">spacelox_vm::vm::VmExecutor::call</text></g><g><title>spacelox_vm::memory::Gc::clone_managed (743 samples, 27.65%)</title><rect x="37.4767%" y="405" width="27.6517%" height="15" fill="rgb(220,193,23)"/><text x="37.7267%" y="415.50">spacelox_vm::memory::Gc::clone_managed</text></g><g><title>spacelox_vm::memory::Gc::allocate (592 samples, 22.03%)</title><rect x="43.0964%" y="389" width="22.0320%" height="15" fill="rgb(230,90,52)"/><text x="43.3464%" y="399.50">spacelox_vm::memory::Gc::allocate</text></g><g><title>spacelox_vm::memory::Gc::collect_garbage (288 samples, 10.72%)</title><rect x="54.4101%" y="373" width="10.7183%" height="15" fill="rgb(252,106,19)"/><text x="54.6601%" y="383.50">spacelox_vm::mem..</text></g><g><title>spacelox_vm::memory::Gc::sweep_string_cache (10 samples, 0.37%)</title><rect x="64.7562%" y="357" width="0.3722%" height="15" fill="rgb(206,74,20)"/><text x="65.0062%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::retain (10 samples, 0.37%)</title><rect x="64.7562%" y="341" width="0.3722%" height="15" fill="rgb(230,138,44)"/><text x="65.0062%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::retain (10 samples, 0.37%)</title><rect x="64.7562%" y="325" width="0.3722%" height="15" fill="rgb(235,182,43)"/><text x="65.0062%" y="335.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep_string_cache::_{{closure}} (4 samples, 0.15%)</title><rect x="64.9795%" y="309" width="0.1489%" height="15" fill="rgb(242,16,51)"/><text x="65.2295%" y="319.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::marked (3 samples, 0.11%)</title><rect x="65.0167%" y="293" width="0.1116%" height="15" fill="rgb(248,9,4)"/><text x="65.2667%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (3 samples, 0.11%)</title><rect x="65.0167%" y="277" width="0.1116%" height="15" fill="rgb(210,31,22)"/><text x="65.2667%" y="287.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.26%)</title><rect x="67.4730%" y="325" width="0.2605%" height="15" fill="rgb(239,54,39)"/><text x="67.7230%" y="335.50"></text></g><g><title>spacelox_core::managed::Managed&lt;T&gt;::obj (7 samples, 0.26%)</title><rect x="67.4730%" y="309" width="0.2605%" height="15" fill="rgb(230,99,41)"/><text x="67.7230%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.22%)</title><rect x="69.1105%" y="213" width="0.2233%" height="15" fill="rgb(253,106,12)"/><text x="69.3605%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (37 samples, 1.38%)</title><rect x="68.7384%" y="229" width="1.3770%" height="15" fill="rgb(213,46,41)"/><text x="68.9884%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (21 samples, 0.78%)</title><rect x="69.3338%" y="213" width="0.7815%" height="15" fill="rgb(215,133,35)"/><text x="69.5838%" y="223.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (101 samples, 3.76%)</title><rect x="67.4730%" y="341" width="3.7588%" height="15" fill="rgb(213,28,5)"/><text x="67.7230%" y="351.50">&lt;spa..</text></g><g><title>core::ptr::hash (94 samples, 3.50%)</title><rect x="67.7335%" y="325" width="3.4983%" height="15" fill="rgb(215,77,49)"/><text x="67.9835%" y="335.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (89 samples, 3.31%)</title><rect x="67.9196%" y="309" width="3.3122%" height="15" fill="rgb(248,100,22)"/><text x="68.1696%" y="319.50">cor..</text></g><g><title>core::hash::Hasher::write_usize (89 samples, 3.31%)</title><rect x="67.9196%" y="293" width="3.3122%" height="15" fill="rgb(208,67,9)"/><text x="68.1696%" y="303.50">cor..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (89 samples, 3.31%)</title><rect x="67.9196%" y="277" width="3.3122%" height="15" fill="rgb(219,133,21)"/><text x="68.1696%" y="287.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (89 samples, 3.31%)</title><rect x="67.9196%" y="261" width="3.3122%" height="15" fill="rgb(246,46,29)"/><text x="68.1696%" y="271.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 samples, 3.31%)</title><rect x="67.9196%" y="245" width="3.3122%" height="15" fill="rgb(246,185,52)"/><text x="68.1696%" y="255.50">&lt;co..</text></g><g><title>core::hash::sip::u8to64_le (30 samples, 1.12%)</title><rect x="70.1154%" y="229" width="1.1165%" height="15" fill="rgb(252,136,11)"/><text x="70.3654%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 0.52%)</title><rect x="71.9017%" y="277" width="0.5210%" height="15" fill="rgb(219,138,53)"/><text x="72.1517%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (23 samples, 0.86%)</title><rect x="71.7157%" y="293" width="0.8560%" height="15" fill="rgb(211,51,23)"/><text x="71.9657%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.15%)</title><rect x="72.4228%" y="277" width="0.1489%" height="15" fill="rgb(247,221,28)"/><text x="72.6728%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (29 samples, 1.08%)</title><rect x="73.2787%" y="277" width="1.0793%" height="15" fill="rgb(251,222,45)"/><text x="73.5287%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (102 samples, 3.80%)</title><rect x="71.2319%" y="341" width="3.7961%" height="15" fill="rgb(217,162,53)"/><text x="71.4819%" y="351.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (102 samples, 3.80%)</title><rect x="71.2319%" y="325" width="3.7961%" height="15" fill="rgb(229,93,14)"/><text x="71.4819%" y="335.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (102 samples, 3.80%)</title><rect x="71.2319%" y="309" width="3.7961%" height="15" fill="rgb(209,67,49)"/><text x="71.4819%" y="319.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (66 samples, 2.46%)</title><rect x="72.5716%" y="293" width="2.4563%" height="15" fill="rgb(213,87,29)"/><text x="72.8216%" y="303.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (18 samples, 0.67%)</title><rect x="74.3580%" y="277" width="0.6699%" height="15" fill="rgb(205,151,52)"/><text x="74.6080%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (229 samples, 8.52%)</title><rect x="67.4358%" y="357" width="8.5225%" height="15" fill="rgb(253,215,39)"/><text x="67.6858%" y="367.50">hashbrown::m..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (25 samples, 0.93%)</title><rect x="75.0279%" y="341" width="0.9304%" height="15" fill="rgb(221,220,41)"/><text x="75.2779%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (15 samples, 0.56%)</title><rect x="75.4001%" y="325" width="0.5582%" height="15" fill="rgb(218,133,21)"/><text x="75.6501%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (15 samples, 0.56%)</title><rect x="75.4001%" y="309" width="0.5582%" height="15" fill="rgb(221,193,43)"/><text x="75.6501%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (15 samples, 0.56%)</title><rect x="75.4001%" y="293" width="0.5582%" height="15" fill="rgb(240,128,52)"/><text x="75.6501%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.41%)</title><rect x="76.3305%" y="341" width="0.4094%" height="15" fill="rgb(253,114,12)"/><text x="76.5805%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (11 samples, 0.41%)</title><rect x="76.3305%" y="325" width="0.4094%" height="15" fill="rgb(215,223,47)"/><text x="76.5805%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (11 samples, 0.41%)</title><rect x="76.3305%" y="309" width="0.4094%" height="15" fill="rgb(248,225,23)"/><text x="76.5805%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (5 samples, 0.19%)</title><rect x="76.7399%" y="341" width="0.1861%" height="15" fill="rgb(250,108,0)"/><text x="76.9899%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5 samples, 0.19%)</title><rect x="76.7399%" y="325" width="0.1861%" height="15" fill="rgb(228,208,7)"/><text x="76.9899%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.19%)</title><rect x="76.7399%" y="309" width="0.1861%" height="15" fill="rgb(244,45,10)"/><text x="76.9899%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (5 samples, 0.19%)</title><rect x="76.7399%" y="293" width="0.1861%" height="15" fill="rgb(207,125,25)"/><text x="76.9899%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.15%)</title><rect x="76.9632%" y="341" width="0.1489%" height="15" fill="rgb(210,195,18)"/><text x="77.2132%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.67%)</title><rect x="77.1492%" y="325" width="0.6699%" height="15" fill="rgb(249,80,12)"/><text x="77.3992%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::invoke_from_class (351 samples, 13.06%)</title><rect x="65.1284%" y="421" width="13.0629%" height="15" fill="rgb(221,65,9)"/><text x="65.3784%" y="431.50">spacelox_vm::vm::VmE..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (292 samples, 10.87%)</title><rect x="67.3242%" y="405" width="10.8671%" height="15" fill="rgb(235,49,36)"/><text x="67.5742%" y="415.50">std::collections..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (289 samples, 10.76%)</title><rect x="67.4358%" y="389" width="10.7555%" height="15" fill="rgb(225,32,20)"/><text x="67.6858%" y="399.50">hashbrown::map::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (289 samples, 10.76%)</title><rect x="67.4358%" y="373" width="10.7555%" height="15" fill="rgb(215,141,46)"/><text x="67.6858%" y="383.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (60 samples, 2.23%)</title><rect x="75.9583%" y="357" width="2.2330%" height="15" fill="rgb(250,160,47)"/><text x="76.2083%" y="367.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (28 samples, 1.04%)</title><rect x="77.1492%" y="341" width="1.0421%" height="15" fill="rgb(216,222,40)"/><text x="77.3992%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (10 samples, 0.37%)</title><rect x="77.8191%" y="325" width="0.3722%" height="15" fill="rgb(234,217,39)"/><text x="78.0691%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (10 samples, 0.37%)</title><rect x="77.8191%" y="309" width="0.3722%" height="15" fill="rgb(207,178,40)"/><text x="78.0691%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (10 samples, 0.37%)</title><rect x="77.8191%" y="293" width="0.3722%" height="15" fill="rgb(221,136,13)"/><text x="78.0691%" y="303.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::peek (13 samples, 0.48%)</title><rect x="78.1913%" y="421" width="0.4838%" height="15" fill="rgb(249,199,10)"/><text x="78.4413%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::get_val (7 samples, 0.26%)</title><rect x="78.4146%" y="405" width="0.2605%" height="15" fill="rgb(249,222,13)"/><text x="78.6646%" y="415.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (5 samples, 0.19%)</title><rect x="78.6751%" y="421" width="0.1861%" height="15" fill="rgb(244,185,38)"/><text x="78.9251%" y="431.50"></text></g><g><title>spacelox_core::value::Value::to_string (5 samples, 0.19%)</title><rect x="78.8612%" y="405" width="0.1861%" height="15" fill="rgb(236,202,9)"/><text x="79.1112%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.15%)</title><rect x="79.4939%" y="389" width="0.1489%" height="15" fill="rgb(250,229,37)"/><text x="79.7439%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.15%)</title><rect x="79.4939%" y="373" width="0.1489%" height="15" fill="rgb(206,174,23)"/><text x="79.7439%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (4 samples, 0.15%)</title><rect x="79.4939%" y="357" width="0.1489%" height="15" fill="rgb(211,33,43)"/><text x="79.7439%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.15%)</title><rect x="79.4939%" y="341" width="0.1489%" height="15" fill="rgb(245,58,50)"/><text x="79.7439%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_string (25 samples, 0.93%)</title><rect x="78.8612%" y="421" width="0.9304%" height="15" fill="rgb(244,68,36)"/><text x="79.1112%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_constant (20 samples, 0.74%)</title><rect x="79.0473%" y="405" width="0.7443%" height="15" fill="rgb(232,229,15)"/><text x="79.2973%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.15%)</title><rect x="79.6427%" y="389" width="0.1489%" height="15" fill="rgb(254,30,23)"/><text x="79.8927%" y="399.50"></text></g><g><title>[unknown] (4 samples, 0.15%)</title><rect x="79.6427%" y="373" width="0.1489%" height="15" fill="rgb(235,160,14)"/><text x="79.8927%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.15%)</title><rect x="79.6427%" y="357" width="0.1489%" height="15" fill="rgb(212,155,44)"/><text x="79.8927%" y="367.50"></text></g><g><title>[unknown] (4 samples, 0.15%)</title><rect x="79.6427%" y="341" width="0.1489%" height="15" fill="rgb(226,2,50)"/><text x="79.8927%" y="351.50"></text></g><g><title>[unknown] (4 samples, 0.15%)</title><rect x="79.6427%" y="325" width="0.1489%" height="15" fill="rgb(234,177,6)"/><text x="79.8927%" y="335.50"></text></g><g><title>[unknown] (4 samples, 0.15%)</title><rect x="79.6427%" y="309" width="0.1489%" height="15" fill="rgb(217,24,9)"/><text x="79.8927%" y="319.50"></text></g><g><title>[unknown] (4 samples, 0.15%)</title><rect x="79.6427%" y="293" width="0.1489%" height="15" fill="rgb(220,13,46)"/><text x="79.8927%" y="303.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.11%)</title><rect x="79.8660%" y="341" width="0.1116%" height="15" fill="rgb(239,221,27)"/><text x="80.1160%" y="351.50"></text></g><g><title>spacelox_core::managed::Managed&lt;T&gt;::obj (3 samples, 0.11%)</title><rect x="79.8660%" y="325" width="0.1116%" height="15" fill="rgb(222,198,25)"/><text x="80.1160%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.26%)</title><rect x="81.9873%" y="229" width="0.2605%" height="15" fill="rgb(211,99,13)"/><text x="82.2373%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (44 samples, 1.64%)</title><rect x="81.1686%" y="245" width="1.6375%" height="15" fill="rgb(232,111,31)"/><text x="81.4186%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (15 samples, 0.56%)</title><rect x="82.2479%" y="229" width="0.5582%" height="15" fill="rgb(245,82,37)"/><text x="82.4979%" y="239.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (98 samples, 3.65%)</title><rect x="79.8660%" y="357" width="3.6472%" height="15" fill="rgb(227,149,46)"/><text x="80.1160%" y="367.50">&lt;spa..</text></g><g><title>core::ptr::hash (95 samples, 3.54%)</title><rect x="79.9777%" y="341" width="3.5355%" height="15" fill="rgb(218,36,50)"/><text x="80.2277%" y="351.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (91 samples, 3.39%)</title><rect x="80.1265%" y="325" width="3.3867%" height="15" fill="rgb(226,80,48)"/><text x="80.3765%" y="335.50">cor..</text></g><g><title>core::hash::Hasher::write_usize (91 samples, 3.39%)</title><rect x="80.1265%" y="309" width="3.3867%" height="15" fill="rgb(238,224,15)"/><text x="80.3765%" y="319.50">cor..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (85 samples, 3.16%)</title><rect x="80.3498%" y="293" width="3.1634%" height="15" fill="rgb(241,136,10)"/><text x="80.5998%" y="303.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (85 samples, 3.16%)</title><rect x="80.3498%" y="277" width="3.1634%" height="15" fill="rgb(208,32,45)"/><text x="80.5998%" y="287.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (85 samples, 3.16%)</title><rect x="80.3498%" y="261" width="3.1634%" height="15" fill="rgb(207,135,9)"/><text x="80.5998%" y="271.50">&lt;co..</text></g><g><title>core::hash::sip::u8to64_le (19 samples, 0.71%)</title><rect x="82.8061%" y="245" width="0.7071%" height="15" fill="rgb(206,86,44)"/><text x="83.0561%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (13 samples, 0.48%)</title><rect x="84.5180%" y="293" width="0.4838%" height="15" fill="rgb(245,177,15)"/><text x="84.7680%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (24 samples, 0.89%)</title><rect x="84.2575%" y="309" width="0.8932%" height="15" fill="rgb(206,64,50)"/><text x="84.5075%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.15%)</title><rect x="85.0019%" y="293" width="0.1489%" height="15" fill="rgb(234,36,40)"/><text x="85.2519%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (28 samples, 1.04%)</title><rect x="86.1556%" y="293" width="1.0421%" height="15" fill="rgb(213,64,8)"/><text x="86.4056%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (120 samples, 4.47%)</title><rect x="83.5132%" y="357" width="4.4659%" height="15" fill="rgb(210,75,36)"/><text x="83.7632%" y="367.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (120 samples, 4.47%)</title><rect x="83.5132%" y="341" width="4.4659%" height="15" fill="rgb(229,88,21)"/><text x="83.7632%" y="351.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (120 samples, 4.47%)</title><rect x="83.5132%" y="325" width="4.4659%" height="15" fill="rgb(252,204,47)"/><text x="83.7632%" y="335.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (76 samples, 2.83%)</title><rect x="85.1507%" y="309" width="2.8284%" height="15" fill="rgb(208,77,27)"/><text x="85.4007%" y="319.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (21 samples, 0.78%)</title><rect x="87.1976%" y="293" width="0.7815%" height="15" fill="rgb(221,76,26)"/><text x="87.4476%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (236 samples, 8.78%)</title><rect x="79.8660%" y="373" width="8.7830%" height="15" fill="rgb(225,139,18)"/><text x="80.1160%" y="383.50">hashbrown::m..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (18 samples, 0.67%)</title><rect x="87.9792%" y="357" width="0.6699%" height="15" fill="rgb(230,137,11)"/><text x="88.2292%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (8 samples, 0.30%)</title><rect x="88.3513%" y="341" width="0.2977%" height="15" fill="rgb(212,28,1)"/><text x="88.6013%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (8 samples, 0.30%)</title><rect x="88.3513%" y="325" width="0.2977%" height="15" fill="rgb(248,164,17)"/><text x="88.6013%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (8 samples, 0.30%)</title><rect x="88.3513%" y="309" width="0.2977%" height="15" fill="rgb(222,171,42)"/><text x="88.6013%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (27 samples, 1.00%)</title><rect x="88.9096%" y="341" width="1.0048%" height="15" fill="rgb(243,84,45)"/><text x="89.1596%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (36 samples, 1.34%)</title><rect x="88.9096%" y="357" width="1.3398%" height="15" fill="rgb(252,49,23)"/><text x="89.1596%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (9 samples, 0.33%)</title><rect x="89.9144%" y="341" width="0.3349%" height="15" fill="rgb(215,19,7)"/><text x="90.1644%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (9 samples, 0.33%)</title><rect x="89.9144%" y="325" width="0.3349%" height="15" fill="rgb(238,81,41)"/><text x="90.1644%" y="335.50"></text></g><g><title>core::core_arch::simd::i8x16::new (9 samples, 0.33%)</title><rect x="89.9144%" y="309" width="0.3349%" height="15" fill="rgb(210,199,37)"/><text x="90.1644%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_invoke (1,562 samples, 58.13%)</title><rect x="32.3781%" y="437" width="58.1317%" height="15" fill="rgb(244,192,49)"/><text x="32.6281%" y="447.50">spacelox_vm::vm::VmExecutor::op_invoke</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (288 samples, 10.72%)</title><rect x="79.7916%" y="421" width="10.7183%" height="15" fill="rgb(226,211,11)"/><text x="80.0416%" y="431.50">std::collections..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (286 samples, 10.64%)</title><rect x="79.8660%" y="405" width="10.6438%" height="15" fill="rgb(236,162,54)"/><text x="80.1160%" y="415.50">hashbrown::map::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (286 samples, 10.64%)</title><rect x="79.8660%" y="389" width="10.6438%" height="15" fill="rgb(220,229,9)"/><text x="80.1160%" y="399.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (50 samples, 1.86%)</title><rect x="88.6491%" y="373" width="1.8608%" height="15" fill="rgb(250,87,22)"/><text x="88.8991%" y="383.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (7 samples, 0.26%)</title><rect x="90.2493%" y="357" width="0.2605%" height="15" fill="rgb(239,43,17)"/><text x="90.4993%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.26%)</title><rect x="90.2493%" y="341" width="0.2605%" height="15" fill="rgb(231,177,25)"/><text x="90.4993%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.26%)</title><rect x="90.2493%" y="325" width="0.2605%" height="15" fill="rgb(219,179,1)"/><text x="90.4993%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_less (3 samples, 0.11%)</title><rect x="90.5099%" y="437" width="0.1116%" height="15" fill="rgb(238,219,53)"/><text x="90.7599%" y="447.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::pop (3 samples, 0.11%)</title><rect x="90.5099%" y="421" width="0.1116%" height="15" fill="rgb(232,167,36)"/><text x="90.7599%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.37%)</title><rect x="93.5616%" y="405" width="0.3722%" height="15" fill="rgb(244,19,51)"/><text x="93.8116%" y="415.50"></text></g><g><title>&lt;core::slice::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (10 samples, 0.37%)</title><rect x="93.5616%" y="389" width="0.3722%" height="15" fill="rgb(224,6,22)"/><text x="93.8116%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::close_upvalues (47 samples, 1.75%)</title><rect x="92.8917%" y="421" width="1.7492%" height="15" fill="rgb(224,145,5)"/><text x="93.1417%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::retain (19 samples, 0.71%)</title><rect x="93.9338%" y="405" width="0.7071%" height="15" fill="rgb(234,130,49)"/><text x="94.1838%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (19 samples, 0.71%)</title><rect x="93.9338%" y="389" width="0.7071%" height="15" fill="rgb(254,6,2)"/><text x="94.1838%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::current_frame (14 samples, 0.52%)</title><rect x="94.6409%" y="421" width="0.5210%" height="15" fill="rgb(208,96,46)"/><text x="94.8909%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::pop (45 samples, 1.67%)</title><rect x="95.1619%" y="421" width="1.6747%" height="15" fill="rgb(239,3,39)"/><text x="95.4119%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_return (176 samples, 6.55%)</title><rect x="90.6959%" y="437" width="6.5501%" height="15" fill="rgb(233,210,1)"/><text x="90.9459%" y="447.50">spacelox_..</text></g><g><title>spacelox_vm::vm::VmExecutor::push (11 samples, 0.41%)</title><rect x="96.8366%" y="421" width="0.4094%" height="15" fill="rgb(244,137,37)"/><text x="97.0866%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::set_val (11 samples, 0.41%)</title><rect x="96.8366%" y="405" width="0.4094%" height="15" fill="rgb(240,136,2)"/><text x="97.0866%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.11%)</title><rect x="97.3949%" y="389" width="0.1116%" height="15" fill="rgb(239,18,37)"/><text x="97.6449%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.11%)</title><rect x="97.3949%" y="373" width="0.1116%" height="15" fill="rgb(218,185,22)"/><text x="97.6449%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.11%)</title><rect x="97.3949%" y="357" width="0.1116%" height="15" fill="rgb(225,218,4)"/><text x="97.6449%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.11%)</title><rect x="97.3949%" y="341" width="0.1116%" height="15" fill="rgb(230,182,32)"/><text x="97.6449%" y="351.50"></text></g><g><title>__libc_start_main (2,211 samples, 82.29%)</title><rect x="15.2587%" y="613" width="82.2851%" height="15" fill="rgb(242,56,43)"/><text x="15.5087%" y="623.50">__libc_start_main</text></g><g><title>main (2,211 samples, 82.29%)</title><rect x="15.2587%" y="597" width="82.2851%" height="15" fill="rgb(233,99,24)"/><text x="15.5087%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (2,211 samples, 82.29%)</title><rect x="15.2587%" y="581" width="82.2851%" height="15" fill="rgb(234,209,42)"/><text x="15.5087%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,211 samples, 82.29%)</title><rect x="15.2587%" y="565" width="82.2851%" height="15" fill="rgb(227,7,12)"/><text x="15.5087%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,211 samples, 82.29%)</title><rect x="15.2587%" y="549" width="82.2851%" height="15" fill="rgb(245,203,43)"/><text x="15.5087%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,211 samples, 82.29%)</title><rect x="15.2587%" y="533" width="82.2851%" height="15" fill="rgb(238,205,33)"/><text x="15.5087%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (2,211 samples, 82.29%)</title><rect x="15.2587%" y="517" width="82.2851%" height="15" fill="rgb(231,56,7)"/><text x="15.5087%" y="527.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::rt::lang_start::_{{closure}} (2,211 samples, 82.29%)</title><rect x="15.2587%" y="501" width="82.2851%" height="15" fill="rgb(244,186,29)"/><text x="15.5087%" y="511.50">std::rt::lang_start::_{{closure}}</text></g><g><title>spacelox::main (2,211 samples, 82.29%)</title><rect x="15.2587%" y="485" width="82.2851%" height="15" fill="rgb(234,111,31)"/><text x="15.5087%" y="495.50">spacelox::main</text></g><g><title>spacelox_vm::vm::Vm::interpret (2,211 samples, 82.29%)</title><rect x="15.2587%" y="469" width="82.2851%" height="15" fill="rgb(241,149,10)"/><text x="15.5087%" y="479.50">spacelox_vm::vm::Vm::interpret</text></g><g><title>spacelox_vm::vm::VmExecutor::run (2,211 samples, 82.29%)</title><rect x="15.2587%" y="453" width="82.2851%" height="15" fill="rgb(249,206,44)"/><text x="15.5087%" y="463.50">spacelox_vm::vm::VmExecutor::run</text></g><g><title>spacelox_vm::vm::VmExecutor::op_set_global (8 samples, 0.30%)</title><rect x="97.2460%" y="437" width="0.2977%" height="15" fill="rgb(251,153,30)"/><text x="97.4960%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.22%)</title><rect x="97.3204%" y="421" width="0.2233%" height="15" fill="rgb(239,152,38)"/><text x="97.5704%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.19%)</title><rect x="97.3576%" y="405" width="0.1861%" height="15" fill="rgb(249,139,47)"/><text x="97.6076%" y="415.50"></text></g><g><title>_start (2,212 samples, 82.32%)</title><rect x="15.2587%" y="629" width="82.3223%" height="15" fill="rgb(244,64,35)"/><text x="15.5087%" y="639.50">_start</text></g><g><title>spacelox_vm::vm::VmExecutor::frame_instruction (38 samples, 1.41%)</title><rect x="97.5809%" y="597" width="1.4142%" height="15" fill="rgb(216,46,15)"/><text x="97.8309%" y="607.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_get_global (5 samples, 0.19%)</title><rect x="98.9952%" y="597" width="0.1861%" height="15" fill="rgb(250,74,19)"/><text x="99.2452%" y="607.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_return (19 samples, 0.71%)</title><rect x="99.2557%" y="597" width="0.7071%" height="15" fill="rgb(249,42,33)"/><text x="99.5057%" y="607.50"></text></g><g><title>all (2,687 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(242,149,17)"/><text x="0.2500%" y="671.50"></text></g><g><title>spacelox (2,682 samples, 99.81%)</title><rect x="0.1861%" y="645" width="99.8139%" height="15" fill="rgb(244,29,21)"/><text x="0.4361%" y="655.50">spacelox</text></g><g><title>spacelox_vm::vm::Vm::interpret (65 samples, 2.42%)</title><rect x="97.5809%" y="629" width="2.4191%" height="15" fill="rgb(220,130,37)"/><text x="97.8309%" y="639.50">sp..</text></g><g><title>spacelox_vm::vm::VmExecutor::run (65 samples, 2.42%)</title><rect x="97.5809%" y="613" width="2.4191%" height="15" fill="rgb(211,67,2)"/><text x="97.8309%" y="623.50">sp..</text></g></svg></svg>