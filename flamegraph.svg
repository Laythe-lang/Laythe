<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="613.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="613.00"> </text><svg id="frames" x="10" width="1180"><g><title>perf (4 samples, 0.21%)</title><rect x="0.0000%" y="565" width="0.2114%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.21%)</title><rect x="0.0000%" y="549" width="0.2114%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.21%)</title><rect x="0.0000%" y="533" width="0.2114%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.21%)</title><rect x="0.0000%" y="517" width="0.2114%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.21%)</title><rect x="0.0000%" y="501" width="0.2114%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.21%)</title><rect x="0.0000%" y="485" width="0.2114%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.21%)</title><rect x="0.0000%" y="469" width="0.2114%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.21%)</title><rect x="0.0000%" y="453" width="0.2114%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.21%)</title><rect x="0.0000%" y="437" width="0.2114%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="447.50"></text></g><g><title>[unknown] (4 samples, 0.21%)</title><rect x="0.0000%" y="421" width="0.2114%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="431.50"></text></g><g><title>core::iter::adapters::Rev&lt;T&gt;::new (2 samples, 0.11%)</title><rect x="0.2114%" y="533" width="0.1057%" height="15" fill="rgb(250,228,42)"/><text x="0.4614%" y="543.50"></text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (5 samples, 0.26%)</title><rect x="0.3171%" y="533" width="0.2643%" height="15" fill="rgb(240,193,28)"/><text x="0.5671%" y="543.50"></text></g><g><title>spacelox_core::value::boxed::Value::value_class (6 samples, 0.32%)</title><rect x="0.5814%" y="533" width="0.3171%" height="15" fill="rgb(216,20,37)"/><text x="0.8314%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (9 samples, 0.48%)</title><rect x="0.8985%" y="533" width="0.4757%" height="15" fill="rgb(206,188,39)"/><text x="1.1485%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (25 samples, 1.32%)</title><rect x="1.3742%" y="533" width="1.3214%" height="15" fill="rgb(217,207,13)"/><text x="1.6242%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::get_property (17 samples, 0.90%)</title><rect x="2.6956%" y="533" width="0.8985%" height="15" fill="rgb(231,73,38)"/><text x="2.9456%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke_from_class (19 samples, 1.00%)</title><rect x="3.5941%" y="533" width="1.0042%" height="15" fill="rgb(225,20,46)"/><text x="3.8441%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::resolve_call (28 samples, 1.48%)</title><rect x="4.5983%" y="533" width="1.4799%" height="15" fill="rgb(210,31,41)"/><text x="4.8483%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_global (5 samples, 0.26%)</title><rect x="6.0782%" y="517" width="0.2643%" height="15" fill="rgb(221,200,47)"/><text x="6.3282%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (5 samples, 0.26%)</title><rect x="6.0782%" y="501" width="0.2643%" height="15" fill="rgb(226,26,5)"/><text x="6.3282%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (5 samples, 0.26%)</title><rect x="6.0782%" y="485" width="0.2643%" height="15" fill="rgb(249,33,26)"/><text x="6.3282%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.26%)</title><rect x="6.0782%" y="469" width="0.2643%" height="15" fill="rgb(235,183,28)"/><text x="6.3282%" y="479.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (5 samples, 0.26%)</title><rect x="6.0782%" y="453" width="0.2643%" height="15" fill="rgb(221,5,38)"/><text x="6.3282%" y="463.50"></text></g><g><title>core::ptr::hash (5 samples, 0.26%)</title><rect x="6.0782%" y="437" width="0.2643%" height="15" fill="rgb(247,18,42)"/><text x="6.3282%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (5 samples, 0.26%)</title><rect x="6.0782%" y="421" width="0.2643%" height="15" fill="rgb(241,131,45)"/><text x="6.3282%" y="431.50"></text></g><g><title>core::hash::Hasher::write_usize (5 samples, 0.26%)</title><rect x="6.0782%" y="405" width="0.2643%" height="15" fill="rgb(249,31,29)"/><text x="6.3282%" y="415.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (5 samples, 0.26%)</title><rect x="6.0782%" y="389" width="0.2643%" height="15" fill="rgb(225,111,53)"/><text x="6.3282%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_property (16 samples, 0.85%)</title><rect x="6.3425%" y="517" width="0.8457%" height="15" fill="rgb(238,160,17)"/><text x="6.5925%" y="527.50"></text></g><g><title>[[heap]] (140 samples, 7.40%)</title><rect x="0.2114%" y="549" width="7.3996%" height="15" fill="rgb(214,148,48)"/><text x="0.4614%" y="559.50">[[heap]]</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::run (29 samples, 1.53%)</title><rect x="6.0782%" y="533" width="1.5328%" height="15" fill="rgb(232,36,49)"/><text x="6.3282%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_return (7 samples, 0.37%)</title><rect x="7.2410%" y="517" width="0.3700%" height="15" fill="rgb(209,103,24)"/><text x="7.4910%" y="527.50"></text></g><g><title>[[stack]] (8 samples, 0.42%)</title><rect x="7.6110%" y="549" width="0.4228%" height="15" fill="rgb(229,88,8)"/><text x="7.8610%" y="559.50"></text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (8 samples, 0.42%)</title><rect x="7.6110%" y="533" width="0.4228%" height="15" fill="rgb(213,181,19)"/><text x="7.8610%" y="543.50"></text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (17 samples, 0.90%)</title><rect x="8.0867%" y="533" width="0.8985%" height="15" fill="rgb(254,191,54)"/><text x="8.3367%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (32 samples, 1.69%)</title><rect x="9.0381%" y="533" width="1.6913%" height="15" fill="rgb(241,83,37)"/><text x="9.2881%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (14 samples, 0.74%)</title><rect x="10.7294%" y="533" width="0.7400%" height="15" fill="rgb(233,36,39)"/><text x="10.9794%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::get_property (29 samples, 1.53%)</title><rect x="11.4693%" y="533" width="1.5328%" height="15" fill="rgb(226,3,54)"/><text x="11.7193%" y="543.50"></text></g><g><title>spacelox_core::object::Instance::get_field (13 samples, 0.69%)</title><rect x="12.3150%" y="517" width="0.6871%" height="15" fill="rgb(245,192,40)"/><text x="12.5650%" y="527.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke_from_class (11 samples, 0.58%)</title><rect x="13.0021%" y="533" width="0.5814%" height="15" fill="rgb(238,167,29)"/><text x="13.2521%" y="543.50"></text></g><g><title>[unknown] (123 samples, 6.50%)</title><rect x="8.0338%" y="549" width="6.5011%" height="15" fill="rgb(232,182,51)"/><text x="8.2838%" y="559.50">[unknown]</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::resolve_call (18 samples, 0.95%)</title><rect x="13.5835%" y="533" width="0.9514%" height="15" fill="rgb(231,60,39)"/><text x="13.8335%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_add (4 samples, 0.21%)</title><rect x="17.1247%" y="389" width="0.2114%" height="15" fill="rgb(208,69,12)"/><text x="17.3747%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_constant (2 samples, 0.11%)</title><rect x="17.3362%" y="389" width="0.1057%" height="15" fill="rgb(235,93,37)"/><text x="17.5862%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_drop (2 samples, 0.11%)</title><rect x="17.4419%" y="389" width="0.1057%" height="15" fill="rgb(213,116,39)"/><text x="17.6919%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::drop (2 samples, 0.11%)</title><rect x="17.4419%" y="373" width="0.1057%" height="15" fill="rgb(222,207,29)"/><text x="17.6919%" y="383.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.26%)</title><rect x="19.8203%" y="245" width="0.2643%" height="15" fill="rgb(206,96,30)"/><text x="20.0703%" y="255.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (3 samples, 0.16%)</title><rect x="19.9260%" y="229" width="0.1586%" height="15" fill="rgb(218,138,4)"/><text x="20.1760%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.16%)</title><rect x="19.9260%" y="213" width="0.1586%" height="15" fill="rgb(250,191,14)"/><text x="20.1760%" y="223.50"></text></g><g><title>core::iter::adapters::Rev&lt;T&gt;::new (3 samples, 0.16%)</title><rect x="20.0846%" y="245" width="0.1586%" height="15" fill="rgb(239,60,40)"/><text x="20.3346%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (170 samples, 8.99%)</title><rect x="17.6533%" y="341" width="8.9852%" height="15" fill="rgb(206,27,48)"/><text x="17.9033%" y="351.50">hashbrown::ma..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (170 samples, 8.99%)</title><rect x="17.6533%" y="325" width="8.9852%" height="15" fill="rgb(225,35,8)"/><text x="17.9033%" y="335.50">&lt;spacelox_cor..</text></g><g><title>core::ptr::hash (170 samples, 8.99%)</title><rect x="17.6533%" y="309" width="8.9852%" height="15" fill="rgb(250,213,24)"/><text x="17.9033%" y="319.50">core::ptr::ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (170 samples, 8.99%)</title><rect x="17.6533%" y="293" width="8.9852%" height="15" fill="rgb(247,123,22)"/><text x="17.9033%" y="303.50">core::hash::i..</text></g><g><title>core::hash::Hasher::write_usize (170 samples, 8.99%)</title><rect x="17.6533%" y="277" width="8.9852%" height="15" fill="rgb(231,138,38)"/><text x="17.9033%" y="287.50">core::hash::H..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (161 samples, 8.51%)</title><rect x="18.1290%" y="261" width="8.5095%" height="15" fill="rgb(231,145,46)"/><text x="18.3790%" y="271.50">&lt;fnv::FnvHas..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (121 samples, 6.40%)</title><rect x="20.2431%" y="245" width="6.3953%" height="15" fill="rgb(251,118,11)"/><text x="20.4931%" y="255.50">core::nu..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.32%)</title><rect x="28.0655%" y="325" width="0.3171%" height="15" fill="rgb(217,147,25)"/><text x="28.3155%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (16 samples, 0.85%)</title><rect x="28.3827%" y="309" width="0.8457%" height="15" fill="rgb(247,81,37)"/><text x="28.6327%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (16 samples, 0.85%)</title><rect x="28.3827%" y="293" width="0.8457%" height="15" fill="rgb(209,12,38)"/><text x="28.6327%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (16 samples, 0.85%)</title><rect x="28.3827%" y="277" width="0.8457%" height="15" fill="rgb(227,1,9)"/><text x="28.6327%" y="287.50"></text></g><g><title>core::num::&lt;impl u16&gt;::trailing_zeros (9 samples, 0.48%)</title><rect x="28.7526%" y="261" width="0.4757%" height="15" fill="rgb(248,47,43)"/><text x="29.0026%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.90%)</title><rect x="28.3827%" y="325" width="0.8985%" height="15" fill="rgb(221,10,30)"/><text x="28.6327%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (10 samples, 0.53%)</title><rect x="29.2812%" y="325" width="0.5285%" height="15" fill="rgb(210,229,1)"/><text x="29.5312%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (10 samples, 0.53%)</title><rect x="29.2812%" y="309" width="0.5285%" height="15" fill="rgb(222,148,37)"/><text x="29.5312%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (10 samples, 0.53%)</title><rect x="29.2812%" y="293" width="0.5285%" height="15" fill="rgb(234,67,33)"/><text x="29.5312%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (10 samples, 0.53%)</title><rect x="29.2812%" y="277" width="0.5285%" height="15" fill="rgb(247,98,35)"/><text x="29.5312%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (7 samples, 0.37%)</title><rect x="29.8097%" y="325" width="0.3700%" height="15" fill="rgb(247,138,52)"/><text x="30.0597%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (31 samples, 1.64%)</title><rect x="30.1797%" y="309" width="1.6385%" height="15" fill="rgb(213,79,30)"/><text x="30.4297%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (289 samples, 15.27%)</title><rect x="17.6533%" y="373" width="15.2748%" height="15" fill="rgb(246,177,23)"/><text x="17.9033%" y="383.50">hashbrown::map::HashMap..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (289 samples, 15.27%)</title><rect x="17.6533%" y="357" width="15.2748%" height="15" fill="rgb(230,62,27)"/><text x="17.9033%" y="367.50">hashbrown::map::HashMap..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (119 samples, 6.29%)</title><rect x="26.6385%" y="341" width="6.2896%" height="15" fill="rgb(216,154,8)"/><text x="26.8885%" y="351.50">hashbrow..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (52 samples, 2.75%)</title><rect x="30.1797%" y="325" width="2.7484%" height="15" fill="rgb(244,35,45)"/><text x="30.4297%" y="335.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (21 samples, 1.11%)</title><rect x="31.8182%" y="309" width="1.1099%" height="15" fill="rgb(251,115,12)"/><text x="32.0682%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (21 samples, 1.11%)</title><rect x="31.8182%" y="293" width="1.1099%" height="15" fill="rgb(240,54,50)"/><text x="32.0682%" y="303.50"></text></g><g><title>core::core_arch::simd::i8x16::new (21 samples, 1.11%)</title><rect x="31.8182%" y="277" width="1.1099%" height="15" fill="rgb(233,84,52)"/><text x="32.0682%" y="287.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (2 samples, 0.11%)</title><rect x="32.9281%" y="373" width="0.1057%" height="15" fill="rgb(207,117,47)"/><text x="33.1781%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::set_val (2 samples, 0.11%)</title><rect x="32.9281%" y="357" width="0.1057%" height="15" fill="rgb(249,43,39)"/><text x="33.1781%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_short (3 samples, 0.16%)</title><rect x="33.0338%" y="373" width="0.1586%" height="15" fill="rgb(209,38,44)"/><text x="33.2838%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (3 samples, 0.16%)</title><rect x="33.0338%" y="357" width="0.1586%" height="15" fill="rgb(236,212,23)"/><text x="33.2838%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_global (302 samples, 15.96%)</title><rect x="17.5476%" y="389" width="15.9619%" height="15" fill="rgb(242,79,21)"/><text x="17.7976%" y="399.50">spacelox_vm::vm::VmExecut..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (6 samples, 0.32%)</title><rect x="33.1924%" y="373" width="0.3171%" height="15" fill="rgb(211,96,35)"/><text x="33.4424%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_constant (6 samples, 0.32%)</title><rect x="33.1924%" y="357" width="0.3171%" height="15" fill="rgb(253,215,40)"/><text x="33.4424%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.32%)</title><rect x="33.1924%" y="341" width="0.3171%" height="15" fill="rgb(211,81,21)"/><text x="33.4424%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (6 samples, 0.32%)</title><rect x="33.1924%" y="325" width="0.3171%" height="15" fill="rgb(208,190,38)"/><text x="33.4424%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.32%)</title><rect x="33.1924%" y="309" width="0.3171%" height="15" fill="rgb(235,213,38)"/><text x="33.4424%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_local (26 samples, 1.37%)</title><rect x="33.5095%" y="389" width="1.3742%" height="15" fill="rgb(237,122,38)"/><text x="33.7595%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (21 samples, 1.11%)</title><rect x="33.7738%" y="373" width="1.1099%" height="15" fill="rgb(244,218,35)"/><text x="34.0238%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::set_val (2 samples, 0.11%)</title><rect x="34.7780%" y="357" width="0.1057%" height="15" fill="rgb(240,68,47)"/><text x="35.0280%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (72 samples, 3.81%)</title><rect x="37.5264%" y="293" width="3.8055%" height="15" fill="rgb(210,16,53)"/><text x="37.7764%" y="303.50">hash..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (72 samples, 3.81%)</title><rect x="37.5264%" y="277" width="3.8055%" height="15" fill="rgb(235,124,12)"/><text x="37.7764%" y="287.50">&lt;spa..</text></g><g><title>core::ptr::hash (72 samples, 3.81%)</title><rect x="37.5264%" y="261" width="3.8055%" height="15" fill="rgb(224,169,11)"/><text x="37.7764%" y="271.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (72 samples, 3.81%)</title><rect x="37.5264%" y="245" width="3.8055%" height="15" fill="rgb(250,166,2)"/><text x="37.7764%" y="255.50">core..</text></g><g><title>core::hash::Hasher::write_usize (72 samples, 3.81%)</title><rect x="37.5264%" y="229" width="3.8055%" height="15" fill="rgb(242,216,29)"/><text x="37.7764%" y="239.50">core..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (72 samples, 3.81%)</title><rect x="37.5264%" y="213" width="3.8055%" height="15" fill="rgb(230,116,27)"/><text x="37.7764%" y="223.50">&lt;fnv..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (52 samples, 2.75%)</title><rect x="38.5835%" y="197" width="2.7484%" height="15" fill="rgb(228,99,48)"/><text x="38.8335%" y="207.50">co..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.85%)</title><rect x="42.9704%" y="277" width="0.8457%" height="15" fill="rgb(253,11,6)"/><text x="43.2204%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (15 samples, 0.79%)</title><rect x="43.8161%" y="261" width="0.7928%" height="15" fill="rgb(247,143,39)"/><text x="44.0661%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (14 samples, 0.74%)</title><rect x="43.8689%" y="245" width="0.7400%" height="15" fill="rgb(236,97,10)"/><text x="44.1189%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (14 samples, 0.74%)</title><rect x="43.8689%" y="229" width="0.7400%" height="15" fill="rgb(233,208,19)"/><text x="44.1189%" y="239.50"></text></g><g><title>core::num::&lt;impl u16&gt;::trailing_zeros (13 samples, 0.69%)</title><rect x="43.9218%" y="213" width="0.6871%" height="15" fill="rgb(216,164,2)"/><text x="44.1718%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.90%)</title><rect x="43.8161%" y="277" width="0.8985%" height="15" fill="rgb(220,129,5)"/><text x="44.0661%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (2 samples, 0.11%)</title><rect x="44.6089%" y="261" width="0.1057%" height="15" fill="rgb(242,17,10)"/><text x="44.8589%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (2 samples, 0.11%)</title><rect x="44.7146%" y="277" width="0.1057%" height="15" fill="rgb(242,107,0)"/><text x="44.9646%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.11%)</title><rect x="44.7146%" y="261" width="0.1057%" height="15" fill="rgb(251,28,31)"/><text x="44.9646%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.11%)</title><rect x="44.7146%" y="245" width="0.1057%" height="15" fill="rgb(233,223,10)"/><text x="44.9646%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.11%)</title><rect x="44.7146%" y="229" width="0.1057%" height="15" fill="rgb(215,21,27)"/><text x="44.9646%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.26%)</title><rect x="44.8203%" y="277" width="0.2643%" height="15" fill="rgb(232,23,21)"/><text x="45.0703%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.26%)</title><rect x="44.8203%" y="261" width="0.2643%" height="15" fill="rgb(244,5,23)"/><text x="45.0703%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.26%)</title><rect x="44.8203%" y="245" width="0.2643%" height="15" fill="rgb(226,81,46)"/><text x="45.0703%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (31 samples, 1.64%)</title><rect x="45.0846%" y="261" width="1.6385%" height="15" fill="rgb(247,70,30)"/><text x="45.3346%" y="271.50"></text></g><g><title>spacelox_core::object::Instance::get_field (201 samples, 10.62%)</title><rect x="36.9450%" y="357" width="10.6237%" height="15" fill="rgb(212,68,19)"/><text x="37.1950%" y="367.50">spacelox_core::o..</text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (201 samples, 10.62%)</title><rect x="36.9450%" y="341" width="10.6237%" height="15" fill="rgb(240,187,13)"/><text x="37.1950%" y="351.50">spacelox_core::d..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (192 samples, 10.15%)</title><rect x="37.4207%" y="325" width="10.1480%" height="15" fill="rgb(223,113,26)"/><text x="37.6707%" y="335.50">hashbrown::map:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (192 samples, 10.15%)</title><rect x="37.4207%" y="309" width="10.1480%" height="15" fill="rgb(206,192,2)"/><text x="37.6707%" y="319.50">hashbrown::map:..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (118 samples, 6.24%)</title><rect x="41.3319%" y="293" width="6.2368%" height="15" fill="rgb(241,108,4)"/><text x="41.5819%" y="303.50">hashbrow..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (47 samples, 2.48%)</title><rect x="45.0846%" y="277" width="2.4841%" height="15" fill="rgb(247,173,49)"/><text x="45.3346%" y="287.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (16 samples, 0.85%)</title><rect x="46.7230%" y="261" width="0.8457%" height="15" fill="rgb(224,114,35)"/><text x="46.9730%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (16 samples, 0.85%)</title><rect x="46.7230%" y="245" width="0.8457%" height="15" fill="rgb(245,159,27)"/><text x="46.9730%" y="255.50"></text></g><g><title>core::core_arch::simd::i8x16::new (16 samples, 0.85%)</title><rect x="46.7230%" y="229" width="0.8457%" height="15" fill="rgb(245,172,44)"/><text x="46.9730%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="213" width="0.1057%" height="15" fill="rgb(236,23,11)"/><text x="47.7130%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="197" width="0.1057%" height="15" fill="rgb(205,117,38)"/><text x="47.7130%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="181" width="0.1057%" height="15" fill="rgb(237,72,25)"/><text x="47.7130%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="165" width="0.1057%" height="15" fill="rgb(244,70,9)"/><text x="47.7130%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="149" width="0.1057%" height="15" fill="rgb(217,125,39)"/><text x="47.7130%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="133" width="0.1057%" height="15" fill="rgb(235,36,10)"/><text x="47.7130%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="117" width="0.1057%" height="15" fill="rgb(251,123,47)"/><text x="47.7130%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="101" width="0.1057%" height="15" fill="rgb(221,13,13)"/><text x="47.7130%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="85" width="0.1057%" height="15" fill="rgb(238,131,9)"/><text x="47.7130%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="69" width="0.1057%" height="15" fill="rgb(211,50,8)"/><text x="47.7130%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="53" width="0.1057%" height="15" fill="rgb(245,182,24)"/><text x="47.7130%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.11%)</title><rect x="47.4630%" y="37" width="0.1057%" height="15" fill="rgb(242,14,37)"/><text x="47.7130%" y="47.50"></text></g><g><title>spacelox_core::value::boxed::Value::kind (59 samples, 3.12%)</title><rect x="47.5687%" y="357" width="3.1184%" height="15" fill="rgb(246,228,12)"/><text x="47.8187%" y="367.50">spa..</text></g><g><title>spacelox_core::value::boxed::Value::is_num (12 samples, 0.63%)</title><rect x="50.0529%" y="341" width="0.6342%" height="15" fill="rgb(213,55,15)"/><text x="50.3029%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::get_property (309 samples, 16.33%)</title><rect x="34.8837%" y="373" width="16.3319%" height="15" fill="rgb(209,9,3)"/><text x="35.1337%" y="383.50">spacelox_vm::vm::VmExecut..</text></g><g><title>spacelox_core::value::boxed::Value::to_instance (10 samples, 0.53%)</title><rect x="50.6871%" y="357" width="0.5285%" height="15" fill="rgb(230,59,30)"/><text x="50.9371%" y="367.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_obj_tag (10 samples, 0.53%)</title><rect x="50.6871%" y="341" width="0.5285%" height="15" fill="rgb(209,121,21)"/><text x="50.9371%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_short (3 samples, 0.16%)</title><rect x="51.2156%" y="373" width="0.1586%" height="15" fill="rgb(220,109,13)"/><text x="51.4656%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (2 samples, 0.11%)</title><rect x="51.2685%" y="357" width="0.1057%" height="15" fill="rgb(232,18,1)"/><text x="51.5185%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 1.06%)</title><rect x="51.4271%" y="341" width="1.0571%" height="15" fill="rgb(215,41,42)"/><text x="51.6771%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (20 samples, 1.06%)</title><rect x="51.4271%" y="325" width="1.0571%" height="15" fill="rgb(224,123,36)"/><text x="51.6771%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (20 samples, 1.06%)</title><rect x="51.4271%" y="309" width="1.0571%" height="15" fill="rgb(240,125,3)"/><text x="51.6771%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_property (334 samples, 17.65%)</title><rect x="34.8837%" y="389" width="17.6533%" height="15" fill="rgb(205,98,50)"/><text x="35.1337%" y="399.50">spacelox_vm::vm::VmExecutor..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (22 samples, 1.16%)</title><rect x="51.3742%" y="373" width="1.1628%" height="15" fill="rgb(205,185,37)"/><text x="51.6242%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_constant (21 samples, 1.11%)</title><rect x="51.4271%" y="357" width="1.1099%" height="15" fill="rgb(238,207,15)"/><text x="51.6771%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (78 samples, 4.12%)</title><rect x="55.1268%" y="293" width="4.1226%" height="15" fill="rgb(213,199,42)"/><text x="55.3768%" y="303.50">hash..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (78 samples, 4.12%)</title><rect x="55.1268%" y="277" width="4.1226%" height="15" fill="rgb(235,201,11)"/><text x="55.3768%" y="287.50">&lt;spa..</text></g><g><title>core::ptr::hash (78 samples, 4.12%)</title><rect x="55.1268%" y="261" width="4.1226%" height="15" fill="rgb(207,46,11)"/><text x="55.3768%" y="271.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (78 samples, 4.12%)</title><rect x="55.1268%" y="245" width="4.1226%" height="15" fill="rgb(241,35,35)"/><text x="55.3768%" y="255.50">core..</text></g><g><title>core::hash::Hasher::write_usize (78 samples, 4.12%)</title><rect x="55.1268%" y="229" width="4.1226%" height="15" fill="rgb(243,32,47)"/><text x="55.3768%" y="239.50">core..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (78 samples, 4.12%)</title><rect x="55.1268%" y="213" width="4.1226%" height="15" fill="rgb(247,202,23)"/><text x="55.3768%" y="223.50">&lt;fnv..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (16 samples, 0.85%)</title><rect x="58.4038%" y="197" width="0.8457%" height="15" fill="rgb(219,102,11)"/><text x="58.6538%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.37%)</title><rect x="60.6237%" y="277" width="0.3700%" height="15" fill="rgb(243,110,44)"/><text x="60.8737%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.37%)</title><rect x="60.6237%" y="261" width="0.3700%" height="15" fill="rgb(222,74,54)"/><text x="60.8737%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::_{{closure}} (4 samples, 0.21%)</title><rect x="61.0465%" y="277" width="0.2114%" height="15" fill="rgb(216,99,12)"/><text x="61.2965%" y="287.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.21%)</title><rect x="61.0465%" y="261" width="0.2114%" height="15" fill="rgb(226,22,26)"/><text x="61.2965%" y="271.50"></text></g><g><title>core::ptr::eq (4 samples, 0.21%)</title><rect x="61.0465%" y="245" width="0.2114%" height="15" fill="rgb(217,163,10)"/><text x="61.2965%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (4 samples, 0.21%)</title><rect x="61.3108%" y="277" width="0.2114%" height="15" fill="rgb(213,25,53)"/><text x="61.5608%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 0.48%)</title><rect x="61.5222%" y="277" width="0.4757%" height="15" fill="rgb(252,105,26)"/><text x="61.7722%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9 samples, 0.48%)</title><rect x="61.5222%" y="261" width="0.4757%" height="15" fill="rgb(220,39,43)"/><text x="61.7722%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.48%)</title><rect x="61.5222%" y="245" width="0.4757%" height="15" fill="rgb(229,68,48)"/><text x="61.7722%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.26%)</title><rect x="61.9979%" y="261" width="0.2643%" height="15" fill="rgb(252,8,32)"/><text x="62.2479%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (14 samples, 0.74%)</title><rect x="61.9979%" y="277" width="0.7400%" height="15" fill="rgb(223,20,43)"/><text x="62.2479%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (9 samples, 0.48%)</title><rect x="62.2622%" y="261" width="0.4757%" height="15" fill="rgb(229,81,49)"/><text x="62.5122%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (9 samples, 0.48%)</title><rect x="62.2622%" y="245" width="0.4757%" height="15" fill="rgb(236,28,36)"/><text x="62.5122%" y="255.50"></text></g><g><title>core::core_arch::simd::i8x16::new (9 samples, 0.48%)</title><rect x="62.2622%" y="229" width="0.4757%" height="15" fill="rgb(249,185,26)"/><text x="62.5122%" y="239.50"></text></g><g><title>spacelox_core::object::Instance::get_field (172 samples, 9.09%)</title><rect x="53.6998%" y="357" width="9.0909%" height="15" fill="rgb(249,174,33)"/><text x="53.9498%" y="367.50">spacelox_core..</text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (157 samples, 8.30%)</title><rect x="54.4926%" y="341" width="8.2981%" height="15" fill="rgb(233,201,37)"/><text x="54.7426%" y="351.50">spacelox_cor..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (145 samples, 7.66%)</title><rect x="55.1268%" y="325" width="7.6638%" height="15" fill="rgb(221,78,26)"/><text x="55.3768%" y="335.50">hashbrown:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (145 samples, 7.66%)</title><rect x="55.1268%" y="309" width="7.6638%" height="15" fill="rgb(250,127,30)"/><text x="55.3768%" y="319.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (67 samples, 3.54%)</title><rect x="59.2495%" y="293" width="3.5412%" height="15" fill="rgb(230,49,44)"/><text x="59.4995%" y="303.50">hash..</text></g><g><title>spacelox_core::value::boxed::Value::is_instance (13 samples, 0.69%)</title><rect x="62.7907%" y="357" width="0.6871%" height="15" fill="rgb(229,67,23)"/><text x="63.0407%" y="367.50"></text></g><g><title>spacelox_core::value::boxed::Value::is_obj_tag (13 samples, 0.69%)</title><rect x="62.7907%" y="341" width="0.6871%" height="15" fill="rgb(249,83,47)"/><text x="63.0407%" y="351.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_instance (9 samples, 0.48%)</title><rect x="63.4778%" y="357" width="0.4757%" height="15" fill="rgb(215,43,3)"/><text x="63.7278%" y="367.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_obj_tag (9 samples, 0.48%)</title><rect x="63.4778%" y="341" width="0.4757%" height="15" fill="rgb(238,154,13)"/><text x="63.7278%" y="351.50"></text></g><g><title>spacelox_core::value::boxed::Value::kind (21 samples, 1.11%)</title><rect x="64.4820%" y="341" width="1.1099%" height="15" fill="rgb(219,56,2)"/><text x="64.7320%" y="351.50"></text></g><g><title>spacelox_core::value::boxed::Value::value_class (36 samples, 1.90%)</title><rect x="63.9535%" y="357" width="1.9027%" height="15" fill="rgb(233,0,4)"/><text x="64.2035%" y="367.50">s..</text></g><g><title>spacelox_core::value::boxed::Value::to_instance (5 samples, 0.26%)</title><rect x="65.5920%" y="341" width="0.2643%" height="15" fill="rgb(235,30,7)"/><text x="65.8420%" y="351.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_obj_tag (5 samples, 0.26%)</title><rect x="65.5920%" y="325" width="0.2643%" height="15" fill="rgb(250,79,13)"/><text x="65.8420%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (8 samples, 0.42%)</title><rect x="69.2918%" y="341" width="0.4228%" height="15" fill="rgb(211,146,34)"/><text x="69.5418%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (8 samples, 0.42%)</title><rect x="69.2918%" y="325" width="0.4228%" height="15" fill="rgb(228,22,38)"/><text x="69.5418%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.42%)</title><rect x="69.2918%" y="309" width="0.4228%" height="15" fill="rgb(235,168,5)"/><text x="69.5418%" y="319.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.42%)</title><rect x="69.7146%" y="341" width="0.4228%" height="15" fill="rgb(221,155,16)"/><text x="69.9646%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (90 samples, 4.76%)</title><rect x="65.8562%" y="357" width="4.7569%" height="15" fill="rgb(215,215,53)"/><text x="66.1062%" y="367.50">spacel..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::check_arity (9 samples, 0.48%)</title><rect x="70.1374%" y="341" width="0.4757%" height="15" fill="rgb(223,4,10)"/><text x="70.3874%" y="351.50"></text></g><g><title>spacelox_core::arity::ArityKind::check (9 samples, 0.48%)</title><rect x="70.1374%" y="325" width="0.4757%" height="15" fill="rgb(234,103,6)"/><text x="70.3874%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (70 samples, 3.70%)</title><rect x="72.4101%" y="277" width="3.6998%" height="15" fill="rgb(227,97,0)"/><text x="72.6601%" y="287.50">hash..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (70 samples, 3.70%)</title><rect x="72.4101%" y="261" width="3.6998%" height="15" fill="rgb(234,150,53)"/><text x="72.6601%" y="271.50">&lt;spa..</text></g><g><title>core::ptr::hash (70 samples, 3.70%)</title><rect x="72.4101%" y="245" width="3.6998%" height="15" fill="rgb(228,201,54)"/><text x="72.6601%" y="255.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (70 samples, 3.70%)</title><rect x="72.4101%" y="229" width="3.6998%" height="15" fill="rgb(222,22,37)"/><text x="72.6601%" y="239.50">core..</text></g><g><title>core::hash::Hasher::write_usize (70 samples, 3.70%)</title><rect x="72.4101%" y="213" width="3.6998%" height="15" fill="rgb(237,53,32)"/><text x="72.6601%" y="223.50">core..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (70 samples, 3.70%)</title><rect x="72.4101%" y="197" width="3.6998%" height="15" fill="rgb(233,25,53)"/><text x="72.6601%" y="207.50">&lt;fnv..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (39 samples, 2.06%)</title><rect x="74.0486%" y="181" width="2.0613%" height="15" fill="rgb(210,40,34)"/><text x="74.2986%" y="191.50">c..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.37%)</title><rect x="77.6956%" y="261" width="0.3700%" height="15" fill="rgb(241,220,44)"/><text x="77.9456%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.48%)</title><rect x="78.0655%" y="261" width="0.4757%" height="15" fill="rgb(235,28,35)"/><text x="78.3155%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (9 samples, 0.48%)</title><rect x="78.0655%" y="245" width="0.4757%" height="15" fill="rgb(210,56,17)"/><text x="78.3155%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (9 samples, 0.48%)</title><rect x="78.0655%" y="229" width="0.4757%" height="15" fill="rgb(224,130,29)"/><text x="78.3155%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (9 samples, 0.48%)</title><rect x="78.0655%" y="213" width="0.4757%" height="15" fill="rgb(235,212,8)"/><text x="78.3155%" y="223.50"></text></g><g><title>core::num::&lt;impl u16&gt;::trailing_zeros (6 samples, 0.32%)</title><rect x="78.2241%" y="197" width="0.3171%" height="15" fill="rgb(223,33,50)"/><text x="78.4741%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (4 samples, 0.21%)</title><rect x="78.5412%" y="261" width="0.2114%" height="15" fill="rgb(219,149,13)"/><text x="78.7912%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4 samples, 0.21%)</title><rect x="78.5412%" y="245" width="0.2114%" height="15" fill="rgb(250,156,29)"/><text x="78.7912%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.21%)</title><rect x="78.5412%" y="229" width="0.2114%" height="15" fill="rgb(216,193,19)"/><text x="78.7912%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.21%)</title><rect x="78.5412%" y="213" width="0.2114%" height="15" fill="rgb(216,135,14)"/><text x="78.7912%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.16%)</title><rect x="78.7526%" y="261" width="0.1586%" height="15" fill="rgb(241,47,5)"/><text x="79.0026%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.16%)</title><rect x="78.9112%" y="261" width="0.1586%" height="15" fill="rgb(233,42,35)"/><text x="79.1612%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.16%)</title><rect x="78.9112%" y="245" width="0.1586%" height="15" fill="rgb(231,13,6)"/><text x="79.1612%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.16%)</title><rect x="78.9112%" y="229" width="0.1586%" height="15" fill="rgb(207,181,40)"/><text x="79.1612%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.79%)</title><rect x="79.0698%" y="245" width="0.7928%" height="15" fill="rgb(254,173,49)"/><text x="79.3198%" y="255.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke_from_class (187 samples, 9.88%)</title><rect x="70.6131%" y="357" width="9.8837%" height="15" fill="rgb(221,1,38)"/><text x="70.8631%" y="367.50">spacelox_vm::v..</text></g><g><title>spacelox_core::object::Class::get_method (157 samples, 8.30%)</title><rect x="72.1987%" y="341" width="8.2981%" height="15" fill="rgb(206,124,46)"/><text x="72.4487%" y="351.50">spacelox_cor..</text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (153 samples, 8.09%)</title><rect x="72.4101%" y="325" width="8.0867%" height="15" fill="rgb(249,21,11)"/><text x="72.6601%" y="335.50">spacelox_co..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (153 samples, 8.09%)</title><rect x="72.4101%" y="309" width="8.0867%" height="15" fill="rgb(222,201,40)"/><text x="72.6601%" y="319.50">hashbrown::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (153 samples, 8.09%)</title><rect x="72.4101%" y="293" width="8.0867%" height="15" fill="rgb(235,61,29)"/><text x="72.6601%" y="303.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (83 samples, 4.39%)</title><rect x="76.1099%" y="277" width="4.3869%" height="15" fill="rgb(219,207,3)"/><text x="76.3599%" y="287.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (27 samples, 1.43%)</title><rect x="79.0698%" y="261" width="1.4271%" height="15" fill="rgb(222,56,46)"/><text x="79.3198%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (12 samples, 0.63%)</title><rect x="79.8626%" y="245" width="0.6342%" height="15" fill="rgb(239,76,54)"/><text x="80.1126%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (12 samples, 0.63%)</title><rect x="79.8626%" y="229" width="0.6342%" height="15" fill="rgb(231,124,27)"/><text x="80.1126%" y="239.50"></text></g><g><title>core::core_arch::simd::i8x16::new (12 samples, 0.63%)</title><rect x="79.8626%" y="213" width="0.6342%" height="15" fill="rgb(249,195,6)"/><text x="80.1126%" y="223.50"></text></g><g><title>spacelox_core::value::boxed::Value::kind (31 samples, 1.64%)</title><rect x="81.0254%" y="341" width="1.6385%" height="15" fill="rgb(237,174,47)"/><text x="81.2754%" y="351.50"></text></g><g><title>spacelox_core::value::boxed::Value::is_num (7 samples, 0.37%)</title><rect x="82.2939%" y="325" width="0.3700%" height="15" fill="rgb(206,201,31)"/><text x="82.5439%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke (574 samples, 30.34%)</title><rect x="52.5370%" y="373" width="30.3383%" height="15" fill="rgb(231,57,52)"/><text x="52.7870%" y="383.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::resolve_call (45 samples, 2.38%)</title><rect x="80.4968%" y="357" width="2.3784%" height="15" fill="rgb(248,177,22)"/><text x="80.7468%" y="367.50">sp..</text></g><g><title>spacelox_core::value::boxed::Value::to_closure (4 samples, 0.21%)</title><rect x="82.6638%" y="341" width="0.2114%" height="15" fill="rgb(215,211,37)"/><text x="82.9138%" y="351.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_obj_tag (4 samples, 0.21%)</title><rect x="82.6638%" y="325" width="0.2114%" height="15" fill="rgb(241,128,51)"/><text x="82.9138%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::peek (15 samples, 0.79%)</title><rect x="82.8753%" y="373" width="0.7928%" height="15" fill="rgb(227,165,31)"/><text x="83.1253%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (14 samples, 0.74%)</title><rect x="83.6681%" y="373" width="0.7400%" height="15" fill="rgb(228,167,24)"/><text x="83.9181%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (14 samples, 0.74%)</title><rect x="83.6681%" y="357" width="0.7400%" height="15" fill="rgb(228,143,12)"/><text x="83.9181%" y="367.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3 samples, 0.16%)</title><rect x="84.4080%" y="357" width="0.1586%" height="15" fill="rgb(249,149,8)"/><text x="84.6580%" y="367.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: _]&gt;::try_from (3 samples, 0.16%)</title><rect x="84.4080%" y="341" width="0.1586%" height="15" fill="rgb(243,35,44)"/><text x="84.6580%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3 samples, 0.16%)</title><rect x="84.4080%" y="325" width="0.1586%" height="15" fill="rgb(246,89,9)"/><text x="84.6580%" y="335.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: _]&gt;::try_from::_{{closure}} (3 samples, 0.16%)</title><rect x="84.4080%" y="309" width="0.1586%" height="15" fill="rgb(233,213,13)"/><text x="84.6580%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_short (13 samples, 0.69%)</title><rect x="84.4080%" y="373" width="0.6871%" height="15" fill="rgb(233,141,41)"/><text x="84.6580%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (10 samples, 0.53%)</title><rect x="84.5666%" y="357" width="0.5285%" height="15" fill="rgb(239,167,4)"/><text x="84.8166%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (10 samples, 0.53%)</title><rect x="84.5666%" y="341" width="0.5285%" height="15" fill="rgb(209,217,16)"/><text x="84.8166%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_invoke (625 samples, 33.03%)</title><rect x="52.5370%" y="389" width="33.0338%" height="15" fill="rgb(219,88,35)"/><text x="52.7870%" y="399.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::op_invoke</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (9 samples, 0.48%)</title><rect x="85.0951%" y="373" width="0.4757%" height="15" fill="rgb(220,193,23)"/><text x="85.3451%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_constant (9 samples, 0.48%)</title><rect x="85.0951%" y="357" width="0.4757%" height="15" fill="rgb(230,90,52)"/><text x="85.3451%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.48%)</title><rect x="85.0951%" y="341" width="0.4757%" height="15" fill="rgb(252,106,19)"/><text x="85.3451%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (9 samples, 0.48%)</title><rect x="85.0951%" y="325" width="0.4757%" height="15" fill="rgb(206,74,20)"/><text x="85.3451%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (9 samples, 0.48%)</title><rect x="85.0951%" y="309" width="0.4757%" height="15" fill="rgb(230,138,44)"/><text x="85.3451%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_less (2 samples, 0.11%)</title><rect x="85.5708%" y="389" width="0.1057%" height="15" fill="rgb(235,182,43)"/><text x="85.8208%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.26%)</title><rect x="88.5307%" y="357" width="0.2643%" height="15" fill="rgb(242,16,51)"/><text x="88.7807%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (14 samples, 0.74%)</title><rect x="88.5307%" y="373" width="0.7400%" height="15" fill="rgb(248,9,4)"/><text x="88.7807%" y="383.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.48%)</title><rect x="88.7949%" y="357" width="0.4757%" height="15" fill="rgb(210,31,22)"/><text x="89.0449%" y="367.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.48%)</title><rect x="88.7949%" y="341" width="0.4757%" height="15" fill="rgb(239,54,39)"/><text x="89.0449%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (7 samples, 0.37%)</title><rect x="89.3235%" y="373" width="0.3700%" height="15" fill="rgb(230,99,41)"/><text x="89.5735%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_return (90 samples, 4.76%)</title><rect x="85.7294%" y="389" width="4.7569%" height="15" fill="rgb(253,106,12)"/><text x="85.9794%" y="399.50">spacel..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::pop (15 samples, 0.79%)</title><rect x="89.6934%" y="373" width="0.7928%" height="15" fill="rgb(213,46,41)"/><text x="89.9434%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::get_val (8 samples, 0.42%)</title><rect x="90.0634%" y="357" width="0.4228%" height="15" fill="rgb(215,133,35)"/><text x="90.3134%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.21%)</title><rect x="90.5391%" y="357" width="0.2114%" height="15" fill="rgb(213,28,5)"/><text x="90.7891%" y="367.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (4 samples, 0.21%)</title><rect x="90.5391%" y="341" width="0.2114%" height="15" fill="rgb(215,77,49)"/><text x="90.7891%" y="351.50"></text></g><g><title>core::ptr::hash (4 samples, 0.21%)</title><rect x="90.5391%" y="325" width="0.2114%" height="15" fill="rgb(248,100,22)"/><text x="90.7891%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (4 samples, 0.21%)</title><rect x="90.5391%" y="309" width="0.2114%" height="15" fill="rgb(208,67,9)"/><text x="90.7891%" y="319.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.21%)</title><rect x="90.5391%" y="293" width="0.2114%" height="15" fill="rgb(219,133,21)"/><text x="90.7891%" y="303.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (4 samples, 0.21%)</title><rect x="90.5391%" y="277" width="0.2114%" height="15" fill="rgb(246,46,29)"/><text x="90.7891%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (4 samples, 0.21%)</title><rect x="90.5391%" y="261" width="0.2114%" height="15" fill="rgb(246,185,52)"/><text x="90.7891%" y="271.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_set_global (8 samples, 0.42%)</title><rect x="90.4863%" y="389" width="0.4228%" height="15" fill="rgb(252,136,11)"/><text x="90.7363%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (8 samples, 0.42%)</title><rect x="90.4863%" y="373" width="0.4228%" height="15" fill="rgb(219,138,53)"/><text x="90.7363%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (3 samples, 0.16%)</title><rect x="90.7505%" y="357" width="0.1586%" height="15" fill="rgb(211,51,23)"/><text x="91.0005%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.16%)</title><rect x="90.7505%" y="341" width="0.1586%" height="15" fill="rgb(247,221,28)"/><text x="91.0005%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.11%)</title><rect x="90.8034%" y="325" width="0.1057%" height="15" fill="rgb(251,222,45)"/><text x="91.0534%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.11%)</title><rect x="90.8034%" y="309" width="0.1057%" height="15" fill="rgb(217,162,53)"/><text x="91.0534%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (2 samples, 0.11%)</title><rect x="90.8034%" y="293" width="0.1057%" height="15" fill="rgb(229,93,14)"/><text x="91.0534%" y="303.50"></text></g><g><title>all (1,892 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(209,67,49)"/><text x="0.2500%" y="591.50"></text></g><g><title>spacelox (1,888 samples, 99.79%)</title><rect x="0.2114%" y="565" width="99.7886%" height="15" fill="rgb(213,87,29)"/><text x="0.4614%" y="575.50">spacelox</text></g><g><title>_start (1,617 samples, 85.47%)</title><rect x="14.5349%" y="549" width="85.4651%" height="15" fill="rgb(205,151,52)"/><text x="14.7849%" y="559.50">_start</text></g><g><title>__libc_start_main (1,617 samples, 85.47%)</title><rect x="14.5349%" y="533" width="85.4651%" height="15" fill="rgb(253,215,39)"/><text x="14.7849%" y="543.50">__libc_start_main</text></g><g><title>main (1,617 samples, 85.47%)</title><rect x="14.5349%" y="517" width="85.4651%" height="15" fill="rgb(221,220,41)"/><text x="14.7849%" y="527.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,617 samples, 85.47%)</title><rect x="14.5349%" y="501" width="85.4651%" height="15" fill="rgb(218,133,21)"/><text x="14.7849%" y="511.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::rt::lang_start_internal::_{{closure}}::_{{closure}} (1,617 samples, 85.47%)</title><rect x="14.5349%" y="485" width="85.4651%" height="15" fill="rgb(221,193,43)"/><text x="14.7849%" y="495.50">std::rt::lang_start_internal::_{{closure}}::_{{closure}}</text></g><g><title>std::rt::lang_start::_{{closure}} (1,617 samples, 85.47%)</title><rect x="14.5349%" y="469" width="85.4651%" height="15" fill="rgb(240,128,52)"/><text x="14.7849%" y="479.50">std::rt::lang_start::_{{closure}}</text></g><g><title>spacelox::main (1,617 samples, 85.47%)</title><rect x="14.5349%" y="453" width="85.4651%" height="15" fill="rgb(253,114,12)"/><text x="14.7849%" y="463.50">spacelox::main</text></g><g><title>spacelox_vm::vm::Vm&lt;I&gt;::run (1,617 samples, 85.47%)</title><rect x="14.5349%" y="437" width="85.4651%" height="15" fill="rgb(215,223,47)"/><text x="14.7849%" y="447.50">spacelox_vm::vm::Vm&lt;I&gt;::run</text></g><g><title>spacelox_vm::vm::Vm&lt;I&gt;::interpret (1,617 samples, 85.47%)</title><rect x="14.5349%" y="421" width="85.4651%" height="15" fill="rgb(248,225,23)"/><text x="14.7849%" y="431.50">spacelox_vm::vm::Vm&lt;I&gt;::interpret</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::run (1,616 samples, 85.41%)</title><rect x="14.5877%" y="405" width="85.4123%" height="15" fill="rgb(250,108,0)"/><text x="14.8377%" y="415.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::run</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (172 samples, 9.09%)</title><rect x="90.9091%" y="389" width="9.0909%" height="15" fill="rgb(228,208,7)"/><text x="91.1591%" y="399.50">spacelox_vm::..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (123 samples, 6.50%)</title><rect x="93.4989%" y="373" width="6.5011%" height="15" fill="rgb(244,45,10)"/><text x="93.7489%" y="383.50">spacelox_..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (12 samples, 0.63%)</title><rect x="99.3658%" y="357" width="0.6342%" height="15" fill="rgb(207,125,25)"/><text x="99.6158%" y="367.50"></text></g></svg></svg>