<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180"><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (126 samples, 0.72%)</title><rect x="0.0230%" y="389" width="0.7233%" height="15" fill="rgb(227,0,7)"/><text x="0.2730%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (225 samples, 1.29%)</title><rect x="0.7463%" y="389" width="1.2916%" height="15" fill="rgb(217,0,24)"/><text x="0.9963%" y="399.50"></text></g><g><title>[[heap]] (467 samples, 2.68%)</title><rect x="0.0230%" y="405" width="2.6808%" height="15" fill="rgb(221,193,54)"/><text x="0.2730%" y="415.50">[[..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::resolve_call (115 samples, 0.66%)</title><rect x="2.0436%" y="389" width="0.6602%" height="15" fill="rgb(248,212,6)"/><text x="2.2936%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (214 samples, 1.23%)</title><rect x="2.7038%" y="389" width="1.2285%" height="15" fill="rgb(208,68,35)"/><text x="2.9538%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::get_property (180 samples, 1.03%)</title><rect x="3.9323%" y="389" width="1.0333%" height="15" fill="rgb(232,128,0)"/><text x="4.1823%" y="399.50"></text></g><g><title>[[stack]] (539 samples, 3.09%)</title><rect x="2.7038%" y="405" width="3.0941%" height="15" fill="rgb(207,160,47)"/><text x="2.9538%" y="415.50">[[s..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::resolve_call (145 samples, 0.83%)</title><rect x="4.9656%" y="389" width="0.8324%" height="15" fill="rgb(228,23,34)"/><text x="5.2156%" y="399.50"></text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (316 samples, 1.81%)</title><rect x="5.8266%" y="389" width="1.8140%" height="15" fill="rgb(218,30,26)"/><text x="6.0766%" y="399.50">s..</text></g><g><title>spacelox_core::object::SlHashMap&lt;K,V&gt;::insert (24 samples, 0.14%)</title><rect x="7.6406%" y="389" width="0.1378%" height="15" fill="rgb(220,122,19)"/><text x="7.8906%" y="399.50"></text></g><g><title>spacelox_core::value::boxed::Value::value_class (42 samples, 0.24%)</title><rect x="7.7784%" y="389" width="0.2411%" height="15" fill="rgb(250,228,42)"/><text x="8.0284%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (76 samples, 0.44%)</title><rect x="8.0195%" y="389" width="0.4363%" height="15" fill="rgb(240,193,28)"/><text x="8.2695%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (296 samples, 1.70%)</title><rect x="8.4558%" y="389" width="1.6992%" height="15" fill="rgb(216,20,37)"/><text x="8.7058%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::get_property (347 samples, 1.99%)</title><rect x="10.1550%" y="389" width="1.9920%" height="15" fill="rgb(206,188,39)"/><text x="10.4050%" y="399.50">s..</text></g><g><title>spacelox_core::object::Instance::get_field (70 samples, 0.40%)</title><rect x="11.7451%" y="373" width="0.4018%" height="15" fill="rgb(217,207,13)"/><text x="11.9951%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke_from_class (396 samples, 2.27%)</title><rect x="12.1470%" y="389" width="2.2732%" height="15" fill="rgb(231,73,38)"/><text x="12.3970%" y="399.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::resolve_call (280 samples, 1.61%)</title><rect x="14.4202%" y="389" width="1.6073%" height="15" fill="rgb(225,20,46)"/><text x="14.6702%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_property (170 samples, 0.98%)</title><rect x="16.0276%" y="373" width="0.9759%" height="15" fill="rgb(210,31,41)"/><text x="16.2776%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_invoke (60 samples, 0.34%)</title><rect x="17.0034%" y="373" width="0.3444%" height="15" fill="rgb(221,200,47)"/><text x="17.2534%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke (60 samples, 0.34%)</title><rect x="17.0034%" y="357" width="0.3444%" height="15" fill="rgb(226,26,5)"/><text x="17.2534%" y="367.50"></text></g><g><title>[unknown] (2,118 samples, 12.16%)</title><rect x="5.7979%" y="405" width="12.1584%" height="15" fill="rgb(249,33,26)"/><text x="6.0479%" y="415.50">[unknown]</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::run (336 samples, 1.93%)</title><rect x="16.0276%" y="389" width="1.9288%" height="15" fill="rgb(235,183,28)"/><text x="16.2776%" y="399.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_return (106 samples, 0.61%)</title><rect x="17.3479%" y="373" width="0.6085%" height="15" fill="rgb(221,5,38)"/><text x="17.5979%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_add (18 samples, 0.10%)</title><rect x="20.8037%" y="245" width="0.1033%" height="15" fill="rgb(247,18,42)"/><text x="21.0537%" y="255.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (22 samples, 0.13%)</title><rect x="20.9070%" y="229" width="0.1263%" height="15" fill="rgb(241,131,45)"/><text x="21.1570%" y="239.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_constant (36 samples, 0.21%)</title><rect x="20.9070%" y="245" width="0.2067%" height="15" fill="rgb(249,31,29)"/><text x="21.1570%" y="255.50"></text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (51 samples, 0.29%)</title><rect x="21.1194%" y="229" width="0.2928%" height="15" fill="rgb(225,111,53)"/><text x="21.3694%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (605 samples, 3.47%)</title><rect x="21.4122%" y="165" width="3.4730%" height="15" fill="rgb(238,160,17)"/><text x="21.6622%" y="175.50">has..</text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (605 samples, 3.47%)</title><rect x="21.4122%" y="149" width="3.4730%" height="15" fill="rgb(214,148,48)"/><text x="21.6622%" y="159.50">&lt;sp..</text></g><g><title>core::ptr::hash (605 samples, 3.47%)</title><rect x="21.4122%" y="133" width="3.4730%" height="15" fill="rgb(232,36,49)"/><text x="21.6622%" y="143.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (605 samples, 3.47%)</title><rect x="21.4122%" y="117" width="3.4730%" height="15" fill="rgb(209,103,24)"/><text x="21.6622%" y="127.50">cor..</text></g><g><title>core::hash::Hasher::write_usize (605 samples, 3.47%)</title><rect x="21.4122%" y="101" width="3.4730%" height="15" fill="rgb(229,88,8)"/><text x="21.6622%" y="111.50">cor..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (605 samples, 3.47%)</title><rect x="21.4122%" y="85" width="3.4730%" height="15" fill="rgb(213,181,19)"/><text x="21.6622%" y="95.50">&lt;fn..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (392 samples, 2.25%)</title><rect x="22.6349%" y="69" width="2.2503%" height="15" fill="rgb(254,191,54)"/><text x="22.8849%" y="79.50">c..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 0.59%)</title><rect x="25.6372%" y="149" width="0.5913%" height="15" fill="rgb(241,83,37)"/><text x="25.8872%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (157 samples, 0.90%)</title><rect x="26.2285%" y="133" width="0.9013%" height="15" fill="rgb(233,36,39)"/><text x="26.4785%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (155 samples, 0.89%)</title><rect x="26.2400%" y="117" width="0.8898%" height="15" fill="rgb(226,3,54)"/><text x="26.4900%" y="127.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (155 samples, 0.89%)</title><rect x="26.2400%" y="101" width="0.8898%" height="15" fill="rgb(245,192,40)"/><text x="26.4900%" y="111.50"></text></g><g><title>core::num::&lt;impl u16&gt;::trailing_zeros (153 samples, 0.88%)</title><rect x="26.2514%" y="85" width="0.8783%" height="15" fill="rgb(238,167,29)"/><text x="26.5014%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (171 samples, 0.98%)</title><rect x="26.2285%" y="149" width="0.9816%" height="15" fill="rgb(232,182,51)"/><text x="26.4785%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::_{{closure}} (166 samples, 0.95%)</title><rect x="27.2158%" y="149" width="0.9529%" height="15" fill="rgb(231,60,39)"/><text x="27.4658%" y="159.50"></text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::cmp::PartialEq&gt;::eq (120 samples, 0.69%)</title><rect x="27.4799%" y="133" width="0.6889%" height="15" fill="rgb(208,69,12)"/><text x="27.7299%" y="143.50"></text></g><g><title>core::ptr::eq (120 samples, 0.69%)</title><rect x="27.4799%" y="117" width="0.6889%" height="15" fill="rgb(235,93,37)"/><text x="27.7299%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (68 samples, 0.39%)</title><rect x="28.2721%" y="149" width="0.3904%" height="15" fill="rgb(213,116,39)"/><text x="28.5221%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (68 samples, 0.39%)</title><rect x="28.2721%" y="133" width="0.3904%" height="15" fill="rgb(222,207,29)"/><text x="28.5221%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (68 samples, 0.39%)</title><rect x="28.2721%" y="117" width="0.3904%" height="15" fill="rgb(206,96,30)"/><text x="28.5221%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (226 samples, 1.30%)</title><rect x="28.6625%" y="133" width="1.2974%" height="15" fill="rgb(218,138,4)"/><text x="28.9125%" y="143.50"></text></g><g><title>spacelox_core::module::Module::get_symbol (1,705 samples, 9.79%)</title><rect x="21.4122%" y="229" width="9.7876%" height="15" fill="rgb(250,191,14)"/><text x="21.6622%" y="239.50">spacelox_core:..</text></g><g><title>spacelox_core::object::SlHashMap&lt;K,V&gt;::get (1,705 samples, 9.79%)</title><rect x="21.4122%" y="213" width="9.7876%" height="15" fill="rgb(239,60,40)"/><text x="21.6622%" y="223.50">spacelox_core:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1,705 samples, 9.79%)</title><rect x="21.4122%" y="197" width="9.7876%" height="15" fill="rgb(206,27,48)"/><text x="21.6622%" y="207.50">hashbrown::map..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1,705 samples, 9.79%)</title><rect x="21.4122%" y="181" width="9.7876%" height="15" fill="rgb(225,35,8)"/><text x="21.6622%" y="191.50">hashbrown::map..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (1,100 samples, 6.31%)</title><rect x="24.8852%" y="165" width="6.3146%" height="15" fill="rgb(250,213,24)"/><text x="25.1352%" y="175.50">hashbrow..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (442 samples, 2.54%)</title><rect x="28.6625%" y="149" width="2.5373%" height="15" fill="rgb(247,123,22)"/><text x="28.9125%" y="159.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (216 samples, 1.24%)</title><rect x="29.9598%" y="133" width="1.2400%" height="15" fill="rgb(231,138,38)"/><text x="30.2098%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (216 samples, 1.24%)</title><rect x="29.9598%" y="117" width="1.2400%" height="15" fill="rgb(231,145,46)"/><text x="30.2098%" y="127.50"></text></g><g><title>core::core_arch::simd::i8x16::new (216 samples, 1.24%)</title><rect x="29.9598%" y="101" width="1.2400%" height="15" fill="rgb(251,118,11)"/><text x="30.2098%" y="111.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (75 samples, 0.43%)</title><rect x="31.2285%" y="213" width="0.4305%" height="15" fill="rgb(217,147,25)"/><text x="31.4785%" y="223.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (75 samples, 0.43%)</title><rect x="31.2285%" y="197" width="0.4305%" height="15" fill="rgb(247,81,37)"/><text x="31.4785%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (75 samples, 0.43%)</title><rect x="31.2285%" y="181" width="0.4305%" height="15" fill="rgb(209,12,38)"/><text x="31.4785%" y="191.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::_{{closure}} (75 samples, 0.43%)</title><rect x="31.2285%" y="165" width="0.4305%" height="15" fill="rgb(227,1,9)"/><text x="31.4785%" y="175.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_short (77 samples, 0.44%)</title><rect x="31.2285%" y="229" width="0.4420%" height="15" fill="rgb(248,47,43)"/><text x="31.4785%" y="239.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_str (69 samples, 0.40%)</title><rect x="31.6705%" y="213" width="0.3961%" height="15" fill="rgb(221,10,30)"/><text x="31.9205%" y="223.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_obj_tag (69 samples, 0.40%)</title><rect x="31.6705%" y="197" width="0.3961%" height="15" fill="rgb(210,229,1)"/><text x="31.9205%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_global (1,912 samples, 10.98%)</title><rect x="21.1137%" y="245" width="10.9759%" height="15" fill="rgb(222,148,37)"/><text x="21.3637%" y="255.50">spacelox_vm::vm:..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (73 samples, 0.42%)</title><rect x="31.6705%" y="229" width="0.4191%" height="15" fill="rgb(234,67,33)"/><text x="31.9205%" y="239.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (154 samples, 0.88%)</title><rect x="32.2331%" y="229" width="0.8840%" height="15" fill="rgb(247,98,35)"/><text x="32.4831%" y="239.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_local (181 samples, 1.04%)</title><rect x="32.0896%" y="245" width="1.0390%" height="15" fill="rgb(247,138,52)"/><text x="32.3396%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (705 samples, 4.05%)</title><rect x="36.5442%" y="149" width="4.0471%" height="15" fill="rgb(213,79,30)"/><text x="36.7942%" y="159.50">hash..</text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (705 samples, 4.05%)</title><rect x="36.5442%" y="133" width="4.0471%" height="15" fill="rgb(246,177,23)"/><text x="36.7942%" y="143.50">&lt;spa..</text></g><g><title>core::ptr::hash (705 samples, 4.05%)</title><rect x="36.5442%" y="117" width="4.0471%" height="15" fill="rgb(230,62,27)"/><text x="36.7942%" y="127.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (705 samples, 4.05%)</title><rect x="36.5442%" y="101" width="4.0471%" height="15" fill="rgb(216,154,8)"/><text x="36.7942%" y="111.50">core..</text></g><g><title>core::hash::Hasher::write_usize (705 samples, 4.05%)</title><rect x="36.5442%" y="85" width="4.0471%" height="15" fill="rgb(244,35,45)"/><text x="36.7942%" y="95.50">core..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (671 samples, 3.85%)</title><rect x="36.7394%" y="69" width="3.8519%" height="15" fill="rgb(251,115,12)"/><text x="36.9894%" y="79.50">&lt;fnv..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (480 samples, 2.76%)</title><rect x="37.8358%" y="53" width="2.7555%" height="15" fill="rgb(240,54,50)"/><text x="38.0858%" y="63.50">co..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (180 samples, 1.03%)</title><rect x="41.5901%" y="133" width="1.0333%" height="15" fill="rgb(233,84,52)"/><text x="41.8401%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (141 samples, 0.81%)</title><rect x="42.6234%" y="117" width="0.8094%" height="15" fill="rgb(207,117,47)"/><text x="42.8734%" y="127.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (139 samples, 0.80%)</title><rect x="42.6349%" y="101" width="0.7979%" height="15" fill="rgb(249,43,39)"/><text x="42.8849%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (139 samples, 0.80%)</title><rect x="42.6349%" y="85" width="0.7979%" height="15" fill="rgb(209,38,44)"/><text x="42.8849%" y="95.50"></text></g><g><title>core::num::&lt;impl u16&gt;::trailing_zeros (139 samples, 0.80%)</title><rect x="42.6349%" y="69" width="0.7979%" height="15" fill="rgb(236,212,23)"/><text x="42.8849%" y="79.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 0.84%)</title><rect x="42.6234%" y="133" width="0.8381%" height="15" fill="rgb(242,79,21)"/><text x="42.8734%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::_{{closure}} (144 samples, 0.83%)</title><rect x="43.4673%" y="133" width="0.8266%" height="15" fill="rgb(211,96,35)"/><text x="43.7173%" y="143.50"></text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::cmp::PartialEq&gt;::eq (100 samples, 0.57%)</title><rect x="43.7199%" y="117" width="0.5741%" height="15" fill="rgb(253,215,40)"/><text x="43.9699%" y="127.50"></text></g><g><title>core::ptr::eq (100 samples, 0.57%)</title><rect x="43.7199%" y="101" width="0.5741%" height="15" fill="rgb(211,81,21)"/><text x="43.9699%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (36 samples, 0.21%)</title><rect x="44.4489%" y="133" width="0.2067%" height="15" fill="rgb(208,190,38)"/><text x="44.6989%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (36 samples, 0.21%)</title><rect x="44.4489%" y="117" width="0.2067%" height="15" fill="rgb(235,213,38)"/><text x="44.6989%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36 samples, 0.21%)</title><rect x="44.4489%" y="101" width="0.2067%" height="15" fill="rgb(237,122,38)"/><text x="44.6989%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (187 samples, 1.07%)</title><rect x="44.6556%" y="117" width="1.0735%" height="15" fill="rgb(244,218,35)"/><text x="44.9056%" y="127.50"></text></g><g><title>spacelox_core::object::Instance::get_field (1,885 samples, 10.82%)</title><rect x="36.1424%" y="213" width="10.8209%" height="15" fill="rgb(240,68,47)"/><text x="36.3924%" y="223.50">spacelox_core::o..</text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (1,851 samples, 10.63%)</title><rect x="36.3375%" y="197" width="10.6257%" height="15" fill="rgb(210,16,53)"/><text x="36.5875%" y="207.50">spacelox_core::d..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1,815 samples, 10.42%)</title><rect x="36.5442%" y="181" width="10.4191%" height="15" fill="rgb(235,124,12)"/><text x="36.7942%" y="191.50">hashbrown::map:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1,815 samples, 10.42%)</title><rect x="36.5442%" y="165" width="10.4191%" height="15" fill="rgb(224,169,11)"/><text x="36.7942%" y="175.50">hashbrown::map:..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (1,110 samples, 6.37%)</title><rect x="40.5913%" y="149" width="6.3720%" height="15" fill="rgb(250,166,2)"/><text x="40.8413%" y="159.50">hashbrow..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (402 samples, 2.31%)</title><rect x="44.6556%" y="133" width="2.3077%" height="15" fill="rgb(242,216,29)"/><text x="44.9056%" y="143.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (215 samples, 1.23%)</title><rect x="45.7290%" y="117" width="1.2342%" height="15" fill="rgb(230,116,27)"/><text x="45.9790%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (215 samples, 1.23%)</title><rect x="45.7290%" y="101" width="1.2342%" height="15" fill="rgb(228,99,48)"/><text x="45.9790%" y="111.50"></text></g><g><title>core::core_arch::simd::i8x16::new (215 samples, 1.23%)</title><rect x="45.7290%" y="85" width="1.2342%" height="15" fill="rgb(253,11,6)"/><text x="45.9790%" y="95.50"></text></g><g><title>spacelox_core::value::boxed::Value::kind (503 samples, 2.89%)</title><rect x="46.9633%" y="213" width="2.8875%" height="15" fill="rgb(247,143,39)"/><text x="47.2133%" y="223.50">sp..</text></g><g><title>spacelox_core::value::boxed::Value::is_num (101 samples, 0.58%)</title><rect x="49.2710%" y="197" width="0.5798%" height="15" fill="rgb(236,97,10)"/><text x="49.5210%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::get_property (2,989 samples, 17.16%)</title><rect x="33.1343%" y="229" width="17.1584%" height="15" fill="rgb(233,208,19)"/><text x="33.3843%" y="239.50">spacelox_vm::vm::VmExecutor..</text></g><g><title>spacelox_core::value::boxed::Value::to_instance (77 samples, 0.44%)</title><rect x="49.8507%" y="213" width="0.4420%" height="15" fill="rgb(216,164,2)"/><text x="50.1007%" y="223.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_obj_tag (77 samples, 0.44%)</title><rect x="49.8507%" y="197" width="0.4420%" height="15" fill="rgb(220,129,5)"/><text x="50.1007%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (156 samples, 0.90%)</title><rect x="50.3272%" y="197" width="0.8955%" height="15" fill="rgb(242,17,10)"/><text x="50.5772%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (156 samples, 0.90%)</title><rect x="50.3272%" y="181" width="0.8955%" height="15" fill="rgb(242,107,0)"/><text x="50.5772%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (156 samples, 0.90%)</title><rect x="50.3272%" y="165" width="0.8955%" height="15" fill="rgb(251,28,31)"/><text x="50.5772%" y="175.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_property (3,182 samples, 18.27%)</title><rect x="33.1286%" y="245" width="18.2664%" height="15" fill="rgb(233,223,10)"/><text x="33.3786%" y="255.50">spacelox_vm::vm::VmExecutor&lt;..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (188 samples, 1.08%)</title><rect x="50.3157%" y="229" width="1.0792%" height="15" fill="rgb(215,21,27)"/><text x="50.5657%" y="239.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_constant (186 samples, 1.07%)</title><rect x="50.3272%" y="213" width="1.0677%" height="15" fill="rgb(232,23,21)"/><text x="50.5772%" y="223.50"></text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.17%)</title><rect x="51.2227%" y="197" width="0.1722%" height="15" fill="rgb(244,5,23)"/><text x="51.4727%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (516 samples, 2.96%)</title><rect x="54.8450%" y="149" width="2.9621%" height="15" fill="rgb(226,81,46)"/><text x="55.0950%" y="159.50">has..</text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (516 samples, 2.96%)</title><rect x="54.8450%" y="133" width="2.9621%" height="15" fill="rgb(247,70,30)"/><text x="55.0950%" y="143.50">&lt;sp..</text></g><g><title>core::ptr::hash (516 samples, 2.96%)</title><rect x="54.8450%" y="117" width="2.9621%" height="15" fill="rgb(212,68,19)"/><text x="55.0950%" y="127.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (516 samples, 2.96%)</title><rect x="54.8450%" y="101" width="2.9621%" height="15" fill="rgb(240,187,13)"/><text x="55.0950%" y="111.50">cor..</text></g><g><title>core::hash::Hasher::write_usize (516 samples, 2.96%)</title><rect x="54.8450%" y="85" width="2.9621%" height="15" fill="rgb(223,113,26)"/><text x="55.0950%" y="95.50">cor..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (514 samples, 2.95%)</title><rect x="54.8565%" y="69" width="2.9506%" height="15" fill="rgb(206,192,2)"/><text x="55.1065%" y="79.50">&lt;fn..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (189 samples, 1.08%)</title><rect x="56.7222%" y="53" width="1.0850%" height="15" fill="rgb(241,108,4)"/><text x="56.9722%" y="63.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.40%)</title><rect x="58.3238%" y="133" width="0.4018%" height="15" fill="rgb(247,173,49)"/><text x="58.5738%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.36%)</title><rect x="58.7256%" y="133" width="0.3617%" height="15" fill="rgb(224,114,35)"/><text x="58.9756%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (63 samples, 0.36%)</title><rect x="58.7256%" y="117" width="0.3617%" height="15" fill="rgb(245,159,27)"/><text x="58.9756%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (52 samples, 0.30%)</title><rect x="59.1045%" y="133" width="0.2985%" height="15" fill="rgb(245,172,44)"/><text x="59.3545%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (65 samples, 0.37%)</title><rect x="59.4030%" y="133" width="0.3731%" height="15" fill="rgb(236,23,11)"/><text x="59.6530%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (100 samples, 0.57%)</title><rect x="59.8220%" y="117" width="0.5741%" height="15" fill="rgb(205,117,38)"/><text x="60.0720%" y="127.50"></text></g><g><title>spacelox_core::object::Instance::get_field (1,310 samples, 7.52%)</title><rect x="53.2893%" y="213" width="7.5201%" height="15" fill="rgb(237,72,25)"/><text x="53.5393%" y="223.50">spacelox_c..</text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (1,208 samples, 6.93%)</title><rect x="53.8749%" y="197" width="6.9346%" height="15" fill="rgb(244,70,9)"/><text x="54.1249%" y="207.50">spacelox_..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1,039 samples, 5.96%)</title><rect x="54.8450%" y="181" width="5.9644%" height="15" fill="rgb(217,125,39)"/><text x="55.0950%" y="191.50">hashbrow..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1,039 samples, 5.96%)</title><rect x="54.8450%" y="165" width="5.9644%" height="15" fill="rgb(235,36,10)"/><text x="55.0950%" y="175.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (523 samples, 3.00%)</title><rect x="57.8071%" y="149" width="3.0023%" height="15" fill="rgb(251,123,47)"/><text x="58.0571%" y="159.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (172 samples, 0.99%)</title><rect x="59.8220%" y="133" width="0.9874%" height="15" fill="rgb(221,13,13)"/><text x="60.0720%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (72 samples, 0.41%)</title><rect x="60.3961%" y="117" width="0.4133%" height="15" fill="rgb(238,131,9)"/><text x="60.6461%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (72 samples, 0.41%)</title><rect x="60.3961%" y="101" width="0.4133%" height="15" fill="rgb(211,50,8)"/><text x="60.6461%" y="111.50"></text></g><g><title>core::core_arch::simd::i8x16::new (72 samples, 0.41%)</title><rect x="60.3961%" y="85" width="0.4133%" height="15" fill="rgb(245,182,24)"/><text x="60.6461%" y="95.50"></text></g><g><title>spacelox_core::value::boxed::Value::is_instance (137 samples, 0.79%)</title><rect x="60.8094%" y="213" width="0.7865%" height="15" fill="rgb(242,14,37)"/><text x="61.0594%" y="223.50"></text></g><g><title>spacelox_core::value::boxed::Value::is_obj_tag (137 samples, 0.79%)</title><rect x="60.8094%" y="197" width="0.7865%" height="15" fill="rgb(246,228,12)"/><text x="61.0594%" y="207.50"></text></g><g><title>spacelox_core::value::boxed::Value::kind (154 samples, 0.88%)</title><rect x="62.1068%" y="197" width="0.8840%" height="15" fill="rgb(213,55,15)"/><text x="62.3568%" y="207.50"></text></g><g><title>spacelox_core::value::boxed::Value::value_class (311 samples, 1.79%)</title><rect x="61.6131%" y="213" width="1.7853%" height="15" fill="rgb(209,9,3)"/><text x="61.8631%" y="223.50">s..</text></g><g><title>spacelox_core::value::boxed::Value::to_instance (71 samples, 0.41%)</title><rect x="62.9908%" y="197" width="0.4076%" height="15" fill="rgb(230,59,30)"/><text x="63.2408%" y="207.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_obj_tag (71 samples, 0.41%)</title><rect x="62.9908%" y="181" width="0.4076%" height="15" fill="rgb(209,121,21)"/><text x="63.2408%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (482 samples, 2.77%)</title><rect x="65.9070%" y="133" width="2.7669%" height="15" fill="rgb(220,109,13)"/><text x="66.1570%" y="143.50">ha..</text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (482 samples, 2.77%)</title><rect x="65.9070%" y="117" width="2.7669%" height="15" fill="rgb(232,18,1)"/><text x="66.1570%" y="127.50">&lt;s..</text></g><g><title>core::ptr::hash (482 samples, 2.77%)</title><rect x="65.9070%" y="101" width="2.7669%" height="15" fill="rgb(215,41,42)"/><text x="66.1570%" y="111.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (482 samples, 2.77%)</title><rect x="65.9070%" y="85" width="2.7669%" height="15" fill="rgb(224,123,36)"/><text x="66.1570%" y="95.50">co..</text></g><g><title>core::hash::Hasher::write_usize (482 samples, 2.77%)</title><rect x="65.9070%" y="69" width="2.7669%" height="15" fill="rgb(240,125,3)"/><text x="66.1570%" y="79.50">co..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (482 samples, 2.77%)</title><rect x="65.9070%" y="53" width="2.7669%" height="15" fill="rgb(205,98,50)"/><text x="66.1570%" y="63.50">&lt;f..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (240 samples, 1.38%)</title><rect x="67.2962%" y="37" width="1.3777%" height="15" fill="rgb(205,185,37)"/><text x="67.5462%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 0.76%)</title><rect x="69.5522%" y="117" width="0.7635%" height="15" fill="rgb(238,207,15)"/><text x="69.8022%" y="127.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (116 samples, 0.67%)</title><rect x="70.3157%" y="101" width="0.6659%" height="15" fill="rgb(213,199,42)"/><text x="70.5657%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (115 samples, 0.66%)</title><rect x="70.3215%" y="85" width="0.6602%" height="15" fill="rgb(235,201,11)"/><text x="70.5715%" y="95.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (115 samples, 0.66%)</title><rect x="70.3215%" y="69" width="0.6602%" height="15" fill="rgb(207,46,11)"/><text x="70.5715%" y="79.50"></text></g><g><title>core::num::&lt;impl u16&gt;::trailing_zeros (115 samples, 0.66%)</title><rect x="70.3215%" y="53" width="0.6602%" height="15" fill="rgb(241,35,35)"/><text x="70.5715%" y="63.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 0.67%)</title><rect x="70.3157%" y="117" width="0.6716%" height="15" fill="rgb(243,32,47)"/><text x="70.5657%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::_{{closure}} (119 samples, 0.68%)</title><rect x="70.9874%" y="117" width="0.6831%" height="15" fill="rgb(247,202,23)"/><text x="71.2374%" y="127.50"></text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::cmp::PartialEq&gt;::eq (89 samples, 0.51%)</title><rect x="71.1596%" y="101" width="0.5109%" height="15" fill="rgb(219,102,11)"/><text x="71.4096%" y="111.50"></text></g><g><title>core::ptr::eq (89 samples, 0.51%)</title><rect x="71.1596%" y="85" width="0.5109%" height="15" fill="rgb(243,110,44)"/><text x="71.4096%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (114 samples, 0.65%)</title><rect x="71.8485%" y="101" width="0.6544%" height="15" fill="rgb(222,74,54)"/><text x="72.0985%" y="111.50"></text></g><g><title>spacelox_core::object::Class::get_method (1,418 samples, 8.14%)</title><rect x="65.2928%" y="197" width="8.1401%" height="15" fill="rgb(216,99,12)"/><text x="65.5428%" y="207.50">spacelox_co..</text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (1,382 samples, 7.93%)</title><rect x="65.4994%" y="181" width="7.9334%" height="15" fill="rgb(226,22,26)"/><text x="65.7494%" y="191.50">spacelox_co..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1,365 samples, 7.84%)</title><rect x="65.5970%" y="165" width="7.8358%" height="15" fill="rgb(217,163,10)"/><text x="65.8470%" y="175.50">hashbrown::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1,365 samples, 7.84%)</title><rect x="65.5970%" y="149" width="7.8358%" height="15" fill="rgb(213,25,53)"/><text x="65.8470%" y="159.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (829 samples, 4.76%)</title><rect x="68.6739%" y="133" width="4.7589%" height="15" fill="rgb(252,105,26)"/><text x="68.9239%" y="143.50">hashbr..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (276 samples, 1.58%)</title><rect x="71.8485%" y="117" width="1.5844%" height="15" fill="rgb(220,39,43)"/><text x="72.0985%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (162 samples, 0.93%)</title><rect x="72.5029%" y="101" width="0.9300%" height="15" fill="rgb(229,68,48)"/><text x="72.7529%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (162 samples, 0.93%)</title><rect x="72.5029%" y="85" width="0.9300%" height="15" fill="rgb(252,8,32)"/><text x="72.7529%" y="95.50"></text></g><g><title>core::core_arch::simd::i8x16::new (162 samples, 0.93%)</title><rect x="72.5029%" y="69" width="0.9300%" height="15" fill="rgb(223,20,43)"/><text x="72.7529%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (52 samples, 0.30%)</title><rect x="76.4524%" y="181" width="0.2985%" height="15" fill="rgb(229,81,49)"/><text x="76.7024%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (52 samples, 0.30%)</title><rect x="76.4524%" y="165" width="0.2985%" height="15" fill="rgb(236,28,36)"/><text x="76.7024%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (52 samples, 0.30%)</title><rect x="76.4524%" y="149" width="0.2985%" height="15" fill="rgb(249,185,26)"/><text x="76.7024%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (53 samples, 0.30%)</title><rect x="76.7509%" y="181" width="0.3042%" height="15" fill="rgb(249,174,33)"/><text x="77.0009%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (53 samples, 0.30%)</title><rect x="76.7509%" y="165" width="0.3042%" height="15" fill="rgb(233,201,37)"/><text x="77.0009%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (53 samples, 0.30%)</title><rect x="76.7509%" y="149" width="0.3042%" height="15" fill="rgb(221,78,26)"/><text x="77.0009%" y="159.50"></text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (75 samples, 0.43%)</title><rect x="77.0551%" y="181" width="0.4305%" height="15" fill="rgb(250,127,30)"/><text x="77.3051%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (67 samples, 0.38%)</title><rect x="77.5144%" y="181" width="0.3846%" height="15" fill="rgb(230,49,44)"/><text x="77.7644%" y="191.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (853 samples, 4.90%)</title><rect x="73.4328%" y="197" width="4.8967%" height="15" fill="rgb(229,67,23)"/><text x="73.6828%" y="207.50">spacel..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::check_arity (75 samples, 0.43%)</title><rect x="77.8990%" y="181" width="0.4305%" height="15" fill="rgb(249,83,47)"/><text x="78.1490%" y="191.50"></text></g><g><title>spacelox_core::arity::ArityKind::check (75 samples, 0.43%)</title><rect x="77.8990%" y="165" width="0.4305%" height="15" fill="rgb(215,43,3)"/><text x="78.1490%" y="175.50"></text></g><g><title>spacelox_core::value::boxed::Value::kind (358 samples, 2.06%)</title><rect x="78.4386%" y="181" width="2.0551%" height="15" fill="rgb(238,154,13)"/><text x="78.6886%" y="191.50">s..</text></g><g><title>spacelox_core::value::boxed::Value::is_num (130 samples, 0.75%)</title><rect x="79.7474%" y="165" width="0.7463%" height="15" fill="rgb(219,56,2)"/><text x="79.9974%" y="175.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke (5,032 samples, 28.89%)</title><rect x="52.3881%" y="229" width="28.8863%" height="15" fill="rgb(233,0,4)"/><text x="52.6381%" y="239.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke_from_class (3,114 samples, 17.88%)</title><rect x="63.3984%" y="213" width="17.8760%" height="15" fill="rgb(235,30,7)"/><text x="63.6484%" y="223.50">spacelox_vm::vm::VmExecutor&lt;..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::resolve_call (513 samples, 2.94%)</title><rect x="78.3295%" y="197" width="2.9449%" height="15" fill="rgb(250,79,13)"/><text x="78.5795%" y="207.50">sp..</text></g><g><title>spacelox_core::value::boxed::Value::to_closure (136 samples, 0.78%)</title><rect x="80.4937%" y="181" width="0.7807%" height="15" fill="rgb(211,146,34)"/><text x="80.7437%" y="191.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_obj_tag (136 samples, 0.78%)</title><rect x="80.4937%" y="165" width="0.7807%" height="15" fill="rgb(228,22,38)"/><text x="80.7437%" y="175.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::peek (141 samples, 0.81%)</title><rect x="81.2744%" y="229" width="0.8094%" height="15" fill="rgb(235,168,5)"/><text x="81.5244%" y="239.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::get_val (141 samples, 0.81%)</title><rect x="81.2744%" y="213" width="0.8094%" height="15" fill="rgb(221,155,16)"/><text x="81.5244%" y="223.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (157 samples, 0.90%)</title><rect x="82.0838%" y="229" width="0.9013%" height="15" fill="rgb(215,215,53)"/><text x="82.3338%" y="239.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (170 samples, 0.98%)</title><rect x="82.9851%" y="213" width="0.9759%" height="15" fill="rgb(223,4,10)"/><text x="83.2351%" y="223.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (170 samples, 0.98%)</title><rect x="82.9851%" y="197" width="0.9759%" height="15" fill="rgb(234,103,6)"/><text x="83.2351%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (170 samples, 0.98%)</title><rect x="82.9851%" y="181" width="0.9759%" height="15" fill="rgb(227,97,0)"/><text x="83.2351%" y="191.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::_{{closure}} (170 samples, 0.98%)</title><rect x="82.9851%" y="165" width="0.9759%" height="15" fill="rgb(234,150,53)"/><text x="83.2351%" y="175.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_short (172 samples, 0.99%)</title><rect x="82.9851%" y="229" width="0.9874%" height="15" fill="rgb(228,201,54)"/><text x="83.2351%" y="239.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_str (176 samples, 1.01%)</title><rect x="83.9724%" y="213" width="1.0103%" height="15" fill="rgb(222,22,37)"/><text x="84.2224%" y="223.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_obj_tag (176 samples, 1.01%)</title><rect x="83.9724%" y="197" width="1.0103%" height="15" fill="rgb(237,53,32)"/><text x="84.2224%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_invoke (5,854 samples, 33.61%)</title><rect x="51.3949%" y="245" width="33.6051%" height="15" fill="rgb(233,25,53)"/><text x="51.6449%" y="255.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::op_invoke</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (179 samples, 1.03%)</title><rect x="83.9724%" y="229" width="1.0276%" height="15" fill="rgb(210,40,34)"/><text x="84.2224%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (77 samples, 0.44%)</title><rect x="87.4914%" y="213" width="0.4420%" height="15" fill="rgb(241,220,44)"/><text x="87.7414%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (75 samples, 0.43%)</title><rect x="87.5029%" y="197" width="0.4305%" height="15" fill="rgb(235,28,35)"/><text x="87.7529%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (75 samples, 0.43%)</title><rect x="87.5029%" y="181" width="0.4305%" height="15" fill="rgb(210,56,17)"/><text x="87.7529%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (123 samples, 0.71%)</title><rect x="87.4914%" y="229" width="0.7061%" height="15" fill="rgb(224,130,29)"/><text x="87.7414%" y="239.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (46 samples, 0.26%)</title><rect x="87.9334%" y="213" width="0.2641%" height="15" fill="rgb(235,212,8)"/><text x="88.1834%" y="223.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (46 samples, 0.26%)</title><rect x="87.9334%" y="197" width="0.2641%" height="15" fill="rgb(223,33,50)"/><text x="88.1834%" y="207.50"></text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (77 samples, 0.44%)</title><rect x="88.1975%" y="229" width="0.4420%" height="15" fill="rgb(219,149,13)"/><text x="88.4475%" y="239.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::pop (130 samples, 0.75%)</title><rect x="88.6969%" y="229" width="0.7463%" height="15" fill="rgb(250,156,29)"/><text x="88.9469%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (127 samples, 0.73%)</title><rect x="88.7141%" y="213" width="0.7290%" height="15" fill="rgb(216,193,19)"/><text x="88.9641%" y="223.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_return (749 samples, 4.30%)</title><rect x="85.1550%" y="245" width="4.2997%" height="15" fill="rgb(216,135,14)"/><text x="85.4050%" y="255.50">space..</text></g><g><title>&lt;spacelox_core::module::Module as spacelox_env::managed::Manage&gt;::size (19 samples, 0.11%)</title><rect x="89.5408%" y="181" width="0.1091%" height="15" fill="rgb(241,47,5)"/><text x="89.7908%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (26 samples, 0.15%)</title><rect x="89.6958%" y="133" width="0.1493%" height="15" fill="rgb(233,42,35)"/><text x="89.9458%" y="143.50"></text></g><g><title>&lt;spacelox_env::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (26 samples, 0.15%)</title><rect x="89.6958%" y="117" width="0.1493%" height="15" fill="rgb(231,13,6)"/><text x="89.9458%" y="127.50"></text></g><g><title>core::ptr::hash (26 samples, 0.15%)</title><rect x="89.6958%" y="101" width="0.1493%" height="15" fill="rgb(207,181,40)"/><text x="89.9458%" y="111.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (26 samples, 0.15%)</title><rect x="89.6958%" y="85" width="0.1493%" height="15" fill="rgb(254,173,49)"/><text x="89.9458%" y="95.50"></text></g><g><title>core::hash::Hasher::write_usize (26 samples, 0.15%)</title><rect x="89.6958%" y="69" width="0.1493%" height="15" fill="rgb(221,1,38)"/><text x="89.9458%" y="79.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (26 samples, 0.15%)</title><rect x="89.6958%" y="53" width="0.1493%" height="15" fill="rgb(206,124,46)"/><text x="89.9458%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (19 samples, 0.11%)</title><rect x="89.7359%" y="37" width="0.1091%" height="15" fill="rgb(249,21,11)"/><text x="89.9859%" y="47.50"></text></g><g><title>spacelox_core::module::Module::insert_symbol (110 samples, 0.63%)</title><rect x="89.4776%" y="229" width="0.6315%" height="15" fill="rgb(222,201,40)"/><text x="89.7276%" y="239.50"></text></g><g><title>spacelox_core::hooks::GcHooks::grow (110 samples, 0.63%)</title><rect x="89.4776%" y="213" width="0.6315%" height="15" fill="rgb(235,61,29)"/><text x="89.7276%" y="223.50"></text></g><g><title>spacelox_env::memory::Gc::grow (109 samples, 0.63%)</title><rect x="89.4834%" y="197" width="0.6257%" height="15" fill="rgb(219,207,3)"/><text x="89.7334%" y="207.50"></text></g><g><title>spacelox_core::module::Module::insert_symbol::_{{closure}} (76 samples, 0.44%)</title><rect x="89.6728%" y="181" width="0.4363%" height="15" fill="rgb(222,56,46)"/><text x="89.9228%" y="191.50"></text></g><g><title>spacelox_core::object::SlHashMap&lt;K,V&gt;::insert (74 samples, 0.42%)</title><rect x="89.6843%" y="165" width="0.4248%" height="15" fill="rgb(239,76,54)"/><text x="89.9343%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (72 samples, 0.41%)</title><rect x="89.6958%" y="149" width="0.4133%" height="15" fill="rgb(231,124,27)"/><text x="89.9458%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (46 samples, 0.26%)</title><rect x="89.8450%" y="133" width="0.2641%" height="15" fill="rgb(249,195,6)"/><text x="90.0950%" y="143.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_set_global (124 samples, 0.71%)</title><rect x="89.4546%" y="245" width="0.7118%" height="15" fill="rgb(237,174,47)"/><text x="89.7046%" y="255.50"></text></g><g><title>all (17,420 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(206,201,31)"/><text x="0.2500%" y="447.50"></text></g><g><title>spacelox (17,416 samples, 99.98%)</title><rect x="0.0230%" y="421" width="99.9770%" height="15" fill="rgb(231,57,52)"/><text x="0.2730%" y="431.50">spacelox</text></g><g><title>_start (14,292 samples, 82.04%)</title><rect x="17.9564%" y="405" width="82.0436%" height="15" fill="rgb(248,177,22)"/><text x="18.2064%" y="415.50">_start</text></g><g><title>__libc_start_main (14,292 samples, 82.04%)</title><rect x="17.9564%" y="389" width="82.0436%" height="15" fill="rgb(215,211,37)"/><text x="18.2064%" y="399.50">__libc_start_main</text></g><g><title>main (14,292 samples, 82.04%)</title><rect x="17.9564%" y="373" width="82.0436%" height="15" fill="rgb(241,128,51)"/><text x="18.2064%" y="383.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (14,292 samples, 82.04%)</title><rect x="17.9564%" y="357" width="82.0436%" height="15" fill="rgb(227,165,31)"/><text x="18.2064%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::rt::lang_start_internal::_{{closure}}::_{{closure}} (14,292 samples, 82.04%)</title><rect x="17.9564%" y="341" width="82.0436%" height="15" fill="rgb(228,167,24)"/><text x="18.2064%" y="351.50">std::rt::lang_start_internal::_{{closure}}::_{{closure}}</text></g><g><title>std::rt::lang_start::_{{closure}} (14,292 samples, 82.04%)</title><rect x="17.9564%" y="325" width="82.0436%" height="15" fill="rgb(228,143,12)"/><text x="18.2064%" y="335.50">std::rt::lang_start::_{{closure}}</text></g><g><title>spacelox::main (14,292 samples, 82.04%)</title><rect x="17.9564%" y="309" width="82.0436%" height="15" fill="rgb(249,149,8)"/><text x="18.2064%" y="319.50">spacelox::main</text></g><g><title>spacelox_vm::vm::Vm&lt;I&gt;::run (14,292 samples, 82.04%)</title><rect x="17.9564%" y="293" width="82.0436%" height="15" fill="rgb(243,35,44)"/><text x="18.2064%" y="303.50">spacelox_vm::vm::Vm&lt;I&gt;::run</text></g><g><title>spacelox_vm::vm::Vm&lt;I&gt;::interpret (14,292 samples, 82.04%)</title><rect x="17.9564%" y="277" width="82.0436%" height="15" fill="rgb(246,89,9)"/><text x="18.2064%" y="287.50">spacelox_vm::vm::Vm&lt;I&gt;::interpret</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::run (14,292 samples, 82.04%)</title><rect x="17.9564%" y="261" width="82.0436%" height="15" fill="rgb(233,213,13)"/><text x="18.2064%" y="271.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::run</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (1,713 samples, 9.83%)</title><rect x="90.1665%" y="245" width="9.8335%" height="15" fill="rgb(233,141,41)"/><text x="90.4165%" y="255.50">spacelox_vm::v..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (1,206 samples, 6.92%)</title><rect x="93.0769%" y="229" width="6.9231%" height="15" fill="rgb(239,167,4)"/><text x="93.3269%" y="239.50">spacelox_..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (305 samples, 1.75%)</title><rect x="98.2491%" y="213" width="1.7509%" height="15" fill="rgb(209,217,16)"/><text x="98.4991%" y="223.50"></text></g></svg></svg>