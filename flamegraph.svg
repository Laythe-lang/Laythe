<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180"><g><title>perf (5 samples, 1.79%)</title><rect x="0.0000%" y="389" width="1.7921%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="399.50">p..</text></g><g><title>[unknown] (5 samples, 1.79%)</title><rect x="0.0000%" y="373" width="1.7921%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="383.50">[..</text></g><g><title>[unknown] (5 samples, 1.79%)</title><rect x="0.0000%" y="357" width="1.7921%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="367.50">[..</text></g><g><title>[unknown] (5 samples, 1.79%)</title><rect x="0.0000%" y="341" width="1.7921%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="351.50">[..</text></g><g><title>[unknown] (5 samples, 1.79%)</title><rect x="0.0000%" y="325" width="1.7921%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="335.50">[..</text></g><g><title>[unknown] (5 samples, 1.79%)</title><rect x="0.0000%" y="309" width="1.7921%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="319.50">[..</text></g><g><title>[unknown] (5 samples, 1.79%)</title><rect x="0.0000%" y="293" width="1.7921%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="303.50">[..</text></g><g><title>[unknown] (5 samples, 1.79%)</title><rect x="0.0000%" y="277" width="1.7921%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="287.50">[..</text></g><g><title>[unknown] (5 samples, 1.79%)</title><rect x="0.0000%" y="261" width="1.7921%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="271.50">[..</text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.4337%" y="245" width="0.3584%" height="15" fill="rgb(220,122,19)"/><text x="1.6837%" y="255.50"></text></g><g><title>core::iter::adapters::Rev&lt;T&gt;::new (2 samples, 0.72%)</title><rect x="1.7921%" y="357" width="0.7168%" height="15" fill="rgb(250,228,42)"/><text x="2.0421%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (1 samples, 0.36%)</title><rect x="2.5090%" y="357" width="0.3584%" height="15" fill="rgb(240,193,28)"/><text x="2.7590%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::rev (1 samples, 0.36%)</title><rect x="2.5090%" y="341" width="0.3584%" height="15" fill="rgb(216,20,37)"/><text x="2.7590%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::resolve_call (2 samples, 0.72%)</title><rect x="2.8674%" y="357" width="0.7168%" height="15" fill="rgb(206,188,39)"/><text x="3.1174%" y="367.50"></text></g><g><title>[[stack]] (6 samples, 2.15%)</title><rect x="1.7921%" y="373" width="2.1505%" height="15" fill="rgb(217,207,13)"/><text x="2.0421%" y="383.50">[..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::run (1 samples, 0.36%)</title><rect x="3.5842%" y="357" width="0.3584%" height="15" fill="rgb(231,73,38)"/><text x="3.8342%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_global (1 samples, 0.36%)</title><rect x="3.5842%" y="341" width="0.3584%" height="15" fill="rgb(225,20,46)"/><text x="3.8342%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.36%)</title><rect x="3.5842%" y="325" width="0.3584%" height="15" fill="rgb(210,31,41)"/><text x="3.8342%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1 samples, 0.36%)</title><rect x="3.5842%" y="309" width="0.3584%" height="15" fill="rgb(221,200,47)"/><text x="3.8342%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.36%)</title><rect x="3.5842%" y="293" width="0.3584%" height="15" fill="rgb(226,26,5)"/><text x="3.8342%" y="303.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (1 samples, 0.36%)</title><rect x="3.5842%" y="277" width="0.3584%" height="15" fill="rgb(249,33,26)"/><text x="3.8342%" y="287.50"></text></g><g><title>core::ptr::hash (1 samples, 0.36%)</title><rect x="3.5842%" y="261" width="0.3584%" height="15" fill="rgb(235,183,28)"/><text x="3.8342%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (1 samples, 0.36%)</title><rect x="3.5842%" y="245" width="0.3584%" height="15" fill="rgb(221,5,38)"/><text x="3.8342%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.36%)</title><rect x="3.5842%" y="229" width="0.3584%" height="15" fill="rgb(247,18,42)"/><text x="3.8342%" y="239.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (1 samples, 0.36%)</title><rect x="3.5842%" y="213" width="0.3584%" height="15" fill="rgb(241,131,45)"/><text x="3.8342%" y="223.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (2 samples, 0.72%)</title><rect x="3.9427%" y="357" width="0.7168%" height="15" fill="rgb(249,31,29)"/><text x="4.1927%" y="367.50"></text></g><g><title>[unknown] (8 samples, 2.87%)</title><rect x="3.9427%" y="373" width="2.8674%" height="15" fill="rgb(225,111,53)"/><text x="4.1927%" y="383.50">[u..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (6 samples, 2.15%)</title><rect x="4.6595%" y="357" width="2.1505%" height="15" fill="rgb(238,160,17)"/><text x="4.9095%" y="367.50">s..</text></g><g><title>spacelox_core::value::boxed::Value::is_num (2 samples, 0.72%)</title><rect x="10.3943%" y="197" width="0.7168%" height="15" fill="rgb(214,148,48)"/><text x="10.6443%" y="207.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_num (1 samples, 0.36%)</title><rect x="11.1111%" y="197" width="0.3584%" height="15" fill="rgb(232,36,49)"/><text x="11.3611%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::pop (3 samples, 1.08%)</title><rect x="11.4695%" y="197" width="1.0753%" height="15" fill="rgb(209,103,24)"/><text x="11.7195%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::get_val (2 samples, 0.72%)</title><rect x="11.8280%" y="181" width="0.7168%" height="15" fill="rgb(229,88,8)"/><text x="12.0780%" y="191.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_add (11 samples, 3.94%)</title><rect x="9.3190%" y="213" width="3.9427%" height="15" fill="rgb(213,181,19)"/><text x="9.5690%" y="223.50">spac..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (2 samples, 0.72%)</title><rect x="12.5448%" y="197" width="0.7168%" height="15" fill="rgb(254,191,54)"/><text x="12.7948%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.36%)</title><rect x="17.2043%" y="181" width="0.3584%" height="15" fill="rgb(241,83,37)"/><text x="17.4543%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (1 samples, 0.36%)</title><rect x="17.2043%" y="165" width="0.3584%" height="15" fill="rgb(233,36,39)"/><text x="17.4543%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.36%)</title><rect x="17.2043%" y="149" width="0.3584%" height="15" fill="rgb(226,3,54)"/><text x="17.4543%" y="159.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.72%)</title><rect x="17.5627%" y="181" width="0.7168%" height="15" fill="rgb(245,192,40)"/><text x="17.8127%" y="191.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (15 samples, 5.38%)</title><rect x="13.9785%" y="197" width="5.3763%" height="15" fill="rgb(238,167,29)"/><text x="14.2285%" y="207.50">spacelo..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::check_arity (3 samples, 1.08%)</title><rect x="18.2796%" y="181" width="1.0753%" height="15" fill="rgb(232,182,51)"/><text x="18.5296%" y="191.50"></text></g><g><title>spacelox_core::arity::ArityKind::check (3 samples, 1.08%)</title><rect x="18.2796%" y="165" width="1.0753%" height="15" fill="rgb(231,60,39)"/><text x="18.5296%" y="175.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (2 samples, 0.72%)</title><rect x="19.3548%" y="197" width="0.7168%" height="15" fill="rgb(208,69,12)"/><text x="19.6048%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (2 samples, 0.72%)</title><rect x="19.3548%" y="181" width="0.7168%" height="15" fill="rgb(235,93,37)"/><text x="19.6048%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.72%)</title><rect x="19.3548%" y="165" width="0.7168%" height="15" fill="rgb(213,116,39)"/><text x="19.6048%" y="175.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_call (28 samples, 10.04%)</title><rect x="13.2616%" y="213" width="10.0358%" height="15" fill="rgb(222,207,29)"/><text x="13.5116%" y="223.50">spacelox_vm::vm..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::resolve_call (9 samples, 3.23%)</title><rect x="20.0717%" y="197" width="3.2258%" height="15" fill="rgb(206,96,30)"/><text x="20.3217%" y="207.50">spa..</text></g><g><title>spacelox_core::value::boxed::Value::kind (1 samples, 0.36%)</title><rect x="22.9391%" y="181" width="0.3584%" height="15" fill="rgb(218,138,4)"/><text x="23.1891%" y="191.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (12 samples, 4.30%)</title><rect x="23.2975%" y="197" width="4.3011%" height="15" fill="rgb(250,191,14)"/><text x="23.5475%" y="207.50">space..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::set_val (6 samples, 2.15%)</title><rect x="25.4480%" y="181" width="2.1505%" height="15" fill="rgb(239,60,40)"/><text x="25.6980%" y="191.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (2 samples, 0.72%)</title><rect x="27.5986%" y="197" width="0.7168%" height="15" fill="rgb(206,27,48)"/><text x="27.8486%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_constant (16 samples, 5.73%)</title><rect x="23.2975%" y="213" width="5.7348%" height="15" fill="rgb(225,35,8)"/><text x="23.5475%" y="223.50">spacelo..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_constant (2 samples, 0.72%)</title><rect x="28.3154%" y="197" width="0.7168%" height="15" fill="rgb(250,213,24)"/><text x="28.5654%" y="207.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.36%)</title><rect x="28.6738%" y="181" width="0.3584%" height="15" fill="rgb(247,123,22)"/><text x="28.9238%" y="191.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_drop (1 samples, 0.36%)</title><rect x="29.0323%" y="213" width="0.3584%" height="15" fill="rgb(231,138,38)"/><text x="29.2823%" y="223.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::drop (1 samples, 0.36%)</title><rect x="29.0323%" y="197" width="0.3584%" height="15" fill="rgb(231,145,46)"/><text x="29.2823%" y="207.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.36%)</title><rect x="32.9749%" y="69" width="0.3584%" height="15" fill="rgb(251,118,11)"/><text x="33.2249%" y="79.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (1 samples, 0.36%)</title><rect x="32.9749%" y="53" width="0.3584%" height="15" fill="rgb(217,147,25)"/><text x="33.2249%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.36%)</title><rect x="32.9749%" y="37" width="0.3584%" height="15" fill="rgb(247,81,37)"/><text x="33.2249%" y="47.50"></text></g><g><title>core::iter::adapters::Rev&lt;T&gt;::new (3 samples, 1.08%)</title><rect x="33.3333%" y="69" width="1.0753%" height="15" fill="rgb(209,12,38)"/><text x="33.5833%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (38 samples, 13.62%)</title><rect x="29.3907%" y="165" width="13.6201%" height="15" fill="rgb(227,1,9)"/><text x="29.6407%" y="175.50">hashbrown::map::make_..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (38 samples, 13.62%)</title><rect x="29.3907%" y="149" width="13.6201%" height="15" fill="rgb(248,47,43)"/><text x="29.6407%" y="159.50">&lt;spacelox_core::manag..</text></g><g><title>core::ptr::hash (38 samples, 13.62%)</title><rect x="29.3907%" y="133" width="13.6201%" height="15" fill="rgb(221,10,30)"/><text x="29.6407%" y="143.50">core::ptr::hash</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (38 samples, 13.62%)</title><rect x="29.3907%" y="117" width="13.6201%" height="15" fill="rgb(210,229,1)"/><text x="29.6407%" y="127.50">core::hash::impls::&lt;i..</text></g><g><title>core::hash::Hasher::write_usize (38 samples, 13.62%)</title><rect x="29.3907%" y="101" width="13.6201%" height="15" fill="rgb(222,148,37)"/><text x="29.6407%" y="111.50">core::hash::Hasher::w..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (35 samples, 12.54%)</title><rect x="30.4659%" y="85" width="12.5448%" height="15" fill="rgb(234,67,33)"/><text x="30.7159%" y="95.50">&lt;fnv::FnvHasher as ..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (24 samples, 8.60%)</title><rect x="34.4086%" y="69" width="8.6022%" height="15" fill="rgb(247,98,35)"/><text x="34.6586%" y="79.50">core::num::&lt;..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.36%)</title><rect x="44.8029%" y="149" width="0.3584%" height="15" fill="rgb(247,138,52)"/><text x="45.0529%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 2.15%)</title><rect x="45.1613%" y="149" width="2.1505%" height="15" fill="rgb(213,79,30)"/><text x="45.4113%" y="159.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 2.15%)</title><rect x="45.1613%" y="133" width="2.1505%" height="15" fill="rgb(246,177,23)"/><text x="45.4113%" y="143.50">h..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (6 samples, 2.15%)</title><rect x="45.1613%" y="117" width="2.1505%" height="15" fill="rgb(230,62,27)"/><text x="45.4113%" y="127.50">h..</text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (6 samples, 2.15%)</title><rect x="45.1613%" y="101" width="2.1505%" height="15" fill="rgb(216,154,8)"/><text x="45.4113%" y="111.50">h..</text></g><g><title>core::num::&lt;impl u16&gt;::trailing_zeros (4 samples, 1.43%)</title><rect x="45.8781%" y="85" width="1.4337%" height="15" fill="rgb(244,35,45)"/><text x="46.1281%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (1 samples, 0.36%)</title><rect x="47.3118%" y="149" width="0.3584%" height="15" fill="rgb(251,115,12)"/><text x="47.5618%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.36%)</title><rect x="47.3118%" y="133" width="0.3584%" height="15" fill="rgb(240,54,50)"/><text x="47.5618%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.36%)</title><rect x="47.3118%" y="117" width="0.3584%" height="15" fill="rgb(233,84,52)"/><text x="47.5618%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.36%)</title><rect x="47.3118%" y="101" width="0.3584%" height="15" fill="rgb(207,117,47)"/><text x="47.5618%" y="111.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 1.43%)</title><rect x="47.6703%" y="149" width="1.4337%" height="15" fill="rgb(249,43,39)"/><text x="47.9203%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.72%)</title><rect x="49.1039%" y="133" width="0.7168%" height="15" fill="rgb(209,38,44)"/><text x="49.3539%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (62 samples, 22.22%)</title><rect x="29.3907%" y="197" width="22.2222%" height="15" fill="rgb(236,212,23)"/><text x="29.6407%" y="207.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (62 samples, 22.22%)</title><rect x="29.3907%" y="181" width="22.2222%" height="15" fill="rgb(242,79,21)"/><text x="29.6407%" y="191.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (24 samples, 8.60%)</title><rect x="43.0108%" y="165" width="8.6022%" height="15" fill="rgb(211,96,35)"/><text x="43.2608%" y="175.50">hashbrown::r..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 2.51%)</title><rect x="49.1039%" y="149" width="2.5090%" height="15" fill="rgb(253,215,40)"/><text x="49.3539%" y="159.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (5 samples, 1.79%)</title><rect x="49.8208%" y="133" width="1.7921%" height="15" fill="rgb(211,81,21)"/><text x="50.0708%" y="143.50">c..</text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (5 samples, 1.79%)</title><rect x="49.8208%" y="117" width="1.7921%" height="15" fill="rgb(208,190,38)"/><text x="50.0708%" y="127.50">c..</text></g><g><title>core::core_arch::simd::i8x16::new (5 samples, 1.79%)</title><rect x="49.8208%" y="101" width="1.7921%" height="15" fill="rgb(235,213,38)"/><text x="50.0708%" y="111.50">c..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_global (67 samples, 24.01%)</title><rect x="29.3907%" y="213" width="24.0143%" height="15" fill="rgb(237,122,38)"/><text x="29.6407%" y="223.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (5 samples, 1.79%)</title><rect x="51.6129%" y="197" width="1.7921%" height="15" fill="rgb(244,218,35)"/><text x="51.8629%" y="207.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_constant (5 samples, 1.79%)</title><rect x="51.6129%" y="181" width="1.7921%" height="15" fill="rgb(240,68,47)"/><text x="51.8629%" y="191.50">s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 1.79%)</title><rect x="51.6129%" y="165" width="1.7921%" height="15" fill="rgb(210,16,53)"/><text x="51.8629%" y="175.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (5 samples, 1.79%)</title><rect x="51.6129%" y="149" width="1.7921%" height="15" fill="rgb(235,124,12)"/><text x="51.8629%" y="159.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 1.79%)</title><rect x="51.6129%" y="133" width="1.7921%" height="15" fill="rgb(224,169,11)"/><text x="51.8629%" y="143.50">a..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (6 samples, 2.15%)</title><rect x="53.7634%" y="197" width="2.1505%" height="15" fill="rgb(250,166,2)"/><text x="54.0134%" y="207.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_local (8 samples, 2.87%)</title><rect x="53.4050%" y="213" width="2.8674%" height="15" fill="rgb(242,216,29)"/><text x="53.6550%" y="223.50">sp..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (1 samples, 0.36%)</title><rect x="55.9140%" y="197" width="0.3584%" height="15" fill="rgb(230,116,27)"/><text x="56.1640%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (1 samples, 0.36%)</title><rect x="55.9140%" y="181" width="0.3584%" height="15" fill="rgb(228,99,48)"/><text x="56.1640%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.36%)</title><rect x="55.9140%" y="165" width="0.3584%" height="15" fill="rgb(253,11,6)"/><text x="56.1640%" y="175.50"></text></g><g><title>spacelox_core::value::boxed::Value::is_bool (3 samples, 1.08%)</title><rect x="56.6308%" y="181" width="1.0753%" height="15" fill="rgb(247,143,39)"/><text x="56.8808%" y="191.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_jump_if_not_false (5 samples, 1.79%)</title><rect x="56.2724%" y="213" width="1.7921%" height="15" fill="rgb(236,97,10)"/><text x="56.5224%" y="223.50">s..</text></g><g><title>spacelox_core::utils::is_falsey (4 samples, 1.43%)</title><rect x="56.6308%" y="197" width="1.4337%" height="15" fill="rgb(233,208,19)"/><text x="56.8808%" y="207.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_bool (1 samples, 0.36%)</title><rect x="57.7061%" y="181" width="0.3584%" height="15" fill="rgb(216,164,2)"/><text x="57.9561%" y="191.50"></text></g><g><title>&lt;spacelox_core::value::boxed::Value as core::cmp::PartialEq&gt;::eq (1 samples, 0.36%)</title><rect x="57.7061%" y="165" width="0.3584%" height="15" fill="rgb(220,129,5)"/><text x="57.9561%" y="175.50"></text></g><g><title>spacelox_core::value::boxed::Value::is_num (3 samples, 1.08%)</title><rect x="59.4982%" y="197" width="1.0753%" height="15" fill="rgb(242,17,10)"/><text x="59.7482%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::pop (5 samples, 1.79%)</title><rect x="60.5735%" y="197" width="1.7921%" height="15" fill="rgb(242,107,0)"/><text x="60.8235%" y="207.50">s..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.36%)</title><rect x="62.0072%" y="181" width="0.3584%" height="15" fill="rgb(251,28,31)"/><text x="62.2572%" y="191.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_less (14 samples, 5.02%)</title><rect x="58.0645%" y="213" width="5.0179%" height="15" fill="rgb(233,223,10)"/><text x="58.3145%" y="223.50">spacel..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (2 samples, 0.72%)</title><rect x="62.3656%" y="197" width="0.7168%" height="15" fill="rgb(215,21,27)"/><text x="62.6156%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::set_val (2 samples, 0.72%)</title><rect x="62.3656%" y="181" width="0.7168%" height="15" fill="rgb(232,23,21)"/><text x="62.6156%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.72%)</title><rect x="67.0251%" y="197" width="0.7168%" height="15" fill="rgb(244,5,23)"/><text x="67.2751%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.72%)</title><rect x="67.0251%" y="181" width="0.7168%" height="15" fill="rgb(226,81,46)"/><text x="67.2751%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (2 samples, 0.72%)</title><rect x="67.0251%" y="165" width="0.7168%" height="15" fill="rgb(247,70,30)"/><text x="67.2751%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.72%)</title><rect x="67.0251%" y="149" width="0.7168%" height="15" fill="rgb(212,68,19)"/><text x="67.2751%" y="159.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 1.43%)</title><rect x="67.7419%" y="197" width="1.4337%" height="15" fill="rgb(240,187,13)"/><text x="67.9919%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.72%)</title><rect x="69.8925%" y="181" width="0.7168%" height="15" fill="rgb(223,113,26)"/><text x="70.1425%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (2 samples, 0.72%)</title><rect x="69.8925%" y="165" width="0.7168%" height="15" fill="rgb(206,192,2)"/><text x="70.1425%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.72%)</title><rect x="69.8925%" y="149" width="0.7168%" height="15" fill="rgb(241,108,4)"/><text x="70.1425%" y="159.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (8 samples, 2.87%)</title><rect x="69.1756%" y="197" width="2.8674%" height="15" fill="rgb(247,173,49)"/><text x="69.4256%" y="207.50">sp..</text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.43%)</title><rect x="70.6093%" y="181" width="1.4337%" height="15" fill="rgb(224,114,35)"/><text x="70.8593%" y="191.50"></text></g><g><title>&lt;core::slice::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4 samples, 1.43%)</title><rect x="70.6093%" y="165" width="1.4337%" height="15" fill="rgb(245,159,27)"/><text x="70.8593%" y="175.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_return (26 samples, 9.32%)</title><rect x="63.0824%" y="213" width="9.3190%" height="15" fill="rgb(245,172,44)"/><text x="63.3324%" y="223.50">spacelox_vm::..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (1 samples, 0.36%)</title><rect x="72.0430%" y="197" width="0.3584%" height="15" fill="rgb(236,23,11)"/><text x="72.2930%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::set_val (1 samples, 0.36%)</title><rect x="72.0430%" y="181" width="0.3584%" height="15" fill="rgb(205,117,38)"/><text x="72.2930%" y="191.50"></text></g><g><title>spacelox_core::value::boxed::Value::is_num (3 samples, 1.08%)</title><rect x="72.7599%" y="197" width="1.0753%" height="15" fill="rgb(237,72,25)"/><text x="73.0099%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::pop (5 samples, 1.79%)</title><rect x="73.8351%" y="197" width="1.7921%" height="15" fill="rgb(244,70,9)"/><text x="74.0851%" y="207.50">s..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 1.08%)</title><rect x="74.5520%" y="181" width="1.0753%" height="15" fill="rgb(217,125,39)"/><text x="74.8020%" y="191.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_sub (11 samples, 3.94%)</title><rect x="72.4014%" y="213" width="3.9427%" height="15" fill="rgb(235,36,10)"/><text x="72.6514%" y="223.50">spac..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (2 samples, 0.72%)</title><rect x="75.6272%" y="197" width="0.7168%" height="15" fill="rgb(251,123,47)"/><text x="75.8772%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::set_val (2 samples, 0.72%)</title><rect x="75.6272%" y="181" width="0.7168%" height="15" fill="rgb(221,13,13)"/><text x="75.8772%" y="191.50"></text></g><g><title>__libc_start_main (259 samples, 92.83%)</title><rect x="6.8100%" y="357" width="92.8315%" height="15" fill="rgb(238,131,9)"/><text x="7.0600%" y="367.50">__libc_start_main</text></g><g><title>main (259 samples, 92.83%)</title><rect x="6.8100%" y="341" width="92.8315%" height="15" fill="rgb(211,50,8)"/><text x="7.0600%" y="351.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (259 samples, 92.83%)</title><rect x="6.8100%" y="325" width="92.8315%" height="15" fill="rgb(245,182,24)"/><text x="7.0600%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::rt::lang_start_internal::_{{closure}}::_{{closure}} (259 samples, 92.83%)</title><rect x="6.8100%" y="309" width="92.8315%" height="15" fill="rgb(242,14,37)"/><text x="7.0600%" y="319.50">std::rt::lang_start_internal::_{{closure}}::_{{closure}}</text></g><g><title>std::rt::lang_start::_{{closure}} (259 samples, 92.83%)</title><rect x="6.8100%" y="293" width="92.8315%" height="15" fill="rgb(246,228,12)"/><text x="7.0600%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>spacelox::main (259 samples, 92.83%)</title><rect x="6.8100%" y="277" width="92.8315%" height="15" fill="rgb(213,55,15)"/><text x="7.0600%" y="287.50">spacelox::main</text></g><g><title>spacelox_vm::vm::Vm&lt;I&gt;::run (259 samples, 92.83%)</title><rect x="6.8100%" y="261" width="92.8315%" height="15" fill="rgb(209,9,3)"/><text x="7.0600%" y="271.50">spacelox_vm::vm::Vm&lt;I&gt;::run</text></g><g><title>spacelox_vm::vm::Vm&lt;I&gt;::interpret (259 samples, 92.83%)</title><rect x="6.8100%" y="245" width="92.8315%" height="15" fill="rgb(230,59,30)"/><text x="7.0600%" y="255.50">spacelox_vm::vm::Vm&lt;I&gt;::interpret</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::run (259 samples, 92.83%)</title><rect x="6.8100%" y="229" width="92.8315%" height="15" fill="rgb(209,121,21)"/><text x="7.0600%" y="239.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::run</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (65 samples, 23.30%)</title><rect x="76.3441%" y="213" width="23.2975%" height="15" fill="rgb(220,109,13)"/><text x="76.5941%" y="223.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::read_..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (48 samples, 17.20%)</title><rect x="82.4373%" y="197" width="17.2043%" height="15" fill="rgb(232,18,1)"/><text x="82.6873%" y="207.50">spacelox_vm::vm::VmExecutor..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (12 samples, 4.30%)</title><rect x="95.3405%" y="181" width="4.3011%" height="15" fill="rgb(215,41,42)"/><text x="95.5905%" y="191.50">core:..</text></g><g><title>all (279 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="415.50"></text></g><g><title>spacelox (274 samples, 98.21%)</title><rect x="1.7921%" y="389" width="98.2079%" height="15" fill="rgb(240,125,3)"/><text x="2.0421%" y="399.50">spacelox</text></g><g><title>_start (260 samples, 93.19%)</title><rect x="6.8100%" y="373" width="93.1900%" height="15" fill="rgb(205,98,50)"/><text x="7.0600%" y="383.50">_start</text></g><g><title>_dl_start (1 samples, 0.36%)</title><rect x="99.6416%" y="357" width="0.3584%" height="15" fill="rgb(205,185,37)"/><text x="99.8916%" y="367.50"></text></g><g><title>_dl_start_final (1 samples, 0.36%)</title><rect x="99.6416%" y="341" width="0.3584%" height="15" fill="rgb(238,207,15)"/><text x="99.8916%" y="351.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.36%)</title><rect x="99.6416%" y="325" width="0.3584%" height="15" fill="rgb(213,199,42)"/><text x="99.8916%" y="335.50"></text></g><g><title>dl_main (1 samples, 0.36%)</title><rect x="99.6416%" y="309" width="0.3584%" height="15" fill="rgb(235,201,11)"/><text x="99.8916%" y="319.50"></text></g><g><title>_dl_receive_error (1 samples, 0.36%)</title><rect x="99.6416%" y="293" width="0.3584%" height="15" fill="rgb(207,46,11)"/><text x="99.8916%" y="303.50"></text></g><g><title>version_check_doit (1 samples, 0.36%)</title><rect x="99.6416%" y="277" width="0.3584%" height="15" fill="rgb(241,35,35)"/><text x="99.8916%" y="287.50"></text></g><g><title>_dl_check_all_versions (1 samples, 0.36%)</title><rect x="99.6416%" y="261" width="0.3584%" height="15" fill="rgb(243,32,47)"/><text x="99.8916%" y="271.50"></text></g><g><title>_dl_check_map_versions (1 samples, 0.36%)</title><rect x="99.6416%" y="245" width="0.3584%" height="15" fill="rgb(247,202,23)"/><text x="99.8916%" y="255.50"></text></g><g><title>find_needed (1 samples, 0.36%)</title><rect x="99.6416%" y="229" width="0.3584%" height="15" fill="rgb(219,102,11)"/><text x="99.8916%" y="239.50"></text></g><g><title>_dl_name_match_p (1 samples, 0.36%)</title><rect x="99.6416%" y="213" width="0.3584%" height="15" fill="rgb(243,110,44)"/><text x="99.8916%" y="223.50"></text></g><g><title>strcmp (1 samples, 0.36%)</title><rect x="99.6416%" y="197" width="0.3584%" height="15" fill="rgb(222,74,54)"/><text x="99.8916%" y="207.50"></text></g></svg></svg>