<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="645.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="645.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 0.44%)</title><rect x="0.5041%" y="549" width="0.4391%" height="15" fill="rgb(227,0,7)"/><text x="0.7541%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (18 samples, 0.29%)</title><rect x="0.9432%" y="485" width="0.2927%" height="15" fill="rgb(217,0,24)"/><text x="1.1932%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (83 samples, 1.35%)</title><rect x="0.1464%" y="565" width="1.3498%" height="15" fill="rgb(221,193,54)"/><text x="0.3964%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (34 samples, 0.55%)</title><rect x="0.9432%" y="549" width="0.5529%" height="15" fill="rgb(248,212,6)"/><text x="1.1932%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (34 samples, 0.55%)</title><rect x="0.9432%" y="533" width="0.5529%" height="15" fill="rgb(208,68,35)"/><text x="1.1932%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (34 samples, 0.55%)</title><rect x="0.9432%" y="517" width="0.5529%" height="15" fill="rgb(232,128,0)"/><text x="1.1932%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (34 samples, 0.55%)</title><rect x="0.9432%" y="501" width="0.5529%" height="15" fill="rgb(207,160,47)"/><text x="1.1932%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (16 samples, 0.26%)</title><rect x="1.2360%" y="485" width="0.2602%" height="15" fill="rgb(228,23,34)"/><text x="1.4860%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.26%)</title><rect x="1.2360%" y="469" width="0.2602%" height="15" fill="rgb(218,30,26)"/><text x="1.4860%" y="479.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.26%)</title><rect x="1.5124%" y="565" width="0.2602%" height="15" fill="rgb(220,122,19)"/><text x="1.7624%" y="575.50"></text></g><g><title>_int_free (45 samples, 0.73%)</title><rect x="1.7726%" y="565" width="0.7318%" height="15" fill="rgb(250,228,42)"/><text x="2.0226%" y="575.50"></text></g><g><title>_int_malloc (14 samples, 0.23%)</title><rect x="2.5045%" y="565" width="0.2277%" height="15" fill="rgb(240,193,28)"/><text x="2.7545%" y="575.50"></text></g><g><title>spacelox_vm::memory::Gc::allocate (38 samples, 0.62%)</title><rect x="2.7484%" y="565" width="0.6180%" height="15" fill="rgb(216,20,37)"/><text x="2.9984%" y="575.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::call (38 samples, 0.62%)</title><rect x="3.3664%" y="565" width="0.6180%" height="15" fill="rgb(206,188,39)"/><text x="3.6164%" y="575.50"></text></g><g><title>[[stack]] (248 samples, 4.03%)</title><rect x="0.1464%" y="581" width="4.0332%" height="15" fill="rgb(217,207,13)"/><text x="0.3964%" y="591.50">[[st..</text></g><g><title>spacelox_vm::vm::VmExecutor::resolve_call (12 samples, 0.20%)</title><rect x="3.9844%" y="565" width="0.1952%" height="15" fill="rgb(231,73,38)"/><text x="4.2344%" y="575.50"></text></g><g><title>&lt;spacelox_vm::vm::VmExecutor as spacelox_core::managed::Trace&gt;::trace (25 samples, 0.41%)</title><rect x="4.1958%" y="565" width="0.4066%" height="15" fill="rgb(225,20,46)"/><text x="4.4458%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (25 samples, 0.41%)</title><rect x="4.1958%" y="549" width="0.4066%" height="15" fill="rgb(210,31,41)"/><text x="4.4458%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (25 samples, 0.41%)</title><rect x="4.1958%" y="533" width="0.4066%" height="15" fill="rgb(221,200,47)"/><text x="4.4458%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (25 samples, 0.41%)</title><rect x="4.1958%" y="517" width="0.4066%" height="15" fill="rgb(226,26,5)"/><text x="4.4458%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (25 samples, 0.41%)</title><rect x="4.1958%" y="501" width="0.4066%" height="15" fill="rgb(249,33,26)"/><text x="4.4458%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (25 samples, 0.41%)</title><rect x="4.1958%" y="485" width="0.4066%" height="15" fill="rgb(235,183,28)"/><text x="4.4458%" y="495.50"></text></g><g><title>&lt;spacelox_vm::vm::VmExecutor as spacelox_core::managed::Trace&gt;::trace::_{{closure}} (25 samples, 0.41%)</title><rect x="4.1958%" y="469" width="0.4066%" height="15" fill="rgb(221,5,38)"/><text x="4.4458%" y="479.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.20%)</title><rect x="4.6837%" y="421" width="0.1952%" height="15" fill="rgb(247,18,42)"/><text x="4.9337%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (12 samples, 0.20%)</title><rect x="4.6837%" y="405" width="0.1952%" height="15" fill="rgb(241,131,45)"/><text x="4.9337%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.20%)</title><rect x="4.6837%" y="389" width="0.1952%" height="15" fill="rgb(249,31,29)"/><text x="4.9337%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (18 samples, 0.29%)</title><rect x="4.6674%" y="501" width="0.2927%" height="15" fill="rgb(225,111,53)"/><text x="4.9174%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (18 samples, 0.29%)</title><rect x="4.6674%" y="485" width="0.2927%" height="15" fill="rgb(238,160,17)"/><text x="4.9174%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (18 samples, 0.29%)</title><rect x="4.6674%" y="469" width="0.2927%" height="15" fill="rgb(214,148,48)"/><text x="4.9174%" y="479.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep_nursery::_{{closure}} (18 samples, 0.29%)</title><rect x="4.6674%" y="453" width="0.2927%" height="15" fill="rgb(232,36,49)"/><text x="4.9174%" y="463.50"></text></g><g><title>core::ptr::drop_in_place (17 samples, 0.28%)</title><rect x="4.6837%" y="437" width="0.2765%" height="15" fill="rgb(209,103,24)"/><text x="4.9337%" y="447.50"></text></g><g><title>[spacelox] (49 samples, 0.80%)</title><rect x="4.1795%" y="581" width="0.7969%" height="15" fill="rgb(229,88,8)"/><text x="4.4295%" y="591.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep (21 samples, 0.34%)</title><rect x="4.6349%" y="565" width="0.3415%" height="15" fill="rgb(213,181,19)"/><text x="4.8849%" y="575.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep_nursery (19 samples, 0.31%)</title><rect x="4.6674%" y="549" width="0.3090%" height="15" fill="rgb(254,191,54)"/><text x="4.9174%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (19 samples, 0.31%)</title><rect x="4.6674%" y="533" width="0.3090%" height="15" fill="rgb(241,83,37)"/><text x="4.9174%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (19 samples, 0.31%)</title><rect x="4.6674%" y="517" width="0.3090%" height="15" fill="rgb(233,36,39)"/><text x="4.9174%" y="527.50"></text></g><g><title>&lt;spacelox_core::chunk::ByteCode as core::convert::From&lt;u8&gt;&gt;::from (165 samples, 2.68%)</title><rect x="5.0252%" y="565" width="2.6834%" height="15" fill="rgb(226,3,54)"/><text x="5.2752%" y="575.50">&lt;s..</text></g><g><title>&lt;spacelox_core::value::Closure as spacelox_core::managed::Manage&gt;::size (46 samples, 0.75%)</title><rect x="7.7086%" y="565" width="0.7481%" height="15" fill="rgb(245,192,40)"/><text x="7.9586%" y="575.50"></text></g><g><title>&lt;spacelox_core::value::Closure as spacelox_core::managed::Trace&gt;::trace (22 samples, 0.36%)</title><rect x="8.4567%" y="565" width="0.3578%" height="15" fill="rgb(238,167,29)"/><text x="8.7067%" y="575.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.26%)</title><rect x="8.8632%" y="565" width="0.2602%" height="15" fill="rgb(232,182,51)"/><text x="9.1132%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (25 samples, 0.41%)</title><rect x="9.1234%" y="565" width="0.4066%" height="15" fill="rgb(231,60,39)"/><text x="9.3734%" y="575.50"></text></g><g><title>_int_free (18 samples, 0.29%)</title><rect x="9.5300%" y="565" width="0.2927%" height="15" fill="rgb(208,69,12)"/><text x="9.7800%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (51 samples, 0.83%)</title><rect x="9.8715%" y="565" width="0.8294%" height="15" fill="rgb(235,93,37)"/><text x="10.1215%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.11%)</title><rect x="10.7335%" y="565" width="0.1138%" height="15" fill="rgb(213,116,39)"/><text x="10.9835%" y="575.50"></text></g><g><title>spacelox_core::value::Value::trace (44 samples, 0.72%)</title><rect x="11.0424%" y="565" width="0.7156%" height="15" fill="rgb(222,207,29)"/><text x="11.2924%" y="575.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::size (26 samples, 0.42%)</title><rect x="12.5224%" y="549" width="0.4228%" height="15" fill="rgb(206,96,30)"/><text x="12.7724%" y="559.50"></text></g><g><title>spacelox_vm::memory::Gc::allocate (74 samples, 1.20%)</title><rect x="11.7580%" y="565" width="1.2034%" height="15" fill="rgb(218,138,4)"/><text x="12.0080%" y="575.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::call (15 samples, 0.24%)</title><rect x="12.9615%" y="565" width="0.2439%" height="15" fill="rgb(250,191,14)"/><text x="13.2115%" y="575.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::close_upvalues (65 samples, 1.06%)</title><rect x="13.2054%" y="565" width="1.0571%" height="15" fill="rgb(239,60,40)"/><text x="13.4554%" y="575.50"></text></g><g><title>[unknown] (627 samples, 10.20%)</title><rect x="4.9764%" y="581" width="10.1968%" height="15" fill="rgb(206,27,48)"/><text x="5.2264%" y="591.50">[unknown]</text></g><g><title>spacelox_vm::vm::VmExecutor::resolve_call (56 samples, 0.91%)</title><rect x="14.2625%" y="565" width="0.9107%" height="15" fill="rgb(225,35,8)"/><text x="14.5125%" y="575.50"></text></g><g><title>[unknown] (15 samples, 0.24%)</title><rect x="27.2565%" y="389" width="0.2439%" height="15" fill="rgb(250,213,24)"/><text x="27.5065%" y="399.50"></text></g><g><title>[unknown] (15 samples, 0.24%)</title><rect x="27.2565%" y="373" width="0.2439%" height="15" fill="rgb(247,123,22)"/><text x="27.5065%" y="383.50"></text></g><g><title>[unknown] (15 samples, 0.24%)</title><rect x="27.2565%" y="357" width="0.2439%" height="15" fill="rgb(231,138,38)"/><text x="27.5065%" y="367.50"></text></g><g><title>[unknown] (15 samples, 0.24%)</title><rect x="27.2565%" y="341" width="0.2439%" height="15" fill="rgb(231,145,46)"/><text x="27.5065%" y="351.50"></text></g><g><title>[unknown] (14 samples, 0.23%)</title><rect x="27.2727%" y="325" width="0.2277%" height="15" fill="rgb(251,118,11)"/><text x="27.5227%" y="335.50"></text></g><g><title>[unknown] (14 samples, 0.23%)</title><rect x="27.2727%" y="309" width="0.2277%" height="15" fill="rgb(217,147,25)"/><text x="27.5227%" y="319.50"></text></g><g><title>[unknown] (14 samples, 0.23%)</title><rect x="27.2727%" y="293" width="0.2277%" height="15" fill="rgb(247,81,37)"/><text x="27.5227%" y="303.50"></text></g><g><title>[unknown] (14 samples, 0.23%)</title><rect x="27.2727%" y="277" width="0.2277%" height="15" fill="rgb(209,12,38)"/><text x="27.5227%" y="287.50"></text></g><g><title>[unknown] (14 samples, 0.23%)</title><rect x="27.2727%" y="261" width="0.2277%" height="15" fill="rgb(227,1,9)"/><text x="27.5227%" y="271.50"></text></g><g><title>[unknown] (12 samples, 0.20%)</title><rect x="27.3053%" y="245" width="0.1952%" height="15" fill="rgb(248,47,43)"/><text x="27.5553%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (65 samples, 1.06%)</title><rect x="28.6876%" y="373" width="1.0571%" height="15" fill="rgb(221,10,30)"/><text x="28.9376%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (65 samples, 1.06%)</title><rect x="28.6876%" y="357" width="1.0571%" height="15" fill="rgb(210,229,1)"/><text x="28.9376%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (65 samples, 1.06%)</title><rect x="28.6876%" y="341" width="1.0571%" height="15" fill="rgb(222,148,37)"/><text x="28.9376%" y="351.50"></text></g><g><title>&lt;spacelox_core::chunk::ByteCode as core::convert::From&lt;u8&gt;&gt;::from (35 samples, 0.57%)</title><rect x="29.7447%" y="373" width="0.5692%" height="15" fill="rgb(234,67,33)"/><text x="29.9947%" y="383.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (98 samples, 1.59%)</title><rect x="30.3139%" y="373" width="1.5938%" height="15" fill="rgb(247,98,35)"/><text x="30.5639%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::frame_instruction (280 samples, 4.55%)</title><rect x="27.5004%" y="389" width="4.5536%" height="15" fill="rgb(247,138,52)"/><text x="27.7504%" y="399.50">space..</text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="31.9076%" y="373" width="0.1464%" height="15" fill="rgb(213,79,30)"/><text x="32.1576%" y="383.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="31.9076%" y="357" width="0.1464%" height="15" fill="rgb(246,177,23)"/><text x="32.1576%" y="367.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="31.9076%" y="341" width="0.1464%" height="15" fill="rgb(230,62,27)"/><text x="32.1576%" y="351.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="31.9076%" y="325" width="0.1464%" height="15" fill="rgb(216,154,8)"/><text x="32.1576%" y="335.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="31.9076%" y="309" width="0.1464%" height="15" fill="rgb(244,35,45)"/><text x="32.1576%" y="319.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="31.9076%" y="293" width="0.1464%" height="15" fill="rgb(251,115,12)"/><text x="32.1576%" y="303.50"></text></g><g><title>[unknown] (9 samples, 0.15%)</title><rect x="31.9076%" y="277" width="0.1464%" height="15" fill="rgb(240,54,50)"/><text x="32.1576%" y="287.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="31.9239%" y="261" width="0.1301%" height="15" fill="rgb(233,84,52)"/><text x="32.1739%" y="271.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="31.9239%" y="245" width="0.1301%" height="15" fill="rgb(207,117,47)"/><text x="32.1739%" y="255.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::pop (51 samples, 0.83%)</title><rect x="32.8997%" y="373" width="0.8294%" height="15" fill="rgb(249,43,39)"/><text x="33.1497%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_add (111 samples, 1.81%)</title><rect x="32.0540%" y="389" width="1.8052%" height="15" fill="rgb(209,38,44)"/><text x="32.3040%" y="399.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor::push (8 samples, 0.13%)</title><rect x="33.7291%" y="373" width="0.1301%" height="15" fill="rgb(236,212,23)"/><text x="33.9791%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::set_val (8 samples, 0.13%)</title><rect x="33.7291%" y="357" width="0.1301%" height="15" fill="rgb(242,79,21)"/><text x="33.9791%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (18 samples, 0.29%)</title><rect x="37.1117%" y="357" width="0.2927%" height="15" fill="rgb(211,96,35)"/><text x="37.3617%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (18 samples, 0.29%)</title><rect x="37.1117%" y="341" width="0.2927%" height="15" fill="rgb(253,215,40)"/><text x="37.3617%" y="351.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.11%)</title><rect x="37.4045%" y="357" width="0.1138%" height="15" fill="rgb(211,81,21)"/><text x="37.6545%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (7 samples, 0.11%)</title><rect x="38.8518%" y="245" width="0.1138%" height="15" fill="rgb(208,190,38)"/><text x="39.1018%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (38 samples, 0.62%)</title><rect x="38.9819%" y="245" width="0.6180%" height="15" fill="rgb(235,213,38)"/><text x="39.2319%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.62%)</title><rect x="38.9819%" y="229" width="0.6180%" height="15" fill="rgb(237,122,38)"/><text x="39.2319%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (23 samples, 0.37%)</title><rect x="39.2259%" y="213" width="0.3740%" height="15" fill="rgb(244,218,35)"/><text x="39.4759%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (59 samples, 0.96%)</title><rect x="38.8356%" y="277" width="0.9595%" height="15" fill="rgb(240,68,47)"/><text x="39.0856%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (59 samples, 0.96%)</title><rect x="38.8356%" y="261" width="0.9595%" height="15" fill="rgb(210,16,53)"/><text x="39.0856%" y="271.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::as_slice (12 samples, 0.20%)</title><rect x="39.5999%" y="245" width="0.1952%" height="15" fill="rgb(235,124,12)"/><text x="39.8499%" y="255.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::make_slice (12 samples, 0.20%)</title><rect x="39.5999%" y="229" width="0.1952%" height="15" fill="rgb(224,169,11)"/><text x="39.8499%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (17 samples, 0.28%)</title><rect x="40.5269%" y="229" width="0.2765%" height="15" fill="rgb(250,166,2)"/><text x="40.7769%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (17 samples, 0.28%)</title><rect x="40.5269%" y="213" width="0.2765%" height="15" fill="rgb(242,216,29)"/><text x="40.7769%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (146 samples, 2.37%)</title><rect x="38.4453%" y="325" width="2.3744%" height="15" fill="rgb(230,116,27)"/><text x="38.6953%" y="335.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (145 samples, 2.36%)</title><rect x="38.4615%" y="309" width="2.3581%" height="15" fill="rgb(228,99,48)"/><text x="38.7115%" y="319.50">a..</text></g><g><title>alloc::slice::hack::to_vec (145 samples, 2.36%)</title><rect x="38.4615%" y="293" width="2.3581%" height="15" fill="rgb(253,11,6)"/><text x="38.7115%" y="303.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (63 samples, 1.02%)</title><rect x="39.7951%" y="277" width="1.0246%" height="15" fill="rgb(247,143,39)"/><text x="40.0451%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (34 samples, 0.55%)</title><rect x="40.2667%" y="261" width="0.5529%" height="15" fill="rgb(236,97,10)"/><text x="40.5167%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 0.55%)</title><rect x="40.2667%" y="245" width="0.5529%" height="15" fill="rgb(233,208,19)"/><text x="40.5167%" y="255.50"></text></g><g><title>&lt;spacelox_core::value::Closure as core::clone::Clone&gt;::clone (165 samples, 2.68%)</title><rect x="38.2013%" y="341" width="2.6834%" height="15" fill="rgb(216,164,2)"/><text x="38.4513%" y="351.50">&lt;s..</text></g><g><title>_int_malloc (148 samples, 2.41%)</title><rect x="44.1698%" y="245" width="2.4069%" height="15" fill="rgb(220,129,5)"/><text x="44.4198%" y="255.50">_i..</text></g><g><title>tcache_put (48 samples, 0.78%)</title><rect x="45.7961%" y="229" width="0.7806%" height="15" fill="rgb(242,17,10)"/><text x="46.0461%" y="239.50"></text></g><g><title>checked_request2size (75 samples, 1.22%)</title><rect x="46.5767%" y="245" width="1.2197%" height="15" fill="rgb(242,107,0)"/><text x="46.8267%" y="255.50"></text></g><g><title>__GI___libc_malloc (359 samples, 5.84%)</title><rect x="42.3483%" y="261" width="5.8383%" height="15" fill="rgb(251,28,31)"/><text x="42.5983%" y="271.50">__GI___..</text></g><g><title>tcache_get (24 samples, 0.39%)</title><rect x="47.7964%" y="245" width="0.3903%" height="15" fill="rgb(233,223,10)"/><text x="48.0464%" y="255.50"></text></g><g><title>__rdl_alloc (44 samples, 0.72%)</title><rect x="48.1867%" y="261" width="0.7156%" height="15" fill="rgb(215,21,27)"/><text x="48.4367%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (43 samples, 0.70%)</title><rect x="48.2030%" y="245" width="0.6993%" height="15" fill="rgb(232,23,21)"/><text x="48.4530%" y="255.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (496 samples, 8.07%)</title><rect x="41.3563%" y="325" width="8.0664%" height="15" fill="rgb(244,5,23)"/><text x="41.6063%" y="335.50">alloc::boxe..</text></g><g><title>alloc::alloc::exchange_malloc (435 samples, 7.07%)</title><rect x="42.3483%" y="309" width="7.0743%" height="15" fill="rgb(226,81,46)"/><text x="42.5983%" y="319.50">alloc::al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (435 samples, 7.07%)</title><rect x="42.3483%" y="293" width="7.0743%" height="15" fill="rgb(247,70,30)"/><text x="42.5983%" y="303.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::alloc (435 samples, 7.07%)</title><rect x="42.3483%" y="277" width="7.0743%" height="15" fill="rgb(212,68,19)"/><text x="42.5983%" y="287.50">alloc::al..</text></g><g><title>__rust_alloc (32 samples, 0.52%)</title><rect x="48.9023%" y="261" width="0.5204%" height="15" fill="rgb(240,187,13)"/><text x="49.1523%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (16 samples, 0.26%)</title><rect x="49.9268%" y="309" width="0.2602%" height="15" fill="rgb(223,113,26)"/><text x="50.1768%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16 samples, 0.26%)</title><rect x="49.9268%" y="293" width="0.2602%" height="15" fill="rgb(206,192,2)"/><text x="50.1768%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (53 samples, 0.86%)</title><rect x="49.4227%" y="325" width="0.8619%" height="15" fill="rgb(241,108,4)"/><text x="49.6727%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (41 samples, 0.67%)</title><rect x="50.2846%" y="325" width="0.6668%" height="15" fill="rgb(247,173,49)"/><text x="50.5346%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (41 samples, 0.67%)</title><rect x="50.2846%" y="309" width="0.6668%" height="15" fill="rgb(224,114,35)"/><text x="50.5346%" y="319.50"></text></g><g><title>core::cell::BorrowRefMut::new (41 samples, 0.67%)</title><rect x="50.2846%" y="293" width="0.6668%" height="15" fill="rgb(245,159,27)"/><text x="50.5346%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (25 samples, 0.41%)</title><rect x="50.5448%" y="277" width="0.4066%" height="15" fill="rgb(245,172,44)"/><text x="50.7948%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (25 samples, 0.41%)</title><rect x="50.5448%" y="261" width="0.4066%" height="15" fill="rgb(236,23,11)"/><text x="50.7948%" y="271.50"></text></g><g><title>core::mem::replace (25 samples, 0.41%)</title><rect x="50.5448%" y="245" width="0.4066%" height="15" fill="rgb(205,117,38)"/><text x="50.7948%" y="255.50"></text></g><g><title>core::mem::swap (25 samples, 0.41%)</title><rect x="50.5448%" y="229" width="0.4066%" height="15" fill="rgb(237,72,25)"/><text x="50.7948%" y="239.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (25 samples, 0.41%)</title><rect x="50.5448%" y="213" width="0.4066%" height="15" fill="rgb(244,70,9)"/><text x="50.7948%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.41%)</title><rect x="50.5448%" y="197" width="0.4066%" height="15" fill="rgb(217,125,39)"/><text x="50.7948%" y="207.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::new (56 samples, 0.91%)</title><rect x="50.9839%" y="325" width="0.9107%" height="15" fill="rgb(235,36,10)"/><text x="51.2339%" y="335.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="51.7645%" y="309" width="0.1301%" height="15" fill="rgb(251,123,47)"/><text x="52.0145%" y="319.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="51.7645%" y="293" width="0.1301%" height="15" fill="rgb(221,13,13)"/><text x="52.0145%" y="303.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="51.7645%" y="277" width="0.1301%" height="15" fill="rgb(238,131,9)"/><text x="52.0145%" y="287.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="51.7645%" y="261" width="0.1301%" height="15" fill="rgb(211,50,8)"/><text x="52.0145%" y="271.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="51.7645%" y="245" width="0.1301%" height="15" fill="rgb(245,182,24)"/><text x="52.0145%" y="255.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="51.7645%" y="229" width="0.1301%" height="15" fill="rgb(242,14,37)"/><text x="52.0145%" y="239.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="51.7645%" y="213" width="0.1301%" height="15" fill="rgb(246,228,12)"/><text x="52.0145%" y="223.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="51.7645%" y="197" width="0.1301%" height="15" fill="rgb(213,55,15)"/><text x="52.0145%" y="207.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="51.7645%" y="181" width="0.1301%" height="15" fill="rgb(209,9,3)"/><text x="52.0145%" y="191.50"></text></g><g><title>[unknown] (8 samples, 0.13%)</title><rect x="51.7645%" y="165" width="0.1301%" height="15" fill="rgb(230,59,30)"/><text x="52.0145%" y="175.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.37%)</title><rect x="52.1060%" y="245" width="0.3740%" height="15" fill="rgb(209,121,21)"/><text x="52.3560%" y="255.50"></text></g><g><title>&lt;spacelox_core::value::Fun as spacelox_core::managed::Trace&gt;::trace (11 samples, 0.18%)</title><rect x="53.0981%" y="149" width="0.1789%" height="15" fill="rgb(220,109,13)"/><text x="53.3481%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (11 samples, 0.18%)</title><rect x="53.0981%" y="133" width="0.1789%" height="15" fill="rgb(232,18,1)"/><text x="53.3481%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (11 samples, 0.18%)</title><rect x="53.0981%" y="117" width="0.1789%" height="15" fill="rgb(215,41,42)"/><text x="53.3481%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (11 samples, 0.18%)</title><rect x="53.0981%" y="101" width="0.1789%" height="15" fill="rgb(224,123,36)"/><text x="53.3481%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (8 samples, 0.13%)</title><rect x="53.1469%" y="85" width="0.1301%" height="15" fill="rgb(240,125,3)"/><text x="53.3969%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8 samples, 0.13%)</title><rect x="53.1469%" y="69" width="0.1301%" height="15" fill="rgb(205,98,50)"/><text x="53.3969%" y="79.50"></text></g><g><title>&lt;spacelox_core::value::Fun as spacelox_core::managed::Trace&gt;::trace::_{{closure}} (8 samples, 0.13%)</title><rect x="53.1469%" y="53" width="0.1301%" height="15" fill="rgb(205,185,37)"/><text x="53.3969%" y="63.50"></text></g><g><title>spacelox_core::value::Value::trace (8 samples, 0.13%)</title><rect x="53.1469%" y="37" width="0.1301%" height="15" fill="rgb(238,207,15)"/><text x="53.3969%" y="47.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as spacelox_core::managed::Trace&gt;::trace (29 samples, 0.47%)</title><rect x="52.8541%" y="165" width="0.4716%" height="15" fill="rgb(213,199,42)"/><text x="53.1041%" y="175.50"></text></g><g><title>&lt;spacelox_core::value::Closure as spacelox_core::managed::Trace&gt;::trace (41 samples, 0.67%)</title><rect x="52.6915%" y="181" width="0.6668%" height="15" fill="rgb(235,201,11)"/><text x="52.9415%" y="191.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::mark (11 samples, 0.18%)</title><rect x="53.3583%" y="181" width="0.1789%" height="15" fill="rgb(207,46,11)"/><text x="53.6083%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (11 samples, 0.18%)</title><rect x="53.3583%" y="165" width="0.1789%" height="15" fill="rgb(241,35,35)"/><text x="53.6083%" y="175.50"></text></g><g><title>core::mem::replace (11 samples, 0.18%)</title><rect x="53.3583%" y="149" width="0.1789%" height="15" fill="rgb(243,32,47)"/><text x="53.6083%" y="159.50"></text></g><g><title>core::mem::swap (11 samples, 0.18%)</title><rect x="53.3583%" y="133" width="0.1789%" height="15" fill="rgb(247,202,23)"/><text x="53.6083%" y="143.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (11 samples, 0.18%)</title><rect x="53.3583%" y="117" width="0.1789%" height="15" fill="rgb(219,102,11)"/><text x="53.6083%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.18%)</title><rect x="53.3583%" y="101" width="0.1789%" height="15" fill="rgb(243,110,44)"/><text x="53.6083%" y="111.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as spacelox_core::managed::Trace&gt;::trace (69 samples, 1.12%)</title><rect x="52.5126%" y="197" width="1.1221%" height="15" fill="rgb(222,74,54)"/><text x="52.7626%" y="207.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as spacelox_core::managed::Trace&gt;::trace (8 samples, 0.13%)</title><rect x="54.5942%" y="149" width="0.1301%" height="15" fill="rgb(216,99,12)"/><text x="54.8442%" y="159.50"></text></g><g><title>&lt;spacelox_core::value::Closure as spacelox_core::managed::Trace&gt;::trace (9 samples, 0.15%)</title><rect x="54.5942%" y="165" width="0.1464%" height="15" fill="rgb(226,22,26)"/><text x="54.8442%" y="175.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as spacelox_core::managed::Trace&gt;::trace (19 samples, 0.31%)</title><rect x="54.5292%" y="181" width="0.3090%" height="15" fill="rgb(217,163,10)"/><text x="54.7792%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (178 samples, 2.89%)</title><rect x="52.0085%" y="293" width="2.8948%" height="15" fill="rgb(213,25,53)"/><text x="52.2585%" y="303.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (178 samples, 2.89%)</title><rect x="52.0085%" y="277" width="2.8948%" height="15" fill="rgb(252,105,26)"/><text x="52.2585%" y="287.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (178 samples, 2.89%)</title><rect x="52.0085%" y="261" width="2.8948%" height="15" fill="rgb(220,39,43)"/><text x="52.2585%" y="271.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (148 samples, 2.41%)</title><rect x="52.4963%" y="245" width="2.4069%" height="15" fill="rgb(229,68,48)"/><text x="52.7463%" y="255.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (148 samples, 2.41%)</title><rect x="52.4963%" y="229" width="2.4069%" height="15" fill="rgb(252,8,32)"/><text x="52.7463%" y="239.50">co..</text></g><g><title>&lt;spacelox_vm::vm::VmExecutor as spacelox_core::managed::Trace&gt;::trace::_{{closure}} (148 samples, 2.41%)</title><rect x="52.4963%" y="213" width="2.4069%" height="15" fill="rgb(223,20,43)"/><text x="52.7463%" y="223.50">&lt;s..</text></g><g><title>spacelox_core::value::Value::trace (78 samples, 1.27%)</title><rect x="53.6347%" y="197" width="1.2685%" height="15" fill="rgb(229,81,49)"/><text x="53.8847%" y="207.50"></text></g><g><title>&lt;spacelox_vm::vm::VmExecutor as spacelox_core::managed::Trace&gt;::trace (182 samples, 2.96%)</title><rect x="51.9759%" y="309" width="2.9598%" height="15" fill="rgb(236,28,36)"/><text x="52.2259%" y="319.50">&lt;sp..</text></g><g><title>alloc::alloc::box_free (28 samples, 0.46%)</title><rect x="55.0984%" y="213" width="0.4554%" height="15" fill="rgb(249,185,26)"/><text x="55.3484%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (24 samples, 0.39%)</title><rect x="55.1634%" y="197" width="0.3903%" height="15" fill="rgb(249,174,33)"/><text x="55.4134%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.39%)</title><rect x="55.1634%" y="181" width="0.3903%" height="15" fill="rgb(233,201,37)"/><text x="55.4134%" y="191.50"></text></g><g><title>_int_free (19 samples, 0.31%)</title><rect x="55.2448%" y="165" width="0.3090%" height="15" fill="rgb(221,78,26)"/><text x="55.4948%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (32 samples, 0.52%)</title><rect x="55.0821%" y="261" width="0.5204%" height="15" fill="rgb(250,127,30)"/><text x="55.3321%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (32 samples, 0.52%)</title><rect x="55.0821%" y="245" width="0.5204%" height="15" fill="rgb(230,49,44)"/><text x="55.3321%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (32 samples, 0.52%)</title><rect x="55.0821%" y="229" width="0.5204%" height="15" fill="rgb(229,67,23)"/><text x="55.3321%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::retain (49 samples, 0.80%)</title><rect x="54.9683%" y="277" width="0.7969%" height="15" fill="rgb(249,83,47)"/><text x="55.2183%" y="287.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep_full::_{{closure}} (8 samples, 0.13%)</title><rect x="55.6351%" y="261" width="0.1301%" height="15" fill="rgb(215,43,3)"/><text x="55.8851%" y="271.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::unmark (7 samples, 0.11%)</title><rect x="55.6513%" y="245" width="0.1138%" height="15" fill="rgb(238,154,13)"/><text x="55.9013%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (7 samples, 0.11%)</title><rect x="55.6513%" y="229" width="0.1138%" height="15" fill="rgb(219,56,2)"/><text x="55.9013%" y="239.50"></text></g><g><title>core::mem::replace (7 samples, 0.11%)</title><rect x="55.6513%" y="213" width="0.1138%" height="15" fill="rgb(233,0,4)"/><text x="55.9013%" y="223.50"></text></g><g><title>alloc::alloc::box_free (55 samples, 0.89%)</title><rect x="55.8953%" y="165" width="0.8945%" height="15" fill="rgb(235,30,7)"/><text x="56.1453%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (52 samples, 0.85%)</title><rect x="55.9441%" y="149" width="0.8457%" height="15" fill="rgb(250,79,13)"/><text x="56.1941%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (52 samples, 0.85%)</title><rect x="55.9441%" y="133" width="0.8457%" height="15" fill="rgb(211,146,34)"/><text x="56.1941%" y="143.50"></text></g><g><title>_int_free (39 samples, 0.63%)</title><rect x="56.1555%" y="117" width="0.6342%" height="15" fill="rgb(228,22,38)"/><text x="56.4055%" y="127.50"></text></g><g><title>core::ptr::drop_in_place (59 samples, 0.96%)</title><rect x="55.8953%" y="181" width="0.9595%" height="15" fill="rgb(235,168,5)"/><text x="56.1453%" y="191.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep_full (118 samples, 1.92%)</title><rect x="54.9520%" y="293" width="1.9190%" height="15" fill="rgb(221,155,16)"/><text x="55.2020%" y="303.50">s..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (68 samples, 1.11%)</title><rect x="55.7652%" y="277" width="1.1059%" height="15" fill="rgb(215,215,53)"/><text x="56.0152%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (67 samples, 1.09%)</title><rect x="55.7814%" y="261" width="1.0896%" height="15" fill="rgb(223,4,10)"/><text x="56.0314%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (67 samples, 1.09%)</title><rect x="55.7814%" y="245" width="1.0896%" height="15" fill="rgb(234,103,6)"/><text x="56.0314%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (63 samples, 1.02%)</title><rect x="55.8465%" y="229" width="1.0246%" height="15" fill="rgb(227,97,0)"/><text x="56.0965%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (63 samples, 1.02%)</title><rect x="55.8465%" y="213" width="1.0246%" height="15" fill="rgb(234,150,53)"/><text x="56.0965%" y="223.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep_full::_{{closure}} (63 samples, 1.02%)</title><rect x="55.8465%" y="197" width="1.0246%" height="15" fill="rgb(228,201,54)"/><text x="56.0965%" y="207.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.41%)</title><rect x="57.0337%" y="213" width="0.4066%" height="15" fill="rgb(222,22,37)"/><text x="57.2837%" y="223.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (9 samples, 0.15%)</title><rect x="57.2939%" y="197" width="0.1464%" height="15" fill="rgb(237,53,32)"/><text x="57.5439%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (8 samples, 0.13%)</title><rect x="57.3101%" y="181" width="0.1301%" height="15" fill="rgb(233,25,53)"/><text x="57.5601%" y="191.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.52%)</title><rect x="57.0337%" y="229" width="0.5204%" height="15" fill="rgb(210,40,34)"/><text x="57.2837%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.11%)</title><rect x="57.4402%" y="213" width="0.1138%" height="15" fill="rgb(241,220,44)"/><text x="57.6902%" y="223.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.20%)</title><rect x="57.5541%" y="229" width="0.1952%" height="15" fill="rgb(235,28,35)"/><text x="57.8041%" y="239.50"></text></g><g><title>__GI___libc_free (52 samples, 0.85%)</title><rect x="58.3672%" y="117" width="0.8457%" height="15" fill="rgb(210,56,17)"/><text x="58.6172%" y="127.50"></text></g><g><title>__rust_dealloc (13 samples, 0.21%)</title><rect x="59.2942%" y="117" width="0.2114%" height="15" fill="rgb(224,130,29)"/><text x="59.5442%" y="127.50"></text></g><g><title>alloc::alloc::box_free (281 samples, 4.57%)</title><rect x="58.0094%" y="165" width="4.5698%" height="15" fill="rgb(235,212,8)"/><text x="58.2594%" y="175.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (259 samples, 4.21%)</title><rect x="58.3672%" y="149" width="4.2121%" height="15" fill="rgb(223,33,50)"/><text x="58.6172%" y="159.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (259 samples, 4.21%)</title><rect x="58.3672%" y="133" width="4.2121%" height="15" fill="rgb(219,149,13)"/><text x="58.6172%" y="143.50">alloc..</text></g><g><title>_int_free (189 samples, 3.07%)</title><rect x="59.5056%" y="117" width="3.0737%" height="15" fill="rgb(250,156,29)"/><text x="59.7556%" y="127.50">_in..</text></g><g><title>free_perturb (9 samples, 0.15%)</title><rect x="62.4329%" y="101" width="0.1464%" height="15" fill="rgb(216,193,19)"/><text x="62.6829%" y="111.50"></text></g><g><title>core::ptr::drop_in_place (310 samples, 5.04%)</title><rect x="57.9932%" y="181" width="5.0415%" height="15" fill="rgb(216,135,14)"/><text x="58.2432%" y="191.50">core::..</text></g><g><title>core::ptr::drop_in_place (28 samples, 0.46%)</title><rect x="62.5793%" y="165" width="0.4554%" height="15" fill="rgb(241,47,5)"/><text x="62.8293%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.20%)</title><rect x="62.8395%" y="149" width="0.1952%" height="15" fill="rgb(233,42,35)"/><text x="63.0895%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.18%)</title><rect x="62.8557%" y="133" width="0.1789%" height="15" fill="rgb(231,13,6)"/><text x="63.1057%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.18%)</title><rect x="62.8557%" y="117" width="0.1789%" height="15" fill="rgb(207,181,40)"/><text x="63.1057%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.18%)</title><rect x="62.8557%" y="101" width="0.1789%" height="15" fill="rgb(254,173,49)"/><text x="63.1057%" y="111.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::marked (8 samples, 0.13%)</title><rect x="63.0346%" y="181" width="0.1301%" height="15" fill="rgb(221,1,38)"/><text x="63.2846%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (8 samples, 0.13%)</title><rect x="63.0346%" y="165" width="0.1301%" height="15" fill="rgb(206,124,46)"/><text x="63.2846%" y="175.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::unmark (25 samples, 0.41%)</title><rect x="63.1647%" y="181" width="0.4066%" height="15" fill="rgb(249,21,11)"/><text x="63.4147%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (25 samples, 0.41%)</title><rect x="63.1647%" y="165" width="0.4066%" height="15" fill="rgb(222,201,40)"/><text x="63.4147%" y="175.50"></text></g><g><title>core::mem::replace (25 samples, 0.41%)</title><rect x="63.1647%" y="149" width="0.4066%" height="15" fill="rgb(235,61,29)"/><text x="63.4147%" y="159.50"></text></g><g><title>core::mem::swap (25 samples, 0.41%)</title><rect x="63.1647%" y="133" width="0.4066%" height="15" fill="rgb(219,207,3)"/><text x="63.4147%" y="143.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (25 samples, 0.41%)</title><rect x="63.1647%" y="117" width="0.4066%" height="15" fill="rgb(222,56,46)"/><text x="63.4147%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.41%)</title><rect x="63.1647%" y="101" width="0.4066%" height="15" fill="rgb(239,76,54)"/><text x="63.4147%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (438 samples, 7.12%)</title><rect x="56.9198%" y="245" width="7.1231%" height="15" fill="rgb(231,124,27)"/><text x="57.1698%" y="255.50">core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (387 samples, 6.29%)</title><rect x="57.7492%" y="229" width="6.2937%" height="15" fill="rgb(249,195,6)"/><text x="57.9992%" y="239.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (387 samples, 6.29%)</title><rect x="57.7492%" y="213" width="6.2937%" height="15" fill="rgb(237,174,47)"/><text x="57.9992%" y="223.50">core::it..</text></g><g><title>spacelox_vm::memory::Gc::sweep_nursery::_{{closure}} (387 samples, 6.29%)</title><rect x="57.7492%" y="197" width="6.2937%" height="15" fill="rgb(206,201,31)"/><text x="57.9992%" y="207.50">spacelox..</text></g><g><title>spacelox_core::managed::Allocation&lt;dyn spacelox_core::managed::Manage&gt;::size (29 samples, 0.47%)</title><rect x="63.5713%" y="181" width="0.4716%" height="15" fill="rgb(231,57,52)"/><text x="63.8213%" y="191.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep (560 samples, 9.11%)</title><rect x="54.9520%" y="309" width="9.1072%" height="15" fill="rgb(248,177,22)"/><text x="55.2020%" y="319.50">spacelox_vm::..</text></g><g><title>spacelox_vm::memory::Gc::sweep_nursery (442 samples, 7.19%)</title><rect x="56.8710%" y="293" width="7.1882%" height="15" fill="rgb(215,211,37)"/><text x="57.1210%" y="303.50">spacelox_v..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (439 samples, 7.14%)</title><rect x="56.9198%" y="277" width="7.1394%" height="15" fill="rgb(241,128,51)"/><text x="57.1698%" y="287.50">core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (439 samples, 7.14%)</title><rect x="56.9198%" y="261" width="7.1394%" height="15" fill="rgb(227,165,31)"/><text x="57.1698%" y="271.50">core::iter..</text></g><g><title>spacelox_vm::memory::Gc::clone_managed (1,641 samples, 26.69%)</title><rect x="37.5833%" y="357" width="26.6873%" height="15" fill="rgb(228,167,24)"/><text x="37.8333%" y="367.50">spacelox_vm::memory::Gc::clone_managed</text></g><g><title>spacelox_vm::memory::Gc::allocate (1,436 samples, 23.35%)</title><rect x="40.9172%" y="341" width="23.3534%" height="15" fill="rgb(228,143,12)"/><text x="41.1672%" y="351.50">spacelox_vm::memory::Gc::allocate</text></g><g><title>spacelox_vm::memory::Gc::collect_garbage (759 samples, 12.34%)</title><rect x="51.9271%" y="325" width="12.3435%" height="15" fill="rgb(249,149,8)"/><text x="52.1771%" y="335.50">spacelox_vm::memor..</text></g><g><title>spacelox_vm::memory::Gc::sweep_string_cache (13 samples, 0.21%)</title><rect x="64.0592%" y="309" width="0.2114%" height="15" fill="rgb(243,35,44)"/><text x="64.3092%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::retain (13 samples, 0.21%)</title><rect x="64.0592%" y="293" width="0.2114%" height="15" fill="rgb(246,89,9)"/><text x="64.3092%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::retain (13 samples, 0.21%)</title><rect x="64.0592%" y="277" width="0.2114%" height="15" fill="rgb(233,213,13)"/><text x="64.3092%" y="287.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep_string_cache::_{{closure}} (7 samples, 0.11%)</title><rect x="64.1568%" y="261" width="0.1138%" height="15" fill="rgb(233,141,41)"/><text x="64.4068%" y="271.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::marked (7 samples, 0.11%)</title><rect x="64.1568%" y="245" width="0.1138%" height="15" fill="rgb(239,167,4)"/><text x="64.4068%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (7 samples, 0.11%)</title><rect x="64.1568%" y="229" width="0.1138%" height="15" fill="rgb(209,217,16)"/><text x="64.4068%" y="239.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::call (1,803 samples, 29.32%)</title><rect x="34.9650%" y="373" width="29.3218%" height="15" fill="rgb(219,88,35)"/><text x="35.2150%" y="383.50">spacelox_vm::vm::VmExecutor::call</text></g><g><title>spacelox_vm::vm::VmExecutor::peek (16 samples, 0.26%)</title><rect x="64.2869%" y="373" width="0.2602%" height="15" fill="rgb(220,193,23)"/><text x="64.5369%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::get_val (13 samples, 0.21%)</title><rect x="64.3357%" y="357" width="0.2114%" height="15" fill="rgb(230,90,52)"/><text x="64.5857%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (16 samples, 0.26%)</title><rect x="64.5471%" y="373" width="0.2602%" height="15" fill="rgb(252,106,19)"/><text x="64.7971%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.26%)</title><rect x="64.5471%" y="357" width="0.2602%" height="15" fill="rgb(206,74,20)"/><text x="64.7971%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (16 samples, 0.26%)</title><rect x="64.5471%" y="341" width="0.2602%" height="15" fill="rgb(230,138,44)"/><text x="64.7971%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16 samples, 0.26%)</title><rect x="64.5471%" y="325" width="0.2602%" height="15" fill="rgb(235,182,43)"/><text x="64.7971%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_call (1,966 samples, 31.97%)</title><rect x="33.8592%" y="389" width="31.9727%" height="15" fill="rgb(242,16,51)"/><text x="34.1092%" y="399.50">spacelox_vm::vm::VmExecutor::op_call</text></g><g><title>spacelox_vm::vm::VmExecutor::resolve_call (63 samples, 1.02%)</title><rect x="64.8073%" y="373" width="1.0246%" height="15" fill="rgb(248,9,4)"/><text x="65.0573%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (8 samples, 0.13%)</title><rect x="65.9619%" y="373" width="0.1301%" height="15" fill="rgb(210,31,22)"/><text x="66.2119%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (54 samples, 0.88%)</title><rect x="66.6938%" y="341" width="0.8782%" height="15" fill="rgb(239,54,39)"/><text x="66.9438%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_constant (109 samples, 1.77%)</title><rect x="65.8318%" y="389" width="1.7726%" height="15" fill="rgb(230,99,41)"/><text x="66.0818%" y="399.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor::read_constant (93 samples, 1.51%)</title><rect x="66.0920%" y="373" width="1.5124%" height="15" fill="rgb(253,106,12)"/><text x="66.3420%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (56 samples, 0.91%)</title><rect x="66.6938%" y="357" width="0.9107%" height="15" fill="rgb(213,46,41)"/><text x="66.9438%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (28 samples, 0.46%)</title><rect x="67.8484%" y="373" width="0.4554%" height="15" fill="rgb(215,133,35)"/><text x="68.0984%" y="383.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.28%)</title><rect x="68.0273%" y="357" width="0.2765%" height="15" fill="rgb(213,28,5)"/><text x="68.2773%" y="367.50"></text></g><g><title>spacelox_core::value::Value::to_string (26 samples, 0.42%)</title><rect x="68.3038%" y="357" width="0.4228%" height="15" fill="rgb(215,77,49)"/><text x="68.5538%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_string (93 samples, 1.51%)</title><rect x="68.3038%" y="373" width="1.5124%" height="15" fill="rgb(248,100,22)"/><text x="68.5538%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_constant (65 samples, 1.06%)</title><rect x="68.7591%" y="357" width="1.0571%" height="15" fill="rgb(208,67,9)"/><text x="69.0091%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (428 samples, 6.96%)</title><rect x="69.8162%" y="325" width="6.9605%" height="15" fill="rgb(219,133,21)"/><text x="70.0662%" y="335.50">hashbrown..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (428 samples, 6.96%)</title><rect x="69.8162%" y="309" width="6.9605%" height="15" fill="rgb(246,46,29)"/><text x="70.0662%" y="319.50">&lt;spacelox..</text></g><g><title>core::ptr::hash (428 samples, 6.96%)</title><rect x="69.8162%" y="293" width="6.9605%" height="15" fill="rgb(246,185,52)"/><text x="70.0662%" y="303.50">core::ptr..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (428 samples, 6.96%)</title><rect x="69.8162%" y="277" width="6.9605%" height="15" fill="rgb(252,136,11)"/><text x="70.0662%" y="287.50">core::has..</text></g><g><title>core::hash::Hasher::write_usize (428 samples, 6.96%)</title><rect x="69.8162%" y="261" width="6.9605%" height="15" fill="rgb(219,138,53)"/><text x="70.0662%" y="271.50">core::has..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (428 samples, 6.96%)</title><rect x="69.8162%" y="245" width="6.9605%" height="15" fill="rgb(211,51,23)"/><text x="70.0662%" y="255.50">&lt;fnv::Fnv..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (364 samples, 5.92%)</title><rect x="70.8570%" y="229" width="5.9197%" height="15" fill="rgb(247,221,28)"/><text x="71.1070%" y="239.50">core::nu..</text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="76.6629%" y="213" width="0.1138%" height="15" fill="rgb(251,222,45)"/><text x="76.9129%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="76.6629%" y="197" width="0.1138%" height="15" fill="rgb(217,162,53)"/><text x="76.9129%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="76.6629%" y="181" width="0.1138%" height="15" fill="rgb(229,93,14)"/><text x="76.9129%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="76.6629%" y="165" width="0.1138%" height="15" fill="rgb(209,67,49)"/><text x="76.9129%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="76.6629%" y="149" width="0.1138%" height="15" fill="rgb(213,87,29)"/><text x="76.9129%" y="159.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="76.6629%" y="133" width="0.1138%" height="15" fill="rgb(205,151,52)"/><text x="76.9129%" y="143.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="76.6629%" y="117" width="0.1138%" height="15" fill="rgb(253,215,39)"/><text x="76.9129%" y="127.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="76.6629%" y="101" width="0.1138%" height="15" fill="rgb(221,220,41)"/><text x="76.9129%" y="111.50"></text></g><g><title>[unknown] (7 samples, 0.11%)</title><rect x="76.6629%" y="85" width="0.1138%" height="15" fill="rgb(218,133,21)"/><text x="76.9129%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.50%)</title><rect x="77.4272%" y="309" width="0.5041%" height="15" fill="rgb(221,193,43)"/><text x="77.6772%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (31 samples, 0.50%)</title><rect x="77.4272%" y="293" width="0.5041%" height="15" fill="rgb(240,128,52)"/><text x="77.6772%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (30 samples, 0.49%)</title><rect x="77.4435%" y="277" width="0.4879%" height="15" fill="rgb(253,114,12)"/><text x="77.6935%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (10 samples, 0.16%)</title><rect x="77.9314%" y="309" width="0.1626%" height="15" fill="rgb(215,223,47)"/><text x="78.1814%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (10 samples, 0.16%)</title><rect x="77.9314%" y="293" width="0.1626%" height="15" fill="rgb(248,225,23)"/><text x="78.1814%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (16 samples, 0.26%)</title><rect x="78.0940%" y="309" width="0.2602%" height="15" fill="rgb(250,108,0)"/><text x="78.3440%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (16 samples, 0.26%)</title><rect x="78.0940%" y="293" width="0.2602%" height="15" fill="rgb(228,208,7)"/><text x="78.3440%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.26%)</title><rect x="78.0940%" y="277" width="0.2602%" height="15" fill="rgb(244,45,10)"/><text x="78.3440%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (73 samples, 1.19%)</title><rect x="78.3542%" y="293" width="1.1872%" height="15" fill="rgb(207,125,25)"/><text x="78.6042%" y="303.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_get_global (830 samples, 13.50%)</title><rect x="67.6045%" y="389" width="13.4981%" height="15" fill="rgb(210,195,18)"/><text x="67.8545%" y="399.50">spacelox_vm::vm::VmE..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (694 samples, 11.29%)</title><rect x="69.8162%" y="373" width="11.2864%" height="15" fill="rgb(249,80,12)"/><text x="70.0662%" y="383.50">std::collections:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (694 samples, 11.29%)</title><rect x="69.8162%" y="357" width="11.2864%" height="15" fill="rgb(221,65,9)"/><text x="70.0662%" y="367.50">hashbrown::map::H..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (694 samples, 11.29%)</title><rect x="69.8162%" y="341" width="11.2864%" height="15" fill="rgb(235,49,36)"/><text x="70.0662%" y="351.50">hashbrown::map::H..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (266 samples, 4.33%)</title><rect x="76.7767%" y="325" width="4.3259%" height="15" fill="rgb(225,32,20)"/><text x="77.0267%" y="335.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (169 samples, 2.75%)</title><rect x="78.3542%" y="309" width="2.7484%" height="15" fill="rgb(215,141,46)"/><text x="78.6042%" y="319.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (96 samples, 1.56%)</title><rect x="79.5414%" y="293" width="1.5612%" height="15" fill="rgb(250,160,47)"/><text x="79.7914%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (96 samples, 1.56%)</title><rect x="79.5414%" y="277" width="1.5612%" height="15" fill="rgb(216,222,40)"/><text x="79.7914%" y="287.50"></text></g><g><title>core::core_arch::simd::i8x16::new (96 samples, 1.56%)</title><rect x="79.5414%" y="261" width="1.5612%" height="15" fill="rgb(234,217,39)"/><text x="79.7914%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.18%)</title><rect x="83.2168%" y="357" width="0.1789%" height="15" fill="rgb(207,178,40)"/><text x="83.4668%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (11 samples, 0.18%)</title><rect x="83.2168%" y="341" width="0.1789%" height="15" fill="rgb(221,136,13)"/><text x="83.4668%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.18%)</title><rect x="83.2168%" y="325" width="0.1789%" height="15" fill="rgb(249,199,10)"/><text x="83.4668%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::current_frame (48 samples, 0.78%)</title><rect x="82.6476%" y="373" width="0.7806%" height="15" fill="rgb(249,222,13)"/><text x="82.8976%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::get_val (43 samples, 0.70%)</title><rect x="83.4282%" y="373" width="0.6993%" height="15" fill="rgb(244,185,38)"/><text x="83.6782%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.18%)</title><rect x="83.9486%" y="357" width="0.1789%" height="15" fill="rgb(236,202,9)"/><text x="84.1986%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (11 samples, 0.18%)</title><rect x="83.9486%" y="341" width="0.1789%" height="15" fill="rgb(250,229,37)"/><text x="84.1986%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.18%)</title><rect x="83.9486%" y="325" width="0.1789%" height="15" fill="rgb(206,174,23)"/><text x="84.1986%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::push (71 samples, 1.15%)</title><rect x="84.1275%" y="373" width="1.1547%" height="15" fill="rgb(211,33,43)"/><text x="84.3775%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::set_val (61 samples, 0.99%)</title><rect x="84.2901%" y="357" width="0.9920%" height="15" fill="rgb(245,58,50)"/><text x="84.5401%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.23%)</title><rect x="85.8351%" y="357" width="0.2277%" height="15" fill="rgb(244,68,36)"/><text x="86.0851%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (14 samples, 0.23%)</title><rect x="85.8351%" y="341" width="0.2277%" height="15" fill="rgb(232,229,15)"/><text x="86.0851%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (14 samples, 0.23%)</title><rect x="85.8351%" y="325" width="0.2277%" height="15" fill="rgb(254,30,23)"/><text x="86.0851%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_get_local (318 samples, 5.17%)</title><rect x="81.1026%" y="389" width="5.1716%" height="15" fill="rgb(235,160,14)"/><text x="81.3526%" y="399.50">spacel..</text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (61 samples, 0.99%)</title><rect x="85.2822%" y="373" width="0.9920%" height="15" fill="rgb(212,155,44)"/><text x="85.5322%" y="383.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.21%)</title><rect x="86.0628%" y="357" width="0.2114%" height="15" fill="rgb(226,2,50)"/><text x="86.3128%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::peek (22 samples, 0.36%)</title><rect x="86.8271%" y="373" width="0.3578%" height="15" fill="rgb(234,177,6)"/><text x="87.0771%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::get_val (11 samples, 0.18%)</title><rect x="87.0060%" y="357" width="0.1789%" height="15" fill="rgb(217,24,9)"/><text x="87.2560%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_short (29 samples, 0.47%)</title><rect x="87.1849%" y="373" width="0.4716%" height="15" fill="rgb(220,13,46)"/><text x="87.4349%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (8 samples, 0.13%)</title><rect x="87.5264%" y="357" width="0.1301%" height="15" fill="rgb(239,221,27)"/><text x="87.7764%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_jump_if_not_false (86 samples, 1.40%)</title><rect x="86.2742%" y="389" width="1.3986%" height="15" fill="rgb(222,198,25)"/><text x="86.5242%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_less (110 samples, 1.79%)</title><rect x="87.6728%" y="389" width="1.7889%" height="15" fill="rgb(211,99,13)"/><text x="87.9228%" y="399.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor::pop (53 samples, 0.86%)</title><rect x="88.5998%" y="373" width="0.8619%" height="15" fill="rgb(232,111,31)"/><text x="88.8498%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.52%)</title><rect x="91.9174%" y="357" width="0.5204%" height="15" fill="rgb(245,82,37)"/><text x="92.1674%" y="367.50"></text></g><g><title>&lt;core::slice::IterMut&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (32 samples, 0.52%)</title><rect x="91.9174%" y="341" width="0.5204%" height="15" fill="rgb(227,149,46)"/><text x="92.1674%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::retain (25 samples, 0.41%)</title><rect x="92.4866%" y="357" width="0.4066%" height="15" fill="rgb(218,36,50)"/><text x="92.7366%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (25 samples, 0.41%)</title><rect x="92.4866%" y="341" width="0.4066%" height="15" fill="rgb(226,80,48)"/><text x="92.7366%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::close_upvalues (91 samples, 1.48%)</title><rect x="91.4295%" y="373" width="1.4799%" height="15" fill="rgb(238,224,15)"/><text x="91.6795%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::current_frame (39 samples, 0.63%)</title><rect x="92.9094%" y="373" width="0.6342%" height="15" fill="rgb(241,136,10)"/><text x="93.1594%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::pop (68 samples, 1.11%)</title><rect x="93.5437%" y="373" width="1.1059%" height="15" fill="rgb(208,32,45)"/><text x="93.7937%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_return (334 samples, 5.43%)</title><rect x="89.4617%" y="389" width="5.4318%" height="15" fill="rgb(207,135,9)"/><text x="89.7117%" y="399.50">spacelo..</text></g><g><title>spacelox_vm::vm::VmExecutor::push (15 samples, 0.24%)</title><rect x="94.6495%" y="373" width="0.2439%" height="15" fill="rgb(206,86,44)"/><text x="94.8995%" y="383.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::set_val (14 samples, 0.23%)</title><rect x="94.6658%" y="357" width="0.2277%" height="15" fill="rgb(245,177,15)"/><text x="94.9158%" y="367.50"></text></g><g><title>__libc_start_main (4,984 samples, 81.05%)</title><rect x="15.2545%" y="565" width="81.0538%" height="15" fill="rgb(206,64,50)"/><text x="15.5045%" y="575.50">__libc_start_main</text></g><g><title>main (4,984 samples, 81.05%)</title><rect x="15.2545%" y="549" width="81.0538%" height="15" fill="rgb(234,36,40)"/><text x="15.5045%" y="559.50">main</text></g><g><title>std::rt::lang_start_internal (4,984 samples, 81.05%)</title><rect x="15.2545%" y="533" width="81.0538%" height="15" fill="rgb(213,64,8)"/><text x="15.5045%" y="543.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (4,984 samples, 81.05%)</title><rect x="15.2545%" y="517" width="81.0538%" height="15" fill="rgb(210,75,36)"/><text x="15.5045%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,984 samples, 81.05%)</title><rect x="15.2545%" y="501" width="81.0538%" height="15" fill="rgb(229,88,21)"/><text x="15.5045%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,984 samples, 81.05%)</title><rect x="15.2545%" y="485" width="81.0538%" height="15" fill="rgb(252,204,47)"/><text x="15.5045%" y="495.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (4,984 samples, 81.05%)</title><rect x="15.2545%" y="469" width="81.0538%" height="15" fill="rgb(208,77,27)"/><text x="15.5045%" y="479.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::rt::lang_start::_{{closure}} (4,984 samples, 81.05%)</title><rect x="15.2545%" y="453" width="81.0538%" height="15" fill="rgb(221,76,26)"/><text x="15.5045%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>spacelox::main (4,984 samples, 81.05%)</title><rect x="15.2545%" y="437" width="81.0538%" height="15" fill="rgb(225,139,18)"/><text x="15.5045%" y="447.50">spacelox::main</text></g><g><title>spacelox_vm::vm::Vm::interpret (4,984 samples, 81.05%)</title><rect x="15.2545%" y="421" width="81.0538%" height="15" fill="rgb(230,137,11)"/><text x="15.5045%" y="431.50">spacelox_vm::vm::Vm::interpret</text></g><g><title>spacelox_vm::vm::VmExecutor::run (4,984 samples, 81.05%)</title><rect x="15.2545%" y="405" width="81.0538%" height="15" fill="rgb(212,28,1)"/><text x="15.5045%" y="415.50">spacelox_vm::vm::VmExecutor::run</text></g><g><title>spacelox_vm::vm::VmExecutor::op_sub (87 samples, 1.41%)</title><rect x="94.8935%" y="389" width="1.4149%" height="15" fill="rgb(248,164,17)"/><text x="95.1435%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::pop (40 samples, 0.65%)</title><rect x="95.6578%" y="373" width="0.6505%" height="15" fill="rgb(222,171,42)"/><text x="95.9078%" y="383.50"></text></g><g><title>_start (4,985 samples, 81.07%)</title><rect x="15.2545%" y="581" width="81.0701%" height="15" fill="rgb(243,84,45)"/><text x="15.5045%" y="591.50">_start</text></g><g><title>spacelox_vm::vm::VmExecutor::frame_instruction (154 samples, 2.50%)</title><rect x="96.3246%" y="549" width="2.5045%" height="15" fill="rgb(252,49,23)"/><text x="96.5746%" y="559.50">sp..</text></g><g><title>spacelox_vm::vm::VmExecutor::op_call (9 samples, 0.15%)</title><rect x="98.8291%" y="549" width="0.1464%" height="15" fill="rgb(215,19,7)"/><text x="99.0791%" y="559.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_get_global (13 samples, 0.21%)</title><rect x="98.9754%" y="549" width="0.2114%" height="15" fill="rgb(238,81,41)"/><text x="99.2254%" y="559.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_string (13 samples, 0.21%)</title><rect x="98.9754%" y="533" width="0.2114%" height="15" fill="rgb(210,199,37)"/><text x="99.2254%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_jump_if_not_false (12 samples, 0.20%)</title><rect x="99.1869%" y="549" width="0.1952%" height="15" fill="rgb(244,192,49)"/><text x="99.4369%" y="559.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_short (12 samples, 0.20%)</title><rect x="99.1869%" y="533" width="0.1952%" height="15" fill="rgb(226,211,11)"/><text x="99.4369%" y="543.50"></text></g><g><title>all (6,149 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(236,162,54)"/><text x="0.2500%" y="623.50"></text></g><g><title>spacelox (6,145 samples, 99.93%)</title><rect x="0.0651%" y="597" width="99.9349%" height="15" fill="rgb(220,229,9)"/><text x="0.3151%" y="607.50">spacelox</text></g><g><title>spacelox_vm::vm::Vm::interpret (226 samples, 3.68%)</title><rect x="96.3246%" y="581" width="3.6754%" height="15" fill="rgb(250,87,22)"/><text x="96.5746%" y="591.50">spac..</text></g><g><title>spacelox_vm::vm::VmExecutor::run (226 samples, 3.68%)</title><rect x="96.3246%" y="565" width="3.6754%" height="15" fill="rgb(239,43,17)"/><text x="96.5746%" y="575.50">spac..</text></g><g><title>spacelox_vm::vm::VmExecutor::op_return (38 samples, 0.62%)</title><rect x="99.3820%" y="549" width="0.6180%" height="15" fill="rgb(231,177,25)"/><text x="99.6320%" y="559.50"></text></g></svg></svg>