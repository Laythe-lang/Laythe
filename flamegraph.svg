<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="613.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="613.00"> </text><svg id="frames" x="10" width="1180"><g><title>perf (5 samples, 0.38%)</title><rect x="0.0000%" y="565" width="0.3779%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="0.0000%" y="549" width="0.3779%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="0.0000%" y="533" width="0.3779%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="0.0000%" y="517" width="0.3779%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="0.0000%" y="501" width="0.3779%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="0.0000%" y="485" width="0.3779%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="0.0000%" y="469" width="0.3779%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="0.0000%" y="453" width="0.3779%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="0.0000%" y="437" width="0.3779%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.15%)</title><rect x="0.5291%" y="533" width="0.1512%" height="15" fill="rgb(220,122,19)"/><text x="0.7791%" y="543.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.15%)</title><rect x="0.6803%" y="533" width="0.1512%" height="15" fill="rgb(250,228,42)"/><text x="0.9303%" y="543.50"></text></g><g><title>_int_free (3 samples, 0.23%)</title><rect x="0.8314%" y="533" width="0.2268%" height="15" fill="rgb(240,193,28)"/><text x="1.0814%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (2 samples, 0.15%)</title><rect x="1.2094%" y="533" width="0.1512%" height="15" fill="rgb(216,20,37)"/><text x="1.4594%" y="543.50"></text></g><g><title>spacelox_vm::memory::Gc::trace::_{{closure}} (6 samples, 0.45%)</title><rect x="1.5117%" y="533" width="0.4535%" height="15" fill="rgb(206,188,39)"/><text x="1.7617%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::invoke_from_class (2 samples, 0.15%)</title><rect x="1.9652%" y="533" width="0.1512%" height="15" fill="rgb(217,207,13)"/><text x="2.2152%" y="543.50"></text></g><g><title>[[heap]] (26 samples, 1.97%)</title><rect x="0.3779%" y="549" width="1.9652%" height="15" fill="rgb(231,73,38)"/><text x="0.6279%" y="559.50">[..</text></g><g><title>unlink_chunk (3 samples, 0.23%)</title><rect x="2.1164%" y="533" width="0.2268%" height="15" fill="rgb(225,20,46)"/><text x="2.3664%" y="543.50"></text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace (2 samples, 0.15%)</title><rect x="2.4943%" y="533" width="0.1512%" height="15" fill="rgb(210,31,41)"/><text x="2.7443%" y="543.50"></text></g><g><title>_int_malloc (4 samples, 0.30%)</title><rect x="2.6455%" y="533" width="0.3023%" height="15" fill="rgb(221,200,47)"/><text x="2.8955%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (3 samples, 0.23%)</title><rect x="2.9478%" y="517" width="0.2268%" height="15" fill="rgb(226,26,5)"/><text x="3.1978%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.23%)</title><rect x="2.9478%" y="501" width="0.2268%" height="15" fill="rgb(249,33,26)"/><text x="3.1978%" y="511.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.23%)</title><rect x="2.9478%" y="485" width="0.2268%" height="15" fill="rgb(235,183,28)"/><text x="3.1978%" y="495.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.15%)</title><rect x="3.0234%" y="469" width="0.1512%" height="15" fill="rgb(221,5,38)"/><text x="3.2734%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::retain (4 samples, 0.30%)</title><rect x="2.9478%" y="533" width="0.3023%" height="15" fill="rgb(247,18,42)"/><text x="3.1978%" y="543.50"></text></g><g><title>[[stack]] (21 samples, 1.59%)</title><rect x="2.3432%" y="549" width="1.5873%" height="15" fill="rgb(241,131,45)"/><text x="2.5932%" y="559.50"></text></g><g><title>spacelox_vm::memory::Gc::trace::_{{closure}} (8 samples, 0.60%)</title><rect x="3.3258%" y="533" width="0.6047%" height="15" fill="rgb(249,31,29)"/><text x="3.5758%" y="543.50"></text></g><g><title>&lt;spacelox_core::chunk::ByteCode as core::convert::From&lt;u8&gt;&gt;::from (9 samples, 0.68%)</title><rect x="4.0060%" y="533" width="0.6803%" height="15" fill="rgb(225,111,53)"/><text x="4.2560%" y="543.50"></text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace (2 samples, 0.15%)</title><rect x="4.7619%" y="533" width="0.1512%" height="15" fill="rgb(238,160,17)"/><text x="5.0119%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.45%)</title><rect x="4.9887%" y="533" width="0.4535%" height="15" fill="rgb(214,148,48)"/><text x="5.2387%" y="543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.23%)</title><rect x="5.2154%" y="517" width="0.2268%" height="15" fill="rgb(232,36,49)"/><text x="5.4654%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.23%)</title><rect x="5.2154%" y="501" width="0.2268%" height="15" fill="rgb(209,103,24)"/><text x="5.4654%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.30%)</title><rect x="5.5178%" y="533" width="0.3023%" height="15" fill="rgb(229,88,8)"/><text x="5.7678%" y="543.50"></text></g><g><title>__rdl_alloc (2 samples, 0.15%)</title><rect x="5.8957%" y="533" width="0.1512%" height="15" fill="rgb(213,181,19)"/><text x="6.1457%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.15%)</title><rect x="5.8957%" y="517" width="0.1512%" height="15" fill="rgb(254,191,54)"/><text x="6.1457%" y="527.50"></text></g><g><title>_int_free (3 samples, 0.23%)</title><rect x="6.0469%" y="533" width="0.2268%" height="15" fill="rgb(241,83,37)"/><text x="6.2969%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.76%)</title><rect x="6.4248%" y="533" width="0.7559%" height="15" fill="rgb(233,36,39)"/><text x="6.6748%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (14 samples, 1.06%)</title><rect x="7.1807%" y="533" width="1.0582%" height="15" fill="rgb(226,3,54)"/><text x="7.4307%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (4 samples, 0.30%)</title><rect x="7.9365%" y="517" width="0.3023%" height="15" fill="rgb(245,192,40)"/><text x="8.1865%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (3 samples, 0.23%)</title><rect x="8.0121%" y="501" width="0.2268%" height="15" fill="rgb(238,167,29)"/><text x="8.2621%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (3 samples, 0.23%)</title><rect x="8.0121%" y="485" width="0.2268%" height="15" fill="rgb(232,182,51)"/><text x="8.2621%" y="495.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.23%)</title><rect x="8.0121%" y="469" width="0.2268%" height="15" fill="rgb(231,60,39)"/><text x="8.2621%" y="479.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (4 samples, 0.30%)</title><rect x="8.2389%" y="533" width="0.3023%" height="15" fill="rgb(208,69,12)"/><text x="8.4889%" y="543.50"></text></g><g><title>spacelox_vm::memory::Gc::allocate (7 samples, 0.53%)</title><rect x="8.5412%" y="533" width="0.5291%" height="15" fill="rgb(235,93,37)"/><text x="8.7912%" y="543.50"></text></g><g><title>spacelox_vm::memory::Gc::trace::_{{closure}} (9 samples, 0.68%)</title><rect x="9.0703%" y="533" width="0.6803%" height="15" fill="rgb(213,116,39)"/><text x="9.3203%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::frame_instruction (9 samples, 0.68%)</title><rect x="9.7506%" y="501" width="0.6803%" height="15" fill="rgb(222,207,29)"/><text x="10.0006%" y="511.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_get_property (2 samples, 0.15%)</title><rect x="10.4308%" y="501" width="0.1512%" height="15" fill="rgb(206,96,30)"/><text x="10.6808%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.15%)</title><rect x="10.4308%" y="485" width="0.1512%" height="15" fill="rgb(218,138,4)"/><text x="10.6808%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.15%)</title><rect x="10.4308%" y="469" width="0.1512%" height="15" fill="rgb(250,191,14)"/><text x="10.6808%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (2 samples, 0.15%)</title><rect x="10.4308%" y="453" width="0.1512%" height="15" fill="rgb(239,60,40)"/><text x="10.6808%" y="463.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_jump_if_not_false (4 samples, 0.30%)</title><rect x="10.6576%" y="501" width="0.3023%" height="15" fill="rgb(206,27,48)"/><text x="10.9076%" y="511.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_short (4 samples, 0.30%)</title><rect x="10.6576%" y="485" width="0.3023%" height="15" fill="rgb(225,35,8)"/><text x="10.9076%" y="495.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_return (3 samples, 0.23%)</title><rect x="10.9599%" y="501" width="0.2268%" height="15" fill="rgb(250,213,24)"/><text x="11.2099%" y="511.50"></text></g><g><title>spacelox_vm::vm::Vm::interpret (22 samples, 1.66%)</title><rect x="9.7506%" y="533" width="1.6629%" height="15" fill="rgb(247,123,22)"/><text x="10.0006%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::run (22 samples, 1.66%)</title><rect x="9.7506%" y="517" width="1.6629%" height="15" fill="rgb(231,138,38)"/><text x="10.0006%" y="527.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_set_property (3 samples, 0.23%)</title><rect x="11.1867%" y="501" width="0.2268%" height="15" fill="rgb(231,145,46)"/><text x="11.4367%" y="511.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_string (3 samples, 0.23%)</title><rect x="11.1867%" y="485" width="0.2268%" height="15" fill="rgb(251,118,11)"/><text x="11.4367%" y="495.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::call (3 samples, 0.23%)</title><rect x="11.4135%" y="533" width="0.2268%" height="15" fill="rgb(217,147,25)"/><text x="11.6635%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::close_upvalues (2 samples, 0.15%)</title><rect x="11.6402%" y="533" width="0.1512%" height="15" fill="rgb(247,81,37)"/><text x="11.8902%" y="543.50"></text></g><g><title>[unknown] (108 samples, 8.16%)</title><rect x="3.9305%" y="549" width="8.1633%" height="15" fill="rgb(209,12,38)"/><text x="4.1805%" y="559.50">[unknown]</text></g><g><title>spacelox_vm::vm::VmExecutor::resolve_call (3 samples, 0.23%)</title><rect x="11.8670%" y="533" width="0.2268%" height="15" fill="rgb(227,1,9)"/><text x="12.1170%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.76%)</title><rect x="19.5767%" y="309" width="0.7559%" height="15" fill="rgb(248,47,43)"/><text x="19.8267%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (23 samples, 1.74%)</title><rect x="19.5767%" y="325" width="1.7385%" height="15" fill="rgb(221,10,30)"/><text x="19.8267%" y="335.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.98%)</title><rect x="20.3326%" y="309" width="0.9826%" height="15" fill="rgb(210,229,1)"/><text x="20.5826%" y="319.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.98%)</title><rect x="20.3326%" y="293" width="0.9826%" height="15" fill="rgb(222,148,37)"/><text x="20.5826%" y="303.50"></text></g><g><title>&lt;spacelox_core::chunk::ByteCode as core::convert::From&lt;u8&gt;&gt;::from (6 samples, 0.45%)</title><rect x="21.3152%" y="325" width="0.4535%" height="15" fill="rgb(234,67,33)"/><text x="21.5652%" y="335.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (25 samples, 1.89%)</title><rect x="21.7687%" y="325" width="1.8896%" height="15" fill="rgb(247,98,35)"/><text x="22.0187%" y="335.50">&lt;..</text></g><g><title>spacelox_vm::vm::VmExecutor::frame_instruction (84 samples, 6.35%)</title><rect x="18.9720%" y="341" width="6.3492%" height="15" fill="rgb(247,138,52)"/><text x="19.2220%" y="351.50">spacelox..</text></g><g><title>spacelox_vm::vm::VmExecutor::current_frame (22 samples, 1.66%)</title><rect x="23.6584%" y="325" width="1.6629%" height="15" fill="rgb(213,79,30)"/><text x="23.9084%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.15%)</title><rect x="25.1701%" y="309" width="0.1512%" height="15" fill="rgb(246,177,23)"/><text x="25.4201%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (2 samples, 0.15%)</title><rect x="25.1701%" y="293" width="0.1512%" height="15" fill="rgb(230,62,27)"/><text x="25.4201%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.15%)</title><rect x="25.1701%" y="277" width="0.1512%" height="15" fill="rgb(216,154,8)"/><text x="25.4201%" y="287.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_add (3 samples, 0.23%)</title><rect x="25.3212%" y="341" width="0.2268%" height="15" fill="rgb(244,35,45)"/><text x="25.5712%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::push (2 samples, 0.15%)</title><rect x="25.3968%" y="325" width="0.1512%" height="15" fill="rgb(251,115,12)"/><text x="25.6468%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::set_val (2 samples, 0.15%)</title><rect x="25.3968%" y="309" width="0.1512%" height="15" fill="rgb(240,54,50)"/><text x="25.6468%" y="319.50"></text></g><g><title>spacelox_core::value::Instance::new (2 samples, 0.15%)</title><rect x="25.9259%" y="293" width="0.1512%" height="15" fill="rgb(233,84,52)"/><text x="26.1759%" y="303.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.53%)</title><rect x="26.1527%" y="213" width="0.5291%" height="15" fill="rgb(207,117,47)"/><text x="26.4027%" y="223.50"></text></g><g><title>checked_request2size (2 samples, 0.15%)</title><rect x="26.5306%" y="197" width="0.1512%" height="15" fill="rgb(249,43,39)"/><text x="26.7806%" y="207.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9 samples, 0.68%)</title><rect x="26.0771%" y="261" width="0.6803%" height="15" fill="rgb(209,38,44)"/><text x="26.3271%" y="271.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.60%)</title><rect x="26.1527%" y="245" width="0.6047%" height="15" fill="rgb(236,212,23)"/><text x="26.4027%" y="255.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.60%)</title><rect x="26.1527%" y="229" width="0.6047%" height="15" fill="rgb(242,79,21)"/><text x="26.4027%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (17 samples, 1.28%)</title><rect x="26.9841%" y="245" width="1.2850%" height="15" fill="rgb(211,96,35)"/><text x="27.2341%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (17 samples, 1.28%)</title><rect x="26.9841%" y="229" width="1.2850%" height="15" fill="rgb(253,215,40)"/><text x="27.2341%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.28%)</title><rect x="26.9841%" y="213" width="1.2850%" height="15" fill="rgb(211,81,21)"/><text x="27.2341%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (17 samples, 1.28%)</title><rect x="26.9841%" y="197" width="1.2850%" height="15" fill="rgb(208,190,38)"/><text x="27.2341%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (17 samples, 1.28%)</title><rect x="26.9841%" y="181" width="1.2850%" height="15" fill="rgb(235,213,38)"/><text x="27.2341%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 1.28%)</title><rect x="26.9841%" y="165" width="1.2850%" height="15" fill="rgb(237,122,38)"/><text x="27.2341%" y="175.50"></text></g><g><title>_int_free (17 samples, 1.28%)</title><rect x="26.9841%" y="149" width="1.2850%" height="15" fill="rgb(244,218,35)"/><text x="27.2341%" y="159.50"></text></g><g><title>malloc_consolidate (17 samples, 1.28%)</title><rect x="26.9841%" y="133" width="1.2850%" height="15" fill="rgb(240,68,47)"/><text x="27.2341%" y="143.50"></text></g><g><title>unlink_chunk (7 samples, 0.53%)</title><rect x="27.7400%" y="117" width="0.5291%" height="15" fill="rgb(210,16,53)"/><text x="27.9900%" y="127.50"></text></g><g><title>__GI___libc_free (6 samples, 0.45%)</title><rect x="28.5714%" y="133" width="0.4535%" height="15" fill="rgb(235,124,12)"/><text x="28.8214%" y="143.50"></text></g><g><title>alloc::alloc::box_free (19 samples, 1.44%)</title><rect x="28.3447%" y="165" width="1.4361%" height="15" fill="rgb(224,169,11)"/><text x="28.5947%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 1.21%)</title><rect x="28.5714%" y="149" width="1.2094%" height="15" fill="rgb(250,166,2)"/><text x="28.8214%" y="159.50"></text></g><g><title>_int_free (9 samples, 0.68%)</title><rect x="29.1005%" y="133" width="0.6803%" height="15" fill="rgb(242,216,29)"/><text x="29.3505%" y="143.50"></text></g><g><title>__GI___libc_free (9 samples, 0.68%)</title><rect x="29.9320%" y="149" width="0.6803%" height="15" fill="rgb(230,116,27)"/><text x="30.1820%" y="159.50"></text></g><g><title>_int_free (17 samples, 1.28%)</title><rect x="30.6122%" y="149" width="1.2850%" height="15" fill="rgb(228,99,48)"/><text x="30.8622%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.53%)</title><rect x="31.8972%" y="101" width="0.5291%" height="15" fill="rgb(253,11,6)"/><text x="32.1472%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (57 samples, 4.31%)</title><rect x="28.3447%" y="213" width="4.3084%" height="15" fill="rgb(247,143,39)"/><text x="28.5947%" y="223.50">alloc..</text></g><g><title>core::ptr::drop_in_place (57 samples, 4.31%)</title><rect x="28.3447%" y="197" width="4.3084%" height="15" fill="rgb(236,97,10)"/><text x="28.5947%" y="207.50">core:..</text></g><g><title>core::ptr::drop_in_place (57 samples, 4.31%)</title><rect x="28.3447%" y="181" width="4.3084%" height="15" fill="rgb(233,208,19)"/><text x="28.5947%" y="191.50">core:..</text></g><g><title>core::ptr::drop_in_place (38 samples, 2.87%)</title><rect x="29.7808%" y="165" width="2.8723%" height="15" fill="rgb(216,164,2)"/><text x="30.0308%" y="175.50">co..</text></g><g><title>core::ptr::drop_in_place (10 samples, 0.76%)</title><rect x="31.8972%" y="149" width="0.7559%" height="15" fill="rgb(220,129,5)"/><text x="32.1472%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.76%)</title><rect x="31.8972%" y="133" width="0.7559%" height="15" fill="rgb(242,17,10)"/><text x="32.1472%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.76%)</title><rect x="31.8972%" y="117" width="0.7559%" height="15" fill="rgb(242,107,0)"/><text x="32.1472%" y="127.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.23%)</title><rect x="32.4263%" y="101" width="0.2268%" height="15" fill="rgb(251,28,31)"/><text x="32.6763%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="32.4263%" y="85" width="0.2268%" height="15" fill="rgb(233,223,10)"/><text x="32.6763%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::is_empty_singleton (3 samples, 0.23%)</title><rect x="32.4263%" y="69" width="0.2268%" height="15" fill="rgb(215,21,27)"/><text x="32.6763%" y="79.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::unmark (18 samples, 1.36%)</title><rect x="32.8042%" y="197" width="1.3605%" height="15" fill="rgb(232,23,21)"/><text x="33.0542%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (18 samples, 1.36%)</title><rect x="32.8042%" y="181" width="1.3605%" height="15" fill="rgb(244,5,23)"/><text x="33.0542%" y="191.50"></text></g><g><title>core::mem::replace (18 samples, 1.36%)</title><rect x="32.8042%" y="165" width="1.3605%" height="15" fill="rgb(226,81,46)"/><text x="33.0542%" y="175.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep (79 samples, 5.97%)</title><rect x="28.2691%" y="245" width="5.9713%" height="15" fill="rgb(247,70,30)"/><text x="28.5191%" y="255.50">spacelox..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::retain (79 samples, 5.97%)</title><rect x="28.2691%" y="229" width="5.9713%" height="15" fill="rgb(212,68,19)"/><text x="28.5191%" y="239.50">alloc::v..</text></g><g><title>spacelox_vm::memory::Gc::sweep::_{{closure}} (20 samples, 1.51%)</title><rect x="32.7286%" y="213" width="1.5117%" height="15" fill="rgb(240,187,13)"/><text x="32.9786%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::add (3 samples, 0.23%)</title><rect x="34.7695%" y="85" width="0.2268%" height="15" fill="rgb(223,113,26)"/><text x="35.0195%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.45%)</title><rect x="34.7695%" y="149" width="0.4535%" height="15" fill="rgb(206,192,2)"/><text x="35.0195%" y="159.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.45%)</title><rect x="34.7695%" y="133" width="0.4535%" height="15" fill="rgb(241,108,4)"/><text x="35.0195%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.45%)</title><rect x="34.7695%" y="117" width="0.4535%" height="15" fill="rgb(247,173,49)"/><text x="35.0195%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.45%)</title><rect x="34.7695%" y="101" width="0.4535%" height="15" fill="rgb(224,114,35)"/><text x="35.0195%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.23%)</title><rect x="34.9962%" y="85" width="0.2268%" height="15" fill="rgb(245,159,27)"/><text x="35.2462%" y="95.50"></text></g><g><title>spacelox_core::managed::Managed&lt;T&gt;::clone_dyn (14 samples, 1.06%)</title><rect x="35.2986%" y="101" width="1.0582%" height="15" fill="rgb(245,172,44)"/><text x="35.5486%" y="111.50"></text></g><g><title>spacelox_core::utils::do_if_some (2 samples, 0.15%)</title><rect x="36.3568%" y="101" width="0.1512%" height="15" fill="rgb(236,23,11)"/><text x="36.6068%" y="111.50"></text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace::_{{closure}}::_{{closure}} (2 samples, 0.15%)</title><rect x="36.3568%" y="85" width="0.1512%" height="15" fill="rgb(205,117,38)"/><text x="36.6068%" y="95.50"></text></g><g><title>spacelox_vm::memory::Gc::trace::_{{closure}} (2 samples, 0.15%)</title><rect x="36.3568%" y="69" width="0.1512%" height="15" fill="rgb(237,72,25)"/><text x="36.6068%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (2 samples, 0.15%)</title><rect x="36.3568%" y="53" width="0.1512%" height="15" fill="rgb(244,70,9)"/><text x="36.6068%" y="63.50"></text></g><g><title>core::ptr::write (2 samples, 0.15%)</title><rect x="36.3568%" y="37" width="0.1512%" height="15" fill="rgb(217,125,39)"/><text x="36.6068%" y="47.50"></text></g><g><title>spacelox_core::value::Value::get_dyn_managed (6 samples, 0.45%)</title><rect x="36.5079%" y="101" width="0.4535%" height="15" fill="rgb(235,36,10)"/><text x="36.7579%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (2 samples, 0.15%)</title><rect x="37.1882%" y="69" width="0.1512%" height="15" fill="rgb(251,123,47)"/><text x="37.4382%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.15%)</title><rect x="37.1882%" y="53" width="0.1512%" height="15" fill="rgb(221,13,13)"/><text x="37.4382%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (43 samples, 3.25%)</title><rect x="34.5427%" y="197" width="3.2502%" height="15" fill="rgb(238,131,9)"/><text x="34.7927%" y="207.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (43 samples, 3.25%)</title><rect x="34.5427%" y="181" width="3.2502%" height="15" fill="rgb(211,50,8)"/><text x="34.7927%" y="191.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (43 samples, 3.25%)</title><rect x="34.5427%" y="165" width="3.2502%" height="15" fill="rgb(245,182,24)"/><text x="34.7927%" y="175.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (34 samples, 2.57%)</title><rect x="35.2230%" y="149" width="2.5699%" height="15" fill="rgb(242,14,37)"/><text x="35.4730%" y="159.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (34 samples, 2.57%)</title><rect x="35.2230%" y="133" width="2.5699%" height="15" fill="rgb(246,228,12)"/><text x="35.4730%" y="143.50">co..</text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace::_{{closure}} (34 samples, 2.57%)</title><rect x="35.2230%" y="117" width="2.5699%" height="15" fill="rgb(213,55,15)"/><text x="35.4730%" y="127.50">&lt;s..</text></g><g><title>spacelox_vm::memory::Gc::trace::_{{closure}} (11 samples, 0.83%)</title><rect x="36.9615%" y="101" width="0.8314%" height="15" fill="rgb(209,9,3)"/><text x="37.2115%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (10 samples, 0.76%)</title><rect x="37.0370%" y="85" width="0.7559%" height="15" fill="rgb(230,59,30)"/><text x="37.2870%" y="95.50"></text></g><g><title>core::ptr::write (6 samples, 0.45%)</title><rect x="37.3394%" y="69" width="0.4535%" height="15" fill="rgb(209,121,21)"/><text x="37.5894%" y="79.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (17 samples, 1.28%)</title><rect x="38.0952%" y="133" width="1.2850%" height="15" fill="rgb(220,109,13)"/><text x="38.3452%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (17 samples, 1.28%)</title><rect x="38.0952%" y="117" width="1.2850%" height="15" fill="rgb(232,18,1)"/><text x="38.3452%" y="127.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;dyn spacelox_core::managed::Manage&gt; as spacelox_core::managed::Trace&gt;::trace (68 samples, 5.14%)</title><rect x="34.3159%" y="229" width="5.1398%" height="15" fill="rgb(215,41,42)"/><text x="34.5659%" y="239.50">&lt;space..</text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace (67 samples, 5.06%)</title><rect x="34.3915%" y="213" width="5.0642%" height="15" fill="rgb(224,123,36)"/><text x="34.6415%" y="223.50">&lt;space..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (20 samples, 1.51%)</title><rect x="37.9441%" y="197" width="1.5117%" height="15" fill="rgb(240,125,3)"/><text x="38.1941%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::iter (20 samples, 1.51%)</title><rect x="37.9441%" y="181" width="1.5117%" height="15" fill="rgb(205,98,50)"/><text x="38.1941%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter (20 samples, 1.51%)</title><rect x="37.9441%" y="165" width="1.5117%" height="15" fill="rgb(205,185,37)"/><text x="38.1941%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (18 samples, 1.36%)</title><rect x="38.0952%" y="149" width="1.3605%" height="15" fill="rgb(238,207,15)"/><text x="38.3452%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (4 samples, 0.30%)</title><rect x="39.5314%" y="229" width="0.3023%" height="15" fill="rgb(213,199,42)"/><text x="39.7814%" y="239.50"></text></g><g><title>core::ptr::read (4 samples, 0.30%)</title><rect x="39.5314%" y="213" width="0.3023%" height="15" fill="rgb(235,201,11)"/><text x="39.7814%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.30%)</title><rect x="39.5314%" y="197" width="0.3023%" height="15" fill="rgb(207,46,11)"/><text x="39.7814%" y="207.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="40.0605%" y="165" width="0.2268%" height="15" fill="rgb(241,35,35)"/><text x="40.3105%" y="175.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.53%)</title><rect x="39.8337%" y="181" width="0.5291%" height="15" fill="rgb(243,32,47)"/><text x="40.0837%" y="191.50"></text></g><g><title>spacelox_vm::memory::Gc::manage (198 samples, 14.97%)</title><rect x="26.0771%" y="293" width="14.9660%" height="15" fill="rgb(247,202,23)"/><text x="26.3271%" y="303.50">spacelox_vm::memory::Gc..</text></g><g><title>spacelox_vm::memory::Gc::allocate (198 samples, 14.97%)</title><rect x="26.0771%" y="277" width="14.9660%" height="15" fill="rgb(219,102,11)"/><text x="26.3271%" y="287.50">spacelox_vm::memory::Gc..</text></g><g><title>spacelox_vm::memory::Gc::collect_garbage (186 samples, 14.06%)</title><rect x="26.9841%" y="261" width="14.0590%" height="15" fill="rgb(243,110,44)"/><text x="27.2341%" y="271.50">spacelox_vm::memory::..</text></g><g><title>spacelox_vm::memory::Gc::trace (90 samples, 6.80%)</title><rect x="34.2404%" y="245" width="6.8027%" height="15" fill="rgb(222,74,54)"/><text x="34.4904%" y="255.50">spacelox_..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (16 samples, 1.21%)</title><rect x="39.8337%" y="229" width="1.2094%" height="15" fill="rgb(216,99,12)"/><text x="40.0837%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (16 samples, 1.21%)</title><rect x="39.8337%" y="213" width="1.2094%" height="15" fill="rgb(226,22,26)"/><text x="40.0837%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (16 samples, 1.21%)</title><rect x="39.8337%" y="197" width="1.2094%" height="15" fill="rgb(217,163,10)"/><text x="40.0837%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (9 samples, 0.68%)</title><rect x="40.3628%" y="181" width="0.6803%" height="15" fill="rgb(213,25,53)"/><text x="40.6128%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (9 samples, 0.68%)</title><rect x="40.3628%" y="165" width="0.6803%" height="15" fill="rgb(252,105,26)"/><text x="40.6128%" y="175.50"></text></g><g><title>spacelox_vm::memory::Gc::trace::_{{closure}} (9 samples, 0.68%)</title><rect x="40.3628%" y="149" width="0.6803%" height="15" fill="rgb(220,39,43)"/><text x="40.6128%" y="159.50"></text></g><g><title>spacelox_vm::memory::Gc::mark_obj (9 samples, 0.68%)</title><rect x="40.3628%" y="133" width="0.6803%" height="15" fill="rgb(229,68,48)"/><text x="40.6128%" y="143.50"></text></g><g><title>&lt;spacelox_core::value::Closure as core::clone::Clone&gt;::clone (2 samples, 0.15%)</title><rect x="41.1187%" y="261" width="0.1512%" height="15" fill="rgb(252,8,32)"/><text x="41.3687%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.15%)</title><rect x="41.1187%" y="245" width="0.1512%" height="15" fill="rgb(223,20,43)"/><text x="41.3687%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.15%)</title><rect x="41.1187%" y="229" width="0.1512%" height="15" fill="rgb(229,81,49)"/><text x="41.3687%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.15%)</title><rect x="41.1187%" y="213" width="0.1512%" height="15" fill="rgb(236,28,36)"/><text x="41.3687%" y="223.50"></text></g><g><title>_int_malloc (15 samples, 1.13%)</title><rect x="41.7989%" y="181" width="1.1338%" height="15" fill="rgb(249,185,26)"/><text x="42.0489%" y="191.50"></text></g><g><title>__GI___libc_malloc (23 samples, 1.74%)</title><rect x="41.3454%" y="197" width="1.7385%" height="15" fill="rgb(249,174,33)"/><text x="41.5954%" y="207.50"></text></g><g><title>checked_request2size (2 samples, 0.15%)</title><rect x="42.9327%" y="181" width="0.1512%" height="15" fill="rgb(233,201,37)"/><text x="43.1827%" y="191.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (26 samples, 1.97%)</title><rect x="41.2698%" y="245" width="1.9652%" height="15" fill="rgb(221,78,26)"/><text x="41.5198%" y="255.50">a..</text></g><g><title>alloc::alloc::exchange_malloc (25 samples, 1.89%)</title><rect x="41.3454%" y="229" width="1.8896%" height="15" fill="rgb(250,127,30)"/><text x="41.5954%" y="239.50">a..</text></g><g><title>alloc::alloc::alloc (25 samples, 1.89%)</title><rect x="41.3454%" y="213" width="1.8896%" height="15" fill="rgb(230,49,44)"/><text x="41.5954%" y="223.50">a..</text></g><g><title>core::ptr::drop_in_place (4 samples, 0.30%)</title><rect x="43.4618%" y="229" width="0.3023%" height="15" fill="rgb(229,67,23)"/><text x="43.7118%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.30%)</title><rect x="43.4618%" y="213" width="0.3023%" height="15" fill="rgb(249,83,47)"/><text x="43.7118%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.30%)</title><rect x="43.4618%" y="197" width="0.3023%" height="15" fill="rgb(215,43,3)"/><text x="43.7118%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (4 samples, 0.30%)</title><rect x="43.4618%" y="181" width="0.3023%" height="15" fill="rgb(238,154,13)"/><text x="43.7118%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (4 samples, 0.30%)</title><rect x="43.4618%" y="165" width="0.3023%" height="15" fill="rgb(219,56,2)"/><text x="43.7118%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.30%)</title><rect x="43.4618%" y="149" width="0.3023%" height="15" fill="rgb(233,0,4)"/><text x="43.7118%" y="159.50"></text></g><g><title>_int_free (4 samples, 0.30%)</title><rect x="43.4618%" y="133" width="0.3023%" height="15" fill="rgb(235,30,7)"/><text x="43.7118%" y="143.50"></text></g><g><title>malloc_consolidate (4 samples, 0.30%)</title><rect x="43.4618%" y="117" width="0.3023%" height="15" fill="rgb(250,79,13)"/><text x="43.7118%" y="127.50"></text></g><g><title>alloc::alloc::box_free (6 samples, 0.45%)</title><rect x="43.9909%" y="149" width="0.4535%" height="15" fill="rgb(211,146,34)"/><text x="44.2409%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.38%)</title><rect x="44.0665%" y="133" width="0.3779%" height="15" fill="rgb(228,22,38)"/><text x="44.3165%" y="143.50"></text></g><g><title>_int_free (3 samples, 0.23%)</title><rect x="44.2177%" y="117" width="0.2268%" height="15" fill="rgb(235,168,5)"/><text x="44.4677%" y="127.50"></text></g><g><title>__GI___libc_free (6 samples, 0.45%)</title><rect x="44.4444%" y="133" width="0.4535%" height="15" fill="rgb(221,155,16)"/><text x="44.6944%" y="143.50"></text></g><g><title>_int_free (6 samples, 0.45%)</title><rect x="44.8980%" y="133" width="0.4535%" height="15" fill="rgb(215,215,53)"/><text x="45.1480%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (21 samples, 1.59%)</title><rect x="43.8398%" y="197" width="1.5873%" height="15" fill="rgb(223,4,10)"/><text x="44.0898%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (21 samples, 1.59%)</title><rect x="43.8398%" y="181" width="1.5873%" height="15" fill="rgb(234,103,6)"/><text x="44.0898%" y="191.50"></text></g><g><title>core::ptr::drop_in_place (21 samples, 1.59%)</title><rect x="43.8398%" y="165" width="1.5873%" height="15" fill="rgb(227,97,0)"/><text x="44.0898%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.98%)</title><rect x="44.4444%" y="149" width="0.9826%" height="15" fill="rgb(234,150,53)"/><text x="44.6944%" y="159.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep (22 samples, 1.66%)</title><rect x="43.8398%" y="229" width="1.6629%" height="15" fill="rgb(228,201,54)"/><text x="44.0898%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::retain (22 samples, 1.66%)</title><rect x="43.8398%" y="213" width="1.6629%" height="15" fill="rgb(222,22,37)"/><text x="44.0898%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="45.5782%" y="133" width="0.2268%" height="15" fill="rgb(237,53,32)"/><text x="45.8282%" y="143.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="45.5782%" y="117" width="0.2268%" height="15" fill="rgb(233,25,53)"/><text x="45.8282%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="45.5782%" y="101" width="0.2268%" height="15" fill="rgb(210,40,34)"/><text x="45.8282%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="45.5782%" y="85" width="0.2268%" height="15" fill="rgb(241,220,44)"/><text x="45.8282%" y="95.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.15%)</title><rect x="45.6538%" y="69" width="0.1512%" height="15" fill="rgb(235,28,35)"/><text x="45.9038%" y="79.50"></text></g><g><title>spacelox_core::managed::Managed&lt;T&gt;::clone_dyn (2 samples, 0.15%)</title><rect x="45.8050%" y="85" width="0.1512%" height="15" fill="rgb(210,56,17)"/><text x="46.0550%" y="95.50"></text></g><g><title>spacelox_core::utils::do_if_some (2 samples, 0.15%)</title><rect x="45.9562%" y="85" width="0.1512%" height="15" fill="rgb(224,130,29)"/><text x="46.2062%" y="95.50"></text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace::_{{closure}}::_{{closure}} (2 samples, 0.15%)</title><rect x="45.9562%" y="69" width="0.1512%" height="15" fill="rgb(235,212,8)"/><text x="46.2062%" y="79.50"></text></g><g><title>spacelox_vm::memory::Gc::trace::_{{closure}} (2 samples, 0.15%)</title><rect x="45.9562%" y="53" width="0.1512%" height="15" fill="rgb(223,33,50)"/><text x="46.2062%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12 samples, 0.91%)</title><rect x="45.5782%" y="181" width="0.9070%" height="15" fill="rgb(219,149,13)"/><text x="45.8282%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 0.91%)</title><rect x="45.5782%" y="165" width="0.9070%" height="15" fill="rgb(250,156,29)"/><text x="45.8282%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (12 samples, 0.91%)</title><rect x="45.5782%" y="149" width="0.9070%" height="15" fill="rgb(216,193,19)"/><text x="45.8282%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (9 samples, 0.68%)</title><rect x="45.8050%" y="133" width="0.6803%" height="15" fill="rgb(216,135,14)"/><text x="46.0550%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (9 samples, 0.68%)</title><rect x="45.8050%" y="117" width="0.6803%" height="15" fill="rgb(241,47,5)"/><text x="46.0550%" y="127.50"></text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace::_{{closure}} (9 samples, 0.68%)</title><rect x="45.8050%" y="101" width="0.6803%" height="15" fill="rgb(233,42,35)"/><text x="46.0550%" y="111.50"></text></g><g><title>spacelox_core::value::Value::get_dyn_managed (5 samples, 0.38%)</title><rect x="46.1073%" y="85" width="0.3779%" height="15" fill="rgb(231,13,6)"/><text x="46.3573%" y="95.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;dyn spacelox_core::managed::Manage&gt; as spacelox_core::managed::Trace&gt;::trace (22 samples, 1.66%)</title><rect x="45.5026%" y="213" width="1.6629%" height="15" fill="rgb(207,181,40)"/><text x="45.7526%" y="223.50"></text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace (21 samples, 1.59%)</title><rect x="45.5782%" y="197" width="1.5873%" height="15" fill="rgb(254,173,49)"/><text x="45.8282%" y="207.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (9 samples, 0.68%)</title><rect x="46.4853%" y="181" width="0.6803%" height="15" fill="rgb(221,1,38)"/><text x="46.7353%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::iter (9 samples, 0.68%)</title><rect x="46.4853%" y="165" width="0.6803%" height="15" fill="rgb(206,124,46)"/><text x="46.7353%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter (9 samples, 0.68%)</title><rect x="46.4853%" y="149" width="0.6803%" height="15" fill="rgb(249,21,11)"/><text x="46.7353%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (6 samples, 0.45%)</title><rect x="46.7120%" y="133" width="0.4535%" height="15" fill="rgb(222,201,40)"/><text x="46.9620%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (6 samples, 0.45%)</title><rect x="46.7120%" y="117" width="0.4535%" height="15" fill="rgb(235,61,29)"/><text x="46.9620%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (6 samples, 0.45%)</title><rect x="46.7120%" y="101" width="0.4535%" height="15" fill="rgb(219,207,3)"/><text x="46.9620%" y="111.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.15%)</title><rect x="47.3167%" y="165" width="0.1512%" height="15" fill="rgb(222,56,46)"/><text x="47.5667%" y="175.50"></text></g><g><title>spacelox_vm::memory::Gc::clone_managed (88 samples, 6.65%)</title><rect x="41.1187%" y="277" width="6.6515%" height="15" fill="rgb(239,76,54)"/><text x="41.3687%" y="287.50">spacelox_..</text></g><g><title>spacelox_vm::memory::Gc::allocate (86 samples, 6.50%)</title><rect x="41.2698%" y="261" width="6.5004%" height="15" fill="rgb(231,124,27)"/><text x="41.5198%" y="271.50">spacelox_..</text></g><g><title>spacelox_vm::memory::Gc::collect_garbage (57 samples, 4.31%)</title><rect x="43.4618%" y="245" width="4.3084%" height="15" fill="rgb(249,195,6)"/><text x="43.7118%" y="255.50">space..</text></g><g><title>spacelox_vm::memory::Gc::trace (30 samples, 2.27%)</title><rect x="45.5026%" y="229" width="2.2676%" height="15" fill="rgb(237,174,47)"/><text x="45.7526%" y="239.50">s..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.45%)</title><rect x="47.3167%" y="213" width="0.4535%" height="15" fill="rgb(206,201,31)"/><text x="47.5667%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.45%)</title><rect x="47.3167%" y="197" width="0.4535%" height="15" fill="rgb(231,57,52)"/><text x="47.5667%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.45%)</title><rect x="47.3167%" y="181" width="0.4535%" height="15" fill="rgb(248,177,22)"/><text x="47.5667%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (4 samples, 0.30%)</title><rect x="47.4679%" y="165" width="0.3023%" height="15" fill="rgb(215,211,37)"/><text x="47.7179%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.30%)</title><rect x="47.4679%" y="149" width="0.3023%" height="15" fill="rgb(241,128,51)"/><text x="47.7179%" y="159.50"></text></g><g><title>spacelox_vm::memory::Gc::trace::_{{closure}} (4 samples, 0.30%)</title><rect x="47.4679%" y="133" width="0.3023%" height="15" fill="rgb(227,165,31)"/><text x="47.7179%" y="143.50"></text></g><g><title>spacelox_vm::memory::Gc::mark_obj (4 samples, 0.30%)</title><rect x="47.4679%" y="117" width="0.3023%" height="15" fill="rgb(228,167,24)"/><text x="47.7179%" y="127.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_call (295 samples, 22.30%)</title><rect x="25.5480%" y="341" width="22.2978%" height="15" fill="rgb(228,143,12)"/><text x="25.7980%" y="351.50">spacelox_vm::vm::VmExecutor::op_call</text></g><g><title>spacelox_vm::vm::VmExecutor::resolve_call (293 samples, 22.15%)</title><rect x="25.6992%" y="325" width="22.1466%" height="15" fill="rgb(249,149,8)"/><text x="25.9492%" y="335.50">spacelox_vm::vm::VmExecutor::resolv..</text></g><g><title>spacelox_vm::vm::VmExecutor::call_class (291 samples, 22.00%)</title><rect x="25.8503%" y="309" width="21.9955%" height="15" fill="rgb(243,35,44)"/><text x="26.1003%" y="319.50">spacelox_vm::vm::VmExecutor::call_c..</text></g><g><title>spacelox_vm::vm::VmExecutor::call (90 samples, 6.80%)</title><rect x="41.0431%" y="293" width="6.8027%" height="15" fill="rgb(246,89,9)"/><text x="41.2931%" y="303.50">spacelox_..</text></g><g><title>spacelox_vm::vm::VmExecutor::op_constant (2 samples, 0.15%)</title><rect x="47.8458%" y="341" width="0.1512%" height="15" fill="rgb(233,213,13)"/><text x="48.0958%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (2 samples, 0.15%)</title><rect x="47.8458%" y="325" width="0.1512%" height="15" fill="rgb(233,141,41)"/><text x="48.0958%" y="335.50"></text></g><g><title>&lt;spacelox_core::value::Value as core::cmp::PartialEq&gt;::eq (2 samples, 0.15%)</title><rect x="47.9970%" y="325" width="0.1512%" height="15" fill="rgb(239,167,4)"/><text x="48.2470%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.23%)</title><rect x="48.6772%" y="261" width="0.2268%" height="15" fill="rgb(209,217,16)"/><text x="48.9272%" y="271.50"></text></g><g><title>core::ptr::read (2 samples, 0.15%)</title><rect x="48.9040%" y="261" width="0.1512%" height="15" fill="rgb(219,88,35)"/><text x="49.1540%" y="271.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::pop (13 samples, 0.98%)</title><rect x="48.1481%" y="325" width="0.9826%" height="15" fill="rgb(220,193,23)"/><text x="48.3981%" y="335.50"></text></g><g><title>core::mem::replace (13 samples, 0.98%)</title><rect x="48.1481%" y="309" width="0.9826%" height="15" fill="rgb(230,90,52)"/><text x="48.3981%" y="319.50"></text></g><g><title>core::mem::swap (6 samples, 0.45%)</title><rect x="48.6772%" y="293" width="0.4535%" height="15" fill="rgb(252,106,19)"/><text x="48.9272%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (6 samples, 0.45%)</title><rect x="48.6772%" y="277" width="0.4535%" height="15" fill="rgb(206,74,20)"/><text x="48.9272%" y="287.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_equal (17 samples, 1.28%)</title><rect x="47.9970%" y="341" width="1.2850%" height="15" fill="rgb(230,138,44)"/><text x="48.2470%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::push (2 samples, 0.15%)</title><rect x="49.1308%" y="325" width="0.1512%" height="15" fill="rgb(235,182,43)"/><text x="49.3808%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::set_val (2 samples, 0.15%)</title><rect x="49.1308%" y="309" width="0.1512%" height="15" fill="rgb(242,16,51)"/><text x="49.3808%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (2 samples, 0.15%)</title><rect x="49.2819%" y="325" width="0.1512%" height="15" fill="rgb(248,9,4)"/><text x="49.5319%" y="335.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.15%)</title><rect x="49.5087%" y="245" width="0.1512%" height="15" fill="rgb(210,31,22)"/><text x="49.7587%" y="255.50"></text></g><g><title>spacelox_core::managed::Managed&lt;T&gt;::obj (2 samples, 0.15%)</title><rect x="49.5087%" y="229" width="0.1512%" height="15" fill="rgb(239,54,39)"/><text x="49.7587%" y="239.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (8 samples, 0.60%)</title><rect x="49.5087%" y="261" width="0.6047%" height="15" fill="rgb(230,99,41)"/><text x="49.7587%" y="271.50"></text></g><g><title>core::ptr::hash (6 samples, 0.45%)</title><rect x="49.6599%" y="245" width="0.4535%" height="15" fill="rgb(253,106,12)"/><text x="49.9099%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (6 samples, 0.45%)</title><rect x="49.6599%" y="229" width="0.4535%" height="15" fill="rgb(213,46,41)"/><text x="49.9099%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.45%)</title><rect x="49.6599%" y="213" width="0.4535%" height="15" fill="rgb(215,133,35)"/><text x="49.9099%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.45%)</title><rect x="49.6599%" y="197" width="0.4535%" height="15" fill="rgb(213,28,5)"/><text x="49.9099%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.45%)</title><rect x="49.6599%" y="181" width="0.4535%" height="15" fill="rgb(215,77,49)"/><text x="49.9099%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.45%)</title><rect x="49.6599%" y="165" width="0.4535%" height="15" fill="rgb(248,100,22)"/><text x="49.9099%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.15%)</title><rect x="50.1134%" y="213" width="0.1512%" height="15" fill="rgb(208,67,9)"/><text x="50.3634%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.30%)</title><rect x="50.1134%" y="261" width="0.3023%" height="15" fill="rgb(219,133,21)"/><text x="50.3634%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.30%)</title><rect x="50.1134%" y="245" width="0.3023%" height="15" fill="rgb(246,46,29)"/><text x="50.3634%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.30%)</title><rect x="50.1134%" y="229" width="0.3023%" height="15" fill="rgb(246,185,52)"/><text x="50.3634%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.15%)</title><rect x="50.2646%" y="213" width="0.1512%" height="15" fill="rgb(252,136,11)"/><text x="50.5146%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.98%)</title><rect x="49.5087%" y="277" width="0.9826%" height="15" fill="rgb(219,138,53)"/><text x="49.7587%" y="287.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_get_global (19 samples, 1.44%)</title><rect x="49.2819%" y="341" width="1.4361%" height="15" fill="rgb(211,51,23)"/><text x="49.5319%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (16 samples, 1.21%)</title><rect x="49.5087%" y="325" width="1.2094%" height="15" fill="rgb(247,221,28)"/><text x="49.7587%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (16 samples, 1.21%)</title><rect x="49.5087%" y="309" width="1.2094%" height="15" fill="rgb(251,222,45)"/><text x="49.7587%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (16 samples, 1.21%)</title><rect x="49.5087%" y="293" width="1.2094%" height="15" fill="rgb(217,162,53)"/><text x="49.7587%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (3 samples, 0.23%)</title><rect x="50.4913%" y="277" width="0.2268%" height="15" fill="rgb(229,93,14)"/><text x="50.7413%" y="287.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::get_val (2 samples, 0.15%)</title><rect x="51.1716%" y="325" width="0.1512%" height="15" fill="rgb(209,67,49)"/><text x="51.4216%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.15%)</title><rect x="51.1716%" y="309" width="0.1512%" height="15" fill="rgb(213,87,29)"/><text x="51.4216%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (2 samples, 0.15%)</title><rect x="51.1716%" y="293" width="0.1512%" height="15" fill="rgb(205,151,52)"/><text x="51.4216%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.15%)</title><rect x="51.1716%" y="277" width="0.1512%" height="15" fill="rgb(253,215,39)"/><text x="51.4216%" y="287.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::push (4 samples, 0.30%)</title><rect x="51.3228%" y="325" width="0.3023%" height="15" fill="rgb(221,220,41)"/><text x="51.5728%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.38%)</title><rect x="52.0030%" y="309" width="0.3779%" height="15" fill="rgb(218,133,21)"/><text x="52.2530%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.38%)</title><rect x="52.0030%" y="293" width="0.3779%" height="15" fill="rgb(221,193,43)"/><text x="52.2530%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (5 samples, 0.38%)</title><rect x="52.0030%" y="277" width="0.3779%" height="15" fill="rgb(240,128,52)"/><text x="52.2530%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.38%)</title><rect x="52.0030%" y="261" width="0.3779%" height="15" fill="rgb(253,114,12)"/><text x="52.2530%" y="271.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.76%)</title><rect x="52.3810%" y="309" width="0.7559%" height="15" fill="rgb(215,223,47)"/><text x="52.6310%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_get_local (37 samples, 2.80%)</title><rect x="50.7181%" y="341" width="2.7967%" height="15" fill="rgb(248,225,23)"/><text x="50.9681%" y="351.50">sp..</text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (25 samples, 1.89%)</title><rect x="51.6251%" y="325" width="1.8896%" height="15" fill="rgb(250,108,0)"/><text x="51.8751%" y="335.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor::current_frame (5 samples, 0.38%)</title><rect x="53.1368%" y="309" width="0.3779%" height="15" fill="rgb(228,208,7)"/><text x="53.3868%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.15%)</title><rect x="53.9683%" y="309" width="0.1512%" height="15" fill="rgb(244,45,10)"/><text x="54.2183%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.15%)</title><rect x="53.9683%" y="293" width="0.1512%" height="15" fill="rgb(207,125,25)"/><text x="54.2183%" y="303.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.15%)</title><rect x="54.1194%" y="309" width="0.1512%" height="15" fill="rgb(210,195,18)"/><text x="54.3694%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (6 samples, 0.45%)</title><rect x="53.8927%" y="325" width="0.4535%" height="15" fill="rgb(249,80,12)"/><text x="54.1427%" y="335.50"></text></g><g><title>spacelox_core::value::Value::to_string (2 samples, 0.15%)</title><rect x="54.3462%" y="309" width="0.1512%" height="15" fill="rgb(221,65,9)"/><text x="54.5962%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_string (5 samples, 0.38%)</title><rect x="54.3462%" y="325" width="0.3779%" height="15" fill="rgb(235,49,36)"/><text x="54.5962%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_constant (3 samples, 0.23%)</title><rect x="54.4974%" y="309" width="0.2268%" height="15" fill="rgb(225,32,20)"/><text x="54.7474%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.15%)</title><rect x="54.5729%" y="293" width="0.1512%" height="15" fill="rgb(215,141,46)"/><text x="54.8229%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.15%)</title><rect x="54.5729%" y="277" width="0.1512%" height="15" fill="rgb(250,160,47)"/><text x="54.8229%" y="287.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.15%)</title><rect x="54.7241%" y="245" width="0.1512%" height="15" fill="rgb(216,222,40)"/><text x="54.9741%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.45%)</title><rect x="55.3288%" y="149" width="0.4535%" height="15" fill="rgb(234,217,39)"/><text x="55.5788%" y="159.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (18 samples, 1.36%)</title><rect x="54.7241%" y="261" width="1.3605%" height="15" fill="rgb(207,178,40)"/><text x="54.9741%" y="271.50"></text></g><g><title>core::ptr::hash (16 samples, 1.21%)</title><rect x="54.8753%" y="245" width="1.2094%" height="15" fill="rgb(221,136,13)"/><text x="55.1253%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (16 samples, 1.21%)</title><rect x="54.8753%" y="229" width="1.2094%" height="15" fill="rgb(249,199,10)"/><text x="55.1253%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (16 samples, 1.21%)</title><rect x="54.8753%" y="213" width="1.2094%" height="15" fill="rgb(249,222,13)"/><text x="55.1253%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 1.21%)</title><rect x="54.8753%" y="197" width="1.2094%" height="15" fill="rgb(244,185,38)"/><text x="55.1253%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16 samples, 1.21%)</title><rect x="54.8753%" y="181" width="1.2094%" height="15" fill="rgb(236,202,9)"/><text x="55.1253%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 1.21%)</title><rect x="54.8753%" y="165" width="1.2094%" height="15" fill="rgb(250,229,37)"/><text x="55.1253%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.23%)</title><rect x="55.8579%" y="149" width="0.2268%" height="15" fill="rgb(206,174,23)"/><text x="56.1079%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.15%)</title><rect x="56.3870%" y="197" width="0.1512%" height="15" fill="rgb(211,33,43)"/><text x="56.6370%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.38%)</title><rect x="56.3114%" y="213" width="0.3779%" height="15" fill="rgb(245,58,50)"/><text x="56.5614%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.15%)</title><rect x="56.5382%" y="197" width="0.1512%" height="15" fill="rgb(244,68,36)"/><text x="56.7882%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.23%)</title><rect x="56.9161%" y="197" width="0.2268%" height="15" fill="rgb(232,229,15)"/><text x="57.1661%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (36 samples, 2.72%)</title><rect x="54.7241%" y="277" width="2.7211%" height="15" fill="rgb(254,30,23)"/><text x="54.9741%" y="287.50">ha..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (18 samples, 1.36%)</title><rect x="56.0847%" y="261" width="1.3605%" height="15" fill="rgb(235,160,14)"/><text x="56.3347%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (18 samples, 1.36%)</title><rect x="56.0847%" y="245" width="1.3605%" height="15" fill="rgb(212,155,44)"/><text x="56.3347%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (18 samples, 1.36%)</title><rect x="56.0847%" y="229" width="1.3605%" height="15" fill="rgb(226,2,50)"/><text x="56.3347%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10 samples, 0.76%)</title><rect x="56.6893%" y="213" width="0.7559%" height="15" fill="rgb(234,177,6)"/><text x="56.9393%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.30%)</title><rect x="57.1429%" y="197" width="0.3023%" height="15" fill="rgb(217,24,9)"/><text x="57.3929%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.15%)</title><rect x="57.8987%" y="261" width="0.1512%" height="15" fill="rgb(220,13,46)"/><text x="58.1487%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.15%)</title><rect x="57.8987%" y="245" width="0.1512%" height="15" fill="rgb(239,221,27)"/><text x="58.1487%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.15%)</title><rect x="57.8987%" y="229" width="0.1512%" height="15" fill="rgb(222,198,25)"/><text x="58.1487%" y="239.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_get_property (64 samples, 4.84%)</title><rect x="53.5147%" y="341" width="4.8375%" height="15" fill="rgb(211,99,13)"/><text x="53.7647%" y="351.50">spacel..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (48 samples, 3.63%)</title><rect x="54.7241%" y="325" width="3.6281%" height="15" fill="rgb(232,111,31)"/><text x="54.9741%" y="335.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (48 samples, 3.63%)</title><rect x="54.7241%" y="309" width="3.6281%" height="15" fill="rgb(245,82,37)"/><text x="54.9741%" y="319.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (48 samples, 3.63%)</title><rect x="54.7241%" y="293" width="3.6281%" height="15" fill="rgb(227,149,46)"/><text x="54.9741%" y="303.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (12 samples, 0.91%)</title><rect x="57.4452%" y="277" width="0.9070%" height="15" fill="rgb(218,36,50)"/><text x="57.6952%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.30%)</title><rect x="58.0499%" y="261" width="0.3023%" height="15" fill="rgb(226,80,48)"/><text x="58.2999%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 0.23%)</title><rect x="58.1255%" y="245" width="0.2268%" height="15" fill="rgb(238,224,15)"/><text x="58.3755%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 0.23%)</title><rect x="58.1255%" y="229" width="0.2268%" height="15" fill="rgb(241,136,10)"/><text x="58.3755%" y="239.50"></text></g><g><title>core::core_arch::simd::i8x16::new (3 samples, 0.23%)</title><rect x="58.1255%" y="213" width="0.2268%" height="15" fill="rgb(208,32,45)"/><text x="58.3755%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.15%)</title><rect x="58.8057%" y="293" width="0.1512%" height="15" fill="rgb(207,135,9)"/><text x="59.0557%" y="303.50"></text></g><g><title>_int_malloc (22 samples, 1.66%)</title><rect x="59.6372%" y="197" width="1.6629%" height="15" fill="rgb(206,86,44)"/><text x="59.8872%" y="207.50"></text></g><g><title>__GI___libc_malloc (31 samples, 2.34%)</title><rect x="59.2593%" y="213" width="2.3432%" height="15" fill="rgb(245,177,15)"/><text x="59.5093%" y="223.50">_..</text></g><g><title>checked_request2size (4 samples, 0.30%)</title><rect x="61.3001%" y="197" width="0.3023%" height="15" fill="rgb(206,64,50)"/><text x="61.5501%" y="207.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (33 samples, 2.49%)</title><rect x="59.1837%" y="261" width="2.4943%" height="15" fill="rgb(234,36,40)"/><text x="59.4337%" y="271.50">al..</text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 2.42%)</title><rect x="59.2593%" y="245" width="2.4187%" height="15" fill="rgb(213,64,8)"/><text x="59.5093%" y="255.50">al..</text></g><g><title>alloc::alloc::alloc (32 samples, 2.42%)</title><rect x="59.2593%" y="229" width="2.4187%" height="15" fill="rgb(210,75,36)"/><text x="59.5093%" y="239.50">al..</text></g><g><title>core::ptr::drop_in_place (16 samples, 1.21%)</title><rect x="61.7536%" y="245" width="1.2094%" height="15" fill="rgb(229,88,21)"/><text x="62.0036%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 1.21%)</title><rect x="61.7536%" y="229" width="1.2094%" height="15" fill="rgb(252,204,47)"/><text x="62.0036%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.21%)</title><rect x="61.7536%" y="213" width="1.2094%" height="15" fill="rgb(208,77,27)"/><text x="62.0036%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::dealloc_buffer (16 samples, 1.21%)</title><rect x="61.7536%" y="197" width="1.2094%" height="15" fill="rgb(221,76,26)"/><text x="62.0036%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (16 samples, 1.21%)</title><rect x="61.7536%" y="181" width="1.2094%" height="15" fill="rgb(225,139,18)"/><text x="62.0036%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 1.21%)</title><rect x="61.7536%" y="165" width="1.2094%" height="15" fill="rgb(230,137,11)"/><text x="62.0036%" y="175.50"></text></g><g><title>_int_free (16 samples, 1.21%)</title><rect x="61.7536%" y="149" width="1.2094%" height="15" fill="rgb(212,28,1)"/><text x="62.0036%" y="159.50"></text></g><g><title>malloc_consolidate (16 samples, 1.21%)</title><rect x="61.7536%" y="133" width="1.2094%" height="15" fill="rgb(248,164,17)"/><text x="62.0036%" y="143.50"></text></g><g><title>unlink_chunk (4 samples, 0.30%)</title><rect x="62.6606%" y="117" width="0.3023%" height="15" fill="rgb(222,171,42)"/><text x="62.9106%" y="127.50"></text></g><g><title>__GI___libc_free (2 samples, 0.15%)</title><rect x="63.1897%" y="133" width="0.1512%" height="15" fill="rgb(243,84,45)"/><text x="63.4397%" y="143.50"></text></g><g><title>alloc::alloc::box_free (7 samples, 0.53%)</title><rect x="63.0385%" y="165" width="0.5291%" height="15" fill="rgb(252,49,23)"/><text x="63.2885%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.45%)</title><rect x="63.1141%" y="149" width="0.4535%" height="15" fill="rgb(215,19,7)"/><text x="63.3641%" y="159.50"></text></g><g><title>_int_free (3 samples, 0.23%)</title><rect x="63.3409%" y="133" width="0.2268%" height="15" fill="rgb(238,81,41)"/><text x="63.5909%" y="143.50"></text></g><g><title>__GI___libc_free (6 samples, 0.45%)</title><rect x="63.5676%" y="149" width="0.4535%" height="15" fill="rgb(210,199,37)"/><text x="63.8176%" y="159.50"></text></g><g><title>_int_free (12 samples, 0.91%)</title><rect x="64.0212%" y="149" width="0.9070%" height="15" fill="rgb(244,192,49)"/><text x="64.2712%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (29 samples, 2.19%)</title><rect x="62.9630%" y="213" width="2.1920%" height="15" fill="rgb(226,211,11)"/><text x="63.2130%" y="223.50">a..</text></g><g><title>core::ptr::drop_in_place (29 samples, 2.19%)</title><rect x="62.9630%" y="197" width="2.1920%" height="15" fill="rgb(236,162,54)"/><text x="63.2130%" y="207.50">c..</text></g><g><title>core::ptr::drop_in_place (29 samples, 2.19%)</title><rect x="62.9630%" y="181" width="2.1920%" height="15" fill="rgb(220,229,9)"/><text x="63.2130%" y="191.50">c..</text></g><g><title>core::ptr::drop_in_place (21 samples, 1.59%)</title><rect x="63.5676%" y="165" width="1.5873%" height="15" fill="rgb(250,87,22)"/><text x="63.8176%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.23%)</title><rect x="64.9282%" y="149" width="0.2268%" height="15" fill="rgb(239,43,17)"/><text x="65.1782%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.23%)</title><rect x="64.9282%" y="133" width="0.2268%" height="15" fill="rgb(231,177,25)"/><text x="65.1782%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.23%)</title><rect x="64.9282%" y="117" width="0.2268%" height="15" fill="rgb(219,179,1)"/><text x="65.1782%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="64.9282%" y="101" width="0.2268%" height="15" fill="rgb(238,219,53)"/><text x="65.1782%" y="111.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.15%)</title><rect x="65.1550%" y="213" width="0.1512%" height="15" fill="rgb(232,167,36)"/><text x="65.4050%" y="223.50"></text></g><g><title>spacelox_vm::memory::Gc::sweep (44 samples, 3.33%)</title><rect x="62.9630%" y="245" width="3.3258%" height="15" fill="rgb(244,19,51)"/><text x="63.2130%" y="255.50">spa..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::retain (44 samples, 3.33%)</title><rect x="62.9630%" y="229" width="3.3258%" height="15" fill="rgb(224,6,22)"/><text x="63.2130%" y="239.50">all..</text></g><g><title>spacelox_vm::memory::Gc::sweep::_{{closure}} (13 samples, 0.98%)</title><rect x="65.3061%" y="213" width="0.9826%" height="15" fill="rgb(224,145,5)"/><text x="65.5561%" y="223.50"></text></g><g><title>spacelox_core::managed::Allocation&lt;T&gt;::unmark (12 samples, 0.91%)</title><rect x="65.3817%" y="197" width="0.9070%" height="15" fill="rgb(234,130,49)"/><text x="65.6317%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (12 samples, 0.91%)</title><rect x="65.3817%" y="181" width="0.9070%" height="15" fill="rgb(254,6,2)"/><text x="65.6317%" y="191.50"></text></g><g><title>core::mem::replace (12 samples, 0.91%)</title><rect x="65.3817%" y="165" width="0.9070%" height="15" fill="rgb(208,96,46)"/><text x="65.6317%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::add (3 samples, 0.23%)</title><rect x="66.4399%" y="85" width="0.2268%" height="15" fill="rgb(239,3,39)"/><text x="66.6899%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.30%)</title><rect x="66.4399%" y="149" width="0.3023%" height="15" fill="rgb(233,210,1)"/><text x="66.6899%" y="159.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.30%)</title><rect x="66.4399%" y="133" width="0.3023%" height="15" fill="rgb(244,137,37)"/><text x="66.6899%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.30%)</title><rect x="66.4399%" y="117" width="0.3023%" height="15" fill="rgb(240,136,2)"/><text x="66.6899%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.30%)</title><rect x="66.4399%" y="101" width="0.3023%" height="15" fill="rgb(239,18,37)"/><text x="66.6899%" y="111.50"></text></g><g><title>spacelox_core::managed::Managed&lt;T&gt;::clone_dyn (3 samples, 0.23%)</title><rect x="66.7423%" y="101" width="0.2268%" height="15" fill="rgb(218,185,22)"/><text x="66.9923%" y="111.50"></text></g><g><title>spacelox_core::utils::do_if_some (5 samples, 0.38%)</title><rect x="66.9690%" y="101" width="0.3779%" height="15" fill="rgb(225,218,4)"/><text x="67.2190%" y="111.50"></text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace::_{{closure}}::_{{closure}} (5 samples, 0.38%)</title><rect x="66.9690%" y="85" width="0.3779%" height="15" fill="rgb(230,182,32)"/><text x="67.2190%" y="95.50"></text></g><g><title>spacelox_vm::memory::Gc::trace::_{{closure}} (5 samples, 0.38%)</title><rect x="66.9690%" y="69" width="0.3779%" height="15" fill="rgb(242,56,43)"/><text x="67.2190%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (3 samples, 0.23%)</title><rect x="67.1202%" y="53" width="0.2268%" height="15" fill="rgb(233,99,24)"/><text x="67.3702%" y="63.50"></text></g><g><title>spacelox_core::value::Value::get_dyn_managed (4 samples, 0.30%)</title><rect x="67.3469%" y="101" width="0.3023%" height="15" fill="rgb(234,209,42)"/><text x="67.5969%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (19 samples, 1.44%)</title><rect x="66.4399%" y="197" width="1.4361%" height="15" fill="rgb(227,7,12)"/><text x="66.6899%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (19 samples, 1.44%)</title><rect x="66.4399%" y="181" width="1.4361%" height="15" fill="rgb(245,203,43)"/><text x="66.6899%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (19 samples, 1.44%)</title><rect x="66.4399%" y="165" width="1.4361%" height="15" fill="rgb(238,205,33)"/><text x="66.6899%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (15 samples, 1.13%)</title><rect x="66.7423%" y="149" width="1.1338%" height="15" fill="rgb(231,56,7)"/><text x="66.9923%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (15 samples, 1.13%)</title><rect x="66.7423%" y="133" width="1.1338%" height="15" fill="rgb(244,186,29)"/><text x="66.9923%" y="143.50"></text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace::_{{closure}} (15 samples, 1.13%)</title><rect x="66.7423%" y="117" width="1.1338%" height="15" fill="rgb(234,111,31)"/><text x="66.9923%" y="127.50"></text></g><g><title>spacelox_vm::memory::Gc::trace::_{{closure}} (3 samples, 0.23%)</title><rect x="67.6493%" y="101" width="0.2268%" height="15" fill="rgb(241,149,10)"/><text x="67.8993%" y="111.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;dyn spacelox_core::managed::Manage&gt; as spacelox_core::managed::Trace&gt;::trace (32 samples, 2.42%)</title><rect x="66.2887%" y="229" width="2.4187%" height="15" fill="rgb(249,206,44)"/><text x="66.5387%" y="239.50">&lt;s..</text></g><g><title>&lt;spacelox_core::value::Instance as spacelox_core::managed::Trace&gt;::trace (31 samples, 2.34%)</title><rect x="66.3643%" y="213" width="2.3432%" height="15" fill="rgb(251,153,30)"/><text x="66.6143%" y="223.50">&lt;..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (10 samples, 0.76%)</title><rect x="67.9516%" y="197" width="0.7559%" height="15" fill="rgb(239,152,38)"/><text x="68.2016%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::iter (10 samples, 0.76%)</title><rect x="67.9516%" y="181" width="0.7559%" height="15" fill="rgb(249,139,47)"/><text x="68.2016%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter (10 samples, 0.76%)</title><rect x="67.9516%" y="165" width="0.7559%" height="15" fill="rgb(244,64,35)"/><text x="68.2016%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (8 samples, 0.60%)</title><rect x="68.1028%" y="149" width="0.6047%" height="15" fill="rgb(216,46,15)"/><text x="68.3528%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (8 samples, 0.60%)</title><rect x="68.1028%" y="133" width="0.6047%" height="15" fill="rgb(250,74,19)"/><text x="68.3528%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (8 samples, 0.60%)</title><rect x="68.1028%" y="117" width="0.6047%" height="15" fill="rgb(249,42,33)"/><text x="68.3528%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (5 samples, 0.38%)</title><rect x="68.7075%" y="229" width="0.3779%" height="15" fill="rgb(242,149,17)"/><text x="68.9575%" y="239.50"></text></g><g><title>core::ptr::read (4 samples, 0.30%)</title><rect x="68.7831%" y="213" width="0.3023%" height="15" fill="rgb(244,29,21)"/><text x="69.0331%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.30%)</title><rect x="68.7831%" y="197" width="0.3023%" height="15" fill="rgb(220,130,37)"/><text x="69.0331%" y="207.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.15%)</title><rect x="69.3122%" y="165" width="0.1512%" height="15" fill="rgb(211,67,2)"/><text x="69.5622%" y="175.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.30%)</title><rect x="69.2366%" y="181" width="0.3023%" height="15" fill="rgb(235,68,52)"/><text x="69.4866%" y="191.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::call (155 samples, 11.72%)</title><rect x="58.5790%" y="309" width="11.7158%" height="15" fill="rgb(246,142,3)"/><text x="58.8290%" y="319.50">spacelox_vm::vm::..</text></g><g><title>spacelox_vm::memory::Gc::clone_managed (149 samples, 11.26%)</title><rect x="59.0325%" y="293" width="11.2623%" height="15" fill="rgb(241,25,7)"/><text x="59.2825%" y="303.50">spacelox_vm::memo..</text></g><g><title>spacelox_vm::memory::Gc::allocate (147 samples, 11.11%)</title><rect x="59.1837%" y="277" width="11.1111%" height="15" fill="rgb(242,119,39)"/><text x="59.4337%" y="287.50">spacelox_vm::mem..</text></g><g><title>spacelox_vm::memory::Gc::collect_garbage (113 samples, 8.54%)</title><rect x="61.7536%" y="261" width="8.5412%" height="15" fill="rgb(241,98,45)"/><text x="62.0036%" y="271.50">spacelox_vm:..</text></g><g><title>spacelox_vm::memory::Gc::trace (53 samples, 4.01%)</title><rect x="66.2887%" y="245" width="4.0060%" height="15" fill="rgb(254,28,30)"/><text x="66.5387%" y="255.50">spac..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (16 samples, 1.21%)</title><rect x="69.0854%" y="229" width="1.2094%" height="15" fill="rgb(241,142,54)"/><text x="69.3354%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (14 samples, 1.06%)</title><rect x="69.2366%" y="213" width="1.0582%" height="15" fill="rgb(222,85,15)"/><text x="69.4866%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 1.06%)</title><rect x="69.2366%" y="197" width="1.0582%" height="15" fill="rgb(210,85,47)"/><text x="69.4866%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold::ok::_{{closure}} (10 samples, 0.76%)</title><rect x="69.5389%" y="181" width="0.7559%" height="15" fill="rgb(224,206,25)"/><text x="69.7889%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (10 samples, 0.76%)</title><rect x="69.5389%" y="165" width="0.7559%" height="15" fill="rgb(243,201,19)"/><text x="69.7889%" y="175.50"></text></g><g><title>spacelox_vm::memory::Gc::trace::_{{closure}} (10 samples, 0.76%)</title><rect x="69.5389%" y="149" width="0.7559%" height="15" fill="rgb(236,59,4)"/><text x="69.7889%" y="159.50"></text></g><g><title>spacelox_vm::memory::Gc::mark_obj (10 samples, 0.76%)</title><rect x="69.5389%" y="133" width="0.7559%" height="15" fill="rgb(254,179,45)"/><text x="69.7889%" y="143.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (5 samples, 0.38%)</title><rect x="70.2948%" y="245" width="0.3779%" height="15" fill="rgb(226,14,10)"/><text x="70.5448%" y="255.50"></text></g><g><title>core::ptr::hash (4 samples, 0.30%)</title><rect x="70.3704%" y="229" width="0.3023%" height="15" fill="rgb(244,27,41)"/><text x="70.6204%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (4 samples, 0.30%)</title><rect x="70.3704%" y="213" width="0.3023%" height="15" fill="rgb(235,35,32)"/><text x="70.6204%" y="223.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.30%)</title><rect x="70.3704%" y="197" width="0.3023%" height="15" fill="rgb(218,68,31)"/><text x="70.6204%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.30%)</title><rect x="70.3704%" y="181" width="0.3023%" height="15" fill="rgb(207,120,37)"/><text x="70.6204%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.30%)</title><rect x="70.3704%" y="165" width="0.3023%" height="15" fill="rgb(227,98,0)"/><text x="70.6204%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.30%)</title><rect x="70.3704%" y="149" width="0.3023%" height="15" fill="rgb(207,7,3)"/><text x="70.6204%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.15%)</title><rect x="70.5215%" y="133" width="0.1512%" height="15" fill="rgb(206,98,19)"/><text x="70.7715%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.83%)</title><rect x="70.2948%" y="261" width="0.8314%" height="15" fill="rgb(217,5,26)"/><text x="70.5448%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.38%)</title><rect x="70.7483%" y="245" width="0.3779%" height="15" fill="rgb(235,190,38)"/><text x="70.9983%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.23%)</title><rect x="70.8995%" y="229" width="0.2268%" height="15" fill="rgb(247,86,24)"/><text x="71.1495%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.23%)</title><rect x="70.8995%" y="213" width="0.2268%" height="15" fill="rgb(205,101,16)"/><text x="71.1495%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.23%)</title><rect x="70.8995%" y="197" width="0.2268%" height="15" fill="rgb(246,168,33)"/><text x="71.1495%" y="207.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::invoke_from_class (169 samples, 12.77%)</title><rect x="58.5034%" y="325" width="12.7740%" height="15" fill="rgb(231,114,1)"/><text x="58.7534%" y="335.50">spacelox_vm::vm::Vm..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (13 samples, 0.98%)</title><rect x="70.2948%" y="309" width="0.9826%" height="15" fill="rgb(207,184,53)"/><text x="70.5448%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (13 samples, 0.98%)</title><rect x="70.2948%" y="293" width="0.9826%" height="15" fill="rgb(224,95,51)"/><text x="70.5448%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (13 samples, 0.98%)</title><rect x="70.2948%" y="277" width="0.9826%" height="15" fill="rgb(212,188,45)"/><text x="70.5448%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 0.15%)</title><rect x="71.1262%" y="261" width="0.1512%" height="15" fill="rgb(223,154,38)"/><text x="71.3762%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.15%)</title><rect x="71.1262%" y="245" width="0.1512%" height="15" fill="rgb(251,22,52)"/><text x="71.3762%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.15%)</title><rect x="71.1262%" y="229" width="0.1512%" height="15" fill="rgb(229,209,22)"/><text x="71.3762%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.15%)</title><rect x="71.1262%" y="213" width="0.1512%" height="15" fill="rgb(234,138,34)"/><text x="71.3762%" y="223.50"></text></g><g><title>core::core_arch::simd::i8x16::new (2 samples, 0.15%)</title><rect x="71.1262%" y="197" width="0.1512%" height="15" fill="rgb(212,95,11)"/><text x="71.3762%" y="207.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (5 samples, 0.38%)</title><rect x="71.3530%" y="261" width="0.3779%" height="15" fill="rgb(240,179,47)"/><text x="71.6030%" y="271.50"></text></g><g><title>core::ptr::hash (4 samples, 0.30%)</title><rect x="71.4286%" y="245" width="0.3023%" height="15" fill="rgb(240,163,11)"/><text x="71.6786%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (4 samples, 0.30%)</title><rect x="71.4286%" y="229" width="0.3023%" height="15" fill="rgb(236,37,12)"/><text x="71.6786%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.30%)</title><rect x="71.4286%" y="213" width="0.3023%" height="15" fill="rgb(232,164,16)"/><text x="71.6786%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.30%)</title><rect x="71.4286%" y="197" width="0.3023%" height="15" fill="rgb(244,205,15)"/><text x="71.6786%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.30%)</title><rect x="71.4286%" y="181" width="0.3023%" height="15" fill="rgb(223,117,47)"/><text x="71.6786%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.30%)</title><rect x="71.4286%" y="165" width="0.3023%" height="15" fill="rgb(244,107,35)"/><text x="71.6786%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.15%)</title><rect x="71.5797%" y="149" width="0.1512%" height="15" fill="rgb(205,140,8)"/><text x="71.8297%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.15%)</title><rect x="71.8821%" y="197" width="0.1512%" height="15" fill="rgb(228,84,46)"/><text x="72.1321%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.38%)</title><rect x="71.7309%" y="261" width="0.3779%" height="15" fill="rgb(254,188,9)"/><text x="71.9809%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.38%)</title><rect x="71.7309%" y="245" width="0.3779%" height="15" fill="rgb(206,112,54)"/><text x="71.9809%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.38%)</title><rect x="71.7309%" y="229" width="0.3779%" height="15" fill="rgb(216,84,49)"/><text x="71.9809%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.23%)</title><rect x="71.8821%" y="213" width="0.2268%" height="15" fill="rgb(214,194,35)"/><text x="72.1321%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (12 samples, 0.91%)</title><rect x="71.2774%" y="277" width="0.9070%" height="15" fill="rgb(249,28,3)"/><text x="71.5274%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (13 samples, 0.98%)</title><rect x="72.3356%" y="261" width="0.9826%" height="15" fill="rgb(222,56,52)"/><text x="72.5856%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (13 samples, 0.98%)</title><rect x="72.3356%" y="245" width="0.9826%" height="15" fill="rgb(245,217,50)"/><text x="72.5856%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.98%)</title><rect x="72.3356%" y="229" width="0.9826%" height="15" fill="rgb(213,201,24)"/><text x="72.5856%" y="239.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_invoke (200 samples, 15.12%)</title><rect x="58.3522%" y="341" width="15.1172%" height="15" fill="rgb(248,116,28)"/><text x="58.6022%" y="351.50">spacelox_vm::vm::VmExec..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (29 samples, 2.19%)</title><rect x="71.2774%" y="325" width="2.1920%" height="15" fill="rgb(219,72,43)"/><text x="71.5274%" y="335.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (29 samples, 2.19%)</title><rect x="71.2774%" y="309" width="2.1920%" height="15" fill="rgb(209,138,14)"/><text x="71.5274%" y="319.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (29 samples, 2.19%)</title><rect x="71.2774%" y="293" width="2.1920%" height="15" fill="rgb(222,18,33)"/><text x="71.5274%" y="303.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (17 samples, 1.28%)</title><rect x="72.1844%" y="277" width="1.2850%" height="15" fill="rgb(213,199,7)"/><text x="72.4344%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.15%)</title><rect x="73.3182%" y="261" width="0.1512%" height="15" fill="rgb(250,110,10)"/><text x="73.5682%" y="271.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_short (3 samples, 0.23%)</title><rect x="73.5450%" y="325" width="0.2268%" height="15" fill="rgb(248,123,6)"/><text x="73.7950%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_jump_if_not_false (5 samples, 0.38%)</title><rect x="73.4694%" y="341" width="0.3779%" height="15" fill="rgb(206,91,31)"/><text x="73.7194%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::close_upvalues (3 samples, 0.23%)</title><rect x="74.3764%" y="325" width="0.2268%" height="15" fill="rgb(211,154,13)"/><text x="74.6264%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::pop (8 samples, 0.60%)</title><rect x="74.6788%" y="325" width="0.6047%" height="15" fill="rgb(225,148,7)"/><text x="74.9288%" y="335.50"></text></g><g><title>core::mem::replace (7 samples, 0.53%)</title><rect x="74.7543%" y="309" width="0.5291%" height="15" fill="rgb(220,160,43)"/><text x="75.0043%" y="319.50"></text></g><g><title>core::mem::swap (4 samples, 0.30%)</title><rect x="74.9811%" y="293" width="0.3023%" height="15" fill="rgb(213,52,39)"/><text x="75.2311%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (4 samples, 0.30%)</title><rect x="74.9811%" y="277" width="0.3023%" height="15" fill="rgb(243,137,7)"/><text x="75.2311%" y="287.50"></text></g><g><title>core::ptr::write (3 samples, 0.23%)</title><rect x="75.0567%" y="261" width="0.2268%" height="15" fill="rgb(230,79,13)"/><text x="75.3067%" y="271.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_return (26 samples, 1.97%)</title><rect x="73.9229%" y="341" width="1.9652%" height="15" fill="rgb(247,105,23)"/><text x="74.1729%" y="351.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor::push (8 samples, 0.60%)</title><rect x="75.2834%" y="325" width="0.6047%" height="15" fill="rgb(223,179,41)"/><text x="75.5334%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::set_val (3 samples, 0.23%)</title><rect x="75.6614%" y="309" width="0.2268%" height="15" fill="rgb(218,9,34)"/><text x="75.9114%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::op_set_local (4 samples, 0.30%)</title><rect x="75.8881%" y="341" width="0.3023%" height="15" fill="rgb(222,106,8)"/><text x="76.1381%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (3 samples, 0.23%)</title><rect x="75.9637%" y="325" width="0.2268%" height="15" fill="rgb(211,220,0)"/><text x="76.2137%" y="335.50"></text></g><g><title>core::ptr::read (3 samples, 0.23%)</title><rect x="77.8534%" y="261" width="0.2268%" height="15" fill="rgb(229,52,16)"/><text x="78.1034%" y="271.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::pop (23 samples, 1.74%)</title><rect x="76.7196%" y="325" width="1.7385%" height="15" fill="rgb(212,155,18)"/><text x="76.9696%" y="335.50"></text></g><g><title>core::mem::replace (17 samples, 1.28%)</title><rect x="77.1731%" y="309" width="1.2850%" height="15" fill="rgb(242,21,14)"/><text x="77.4231%" y="319.50"></text></g><g><title>core::mem::swap (8 samples, 0.60%)</title><rect x="77.8534%" y="293" width="0.6047%" height="15" fill="rgb(222,19,48)"/><text x="78.1034%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (8 samples, 0.60%)</title><rect x="77.8534%" y="277" width="0.6047%" height="15" fill="rgb(232,45,27)"/><text x="78.1034%" y="287.50"></text></g><g><title>core::ptr::write (5 samples, 0.38%)</title><rect x="78.0801%" y="261" width="0.3779%" height="15" fill="rgb(249,103,42)"/><text x="78.3301%" y="271.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::push (30 samples, 2.27%)</title><rect x="78.4580%" y="325" width="2.2676%" height="15" fill="rgb(246,81,33)"/><text x="78.7080%" y="335.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor::set_val (13 samples, 0.98%)</title><rect x="79.7430%" y="309" width="0.9826%" height="15" fill="rgb(252,33,42)"/><text x="79.9930%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.15%)</title><rect x="80.8012%" y="309" width="0.1512%" height="15" fill="rgb(209,212,41)"/><text x="81.0512%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.15%)</title><rect x="80.8012%" y="293" width="0.1512%" height="15" fill="rgb(207,154,6)"/><text x="81.0512%" y="303.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_byte (5 samples, 0.38%)</title><rect x="80.7256%" y="325" width="0.3779%" height="15" fill="rgb(223,64,47)"/><text x="80.9756%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_string (7 samples, 0.53%)</title><rect x="81.1036%" y="325" width="0.5291%" height="15" fill="rgb(211,161,38)"/><text x="81.3536%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::read_constant (7 samples, 0.53%)</title><rect x="81.1036%" y="309" width="0.5291%" height="15" fill="rgb(219,138,40)"/><text x="81.3536%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.38%)</title><rect x="81.2547%" y="293" width="0.3779%" height="15" fill="rgb(241,228,46)"/><text x="81.5047%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.38%)</title><rect x="81.2547%" y="277" width="0.3779%" height="15" fill="rgb(223,209,38)"/><text x="81.5047%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.38%)</title><rect x="82.8420%" y="165" width="0.3779%" height="15" fill="rgb(236,164,45)"/><text x="83.0920%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.15%)</title><rect x="83.0688%" y="149" width="0.1512%" height="15" fill="rgb(231,15,5)"/><text x="83.3188%" y="159.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (15 samples, 1.13%)</title><rect x="82.3129%" y="277" width="1.1338%" height="15" fill="rgb(252,35,15)"/><text x="82.5629%" y="287.50"></text></g><g><title>core::ptr::hash (15 samples, 1.13%)</title><rect x="82.3129%" y="261" width="1.1338%" height="15" fill="rgb(248,181,18)"/><text x="82.5629%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (15 samples, 1.13%)</title><rect x="82.3129%" y="245" width="1.1338%" height="15" fill="rgb(233,39,42)"/><text x="82.5629%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (15 samples, 1.13%)</title><rect x="82.3129%" y="229" width="1.1338%" height="15" fill="rgb(238,110,33)"/><text x="82.5629%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 1.06%)</title><rect x="82.3885%" y="213" width="1.0582%" height="15" fill="rgb(233,195,10)"/><text x="82.6385%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 1.06%)</title><rect x="82.3885%" y="197" width="1.0582%" height="15" fill="rgb(254,105,3)"/><text x="82.6385%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 1.06%)</title><rect x="82.3885%" y="181" width="1.0582%" height="15" fill="rgb(221,225,9)"/><text x="82.6385%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.23%)</title><rect x="83.2200%" y="165" width="0.2268%" height="15" fill="rgb(224,227,45)"/><text x="83.4700%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.30%)</title><rect x="83.5223%" y="229" width="0.3023%" height="15" fill="rgb(229,198,43)"/><text x="83.7723%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.23%)</title><rect x="83.9002%" y="213" width="0.2268%" height="15" fill="rgb(206,209,35)"/><text x="84.1502%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.91%)</title><rect x="83.4467%" y="277" width="0.9070%" height="15" fill="rgb(245,195,53)"/><text x="83.6967%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.91%)</title><rect x="83.4467%" y="261" width="0.9070%" height="15" fill="rgb(240,92,26)"/><text x="83.6967%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.91%)</title><rect x="83.4467%" y="245" width="0.9070%" height="15" fill="rgb(207,40,23)"/><text x="83.6967%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.53%)</title><rect x="83.8246%" y="229" width="0.5291%" height="15" fill="rgb(223,111,35)"/><text x="84.0746%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.23%)</title><rect x="84.1270%" y="213" width="0.2268%" height="15" fill="rgb(229,147,28)"/><text x="84.3770%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (28 samples, 2.12%)</title><rect x="82.3129%" y="293" width="2.1164%" height="15" fill="rgb(211,29,28)"/><text x="82.5629%" y="303.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (2 samples, 0.15%)</title><rect x="84.4293%" y="277" width="0.1512%" height="15" fill="rgb(228,72,33)"/><text x="84.6793%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.45%)</title><rect x="84.7317%" y="261" width="0.4535%" height="15" fill="rgb(205,214,31)"/><text x="84.9817%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (11 samples, 0.83%)</title><rect x="84.4293%" y="293" width="0.8314%" height="15" fill="rgb(224,111,15)"/><text x="84.6793%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.53%)</title><rect x="84.7317%" y="277" width="0.5291%" height="15" fill="rgb(253,21,26)"/><text x="84.9817%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.45%)</title><rect x="86.3946%" y="261" width="0.4535%" height="15" fill="rgb(245,139,43)"/><text x="86.6446%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (6 samples, 0.45%)</title><rect x="86.3946%" y="245" width="0.4535%" height="15" fill="rgb(252,170,7)"/><text x="86.6446%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (17 samples, 1.28%)</title><rect x="85.7143%" y="277" width="1.2850%" height="15" fill="rgb(231,118,14)"/><text x="85.9643%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::add (4 samples, 0.30%)</title><rect x="87.2260%" y="197" width="0.3023%" height="15" fill="rgb(238,83,0)"/><text x="87.4760%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.53%)</title><rect x="87.2260%" y="229" width="0.5291%" height="15" fill="rgb(221,39,39)"/><text x="87.4760%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.53%)</title><rect x="87.2260%" y="213" width="0.5291%" height="15" fill="rgb(222,119,46)"/><text x="87.4760%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.23%)</title><rect x="87.5283%" y="197" width="0.2268%" height="15" fill="rgb(222,165,49)"/><text x="87.7783%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (2 samples, 0.15%)</title><rect x="87.6039%" y="181" width="0.1512%" height="15" fill="rgb(219,113,52)"/><text x="87.8539%" y="191.50"></text></g><g><title>core::mem::swap (12 samples, 0.91%)</title><rect x="87.7551%" y="229" width="0.9070%" height="15" fill="rgb(214,7,15)"/><text x="88.0051%" y="239.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (12 samples, 0.91%)</title><rect x="87.7551%" y="213" width="0.9070%" height="15" fill="rgb(235,32,4)"/><text x="88.0051%" y="223.50"></text></g><g><title>core::ptr::swap_nonoverlapping (12 samples, 0.91%)</title><rect x="87.7551%" y="197" width="0.9070%" height="15" fill="rgb(238,90,54)"/><text x="88.0051%" y="207.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (12 samples, 0.91%)</title><rect x="87.7551%" y="181" width="0.9070%" height="15" fill="rgb(213,208,19)"/><text x="88.0051%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.91%)</title><rect x="87.7551%" y="165" width="0.9070%" height="15" fill="rgb(233,156,4)"/><text x="88.0051%" y="175.50"></text></g><g><title>__GI___libc_free (2 samples, 0.15%)</title><rect x="88.6621%" y="149" width="0.1512%" height="15" fill="rgb(207,194,5)"/><text x="88.9121%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.83%)</title><rect x="88.6621%" y="165" width="0.8314%" height="15" fill="rgb(206,111,30)"/><text x="88.9121%" y="175.50"></text></g><g><title>_int_free (9 samples, 0.68%)</title><rect x="88.8133%" y="149" width="0.6803%" height="15" fill="rgb(243,70,54)"/><text x="89.0633%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (17 samples, 1.28%)</title><rect x="88.6621%" y="229" width="1.2850%" height="15" fill="rgb(242,28,8)"/><text x="88.9121%" y="239.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.28%)</title><rect x="88.6621%" y="213" width="1.2850%" height="15" fill="rgb(219,106,18)"/><text x="88.9121%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize::_{{closure}} (17 samples, 1.28%)</title><rect x="88.6621%" y="197" width="1.2850%" height="15" fill="rgb(244,222,10)"/><text x="88.9121%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (17 samples, 1.28%)</title><rect x="88.6621%" y="181" width="1.2850%" height="15" fill="rgb(236,179,52)"/><text x="88.9121%" y="191.50"></text></g><g><title>hashbrown::raw::calculate_layout (5 samples, 0.38%)</title><rect x="89.5692%" y="165" width="0.3779%" height="15" fill="rgb(213,23,39)"/><text x="89.8192%" y="175.50"></text></g><g><title>core::alloc::Layout::extend (5 samples, 0.38%)</title><rect x="89.5692%" y="149" width="0.3779%" height="15" fill="rgb(238,48,10)"/><text x="89.8192%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.15%)</title><rect x="89.7959%" y="133" width="0.1512%" height="15" fill="rgb(251,196,23)"/><text x="90.0459%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.15%)</title><rect x="89.7959%" y="117" width="0.1512%" height="15" fill="rgb(250,152,24)"/><text x="90.0459%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.23%)</title><rect x="90.8541%" y="69" width="0.2268%" height="15" fill="rgb(209,150,17)"/><text x="91.1041%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 0.83%)</title><rect x="90.4762%" y="85" width="0.8314%" height="15" fill="rgb(234,202,34)"/><text x="90.7262%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.23%)</title><rect x="91.0809%" y="69" width="0.2268%" height="15" fill="rgb(253,148,53)"/><text x="91.3309%" y="79.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (21 samples, 1.59%)</title><rect x="90.0227%" y="197" width="1.5873%" height="15" fill="rgb(218,129,16)"/><text x="90.2727%" y="207.50"></text></g><g><title>core::ptr::hash (20 samples, 1.51%)</title><rect x="90.0983%" y="181" width="1.5117%" height="15" fill="rgb(216,85,19)"/><text x="90.3483%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (20 samples, 1.51%)</title><rect x="90.0983%" y="165" width="1.5117%" height="15" fill="rgb(235,228,7)"/><text x="90.3483%" y="175.50"></text></g><g><title>core::hash::Hasher::write_usize (20 samples, 1.51%)</title><rect x="90.0983%" y="149" width="1.5117%" height="15" fill="rgb(245,175,0)"/><text x="90.3483%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (19 samples, 1.44%)</title><rect x="90.1738%" y="133" width="1.4361%" height="15" fill="rgb(208,168,36)"/><text x="90.4238%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (19 samples, 1.44%)</title><rect x="90.1738%" y="117" width="1.4361%" height="15" fill="rgb(246,171,24)"/><text x="90.4238%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 1.44%)</title><rect x="90.1738%" y="101" width="1.4361%" height="15" fill="rgb(215,142,24)"/><text x="90.4238%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.30%)</title><rect x="91.3076%" y="85" width="0.3023%" height="15" fill="rgb(250,187,7)"/><text x="91.5576%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.15%)</title><rect x="91.8367%" y="149" width="0.1512%" height="15" fill="rgb(228,66,33)"/><text x="92.0867%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.15%)</title><rect x="91.8367%" y="133" width="0.1512%" height="15" fill="rgb(234,215,21)"/><text x="92.0867%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 1.13%)</title><rect x="91.6100%" y="197" width="1.1338%" height="15" fill="rgb(222,191,20)"/><text x="91.8600%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 1.13%)</title><rect x="91.6100%" y="181" width="1.1338%" height="15" fill="rgb(245,79,54)"/><text x="91.8600%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 1.13%)</title><rect x="91.6100%" y="165" width="1.1338%" height="15" fill="rgb(240,10,37)"/><text x="91.8600%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10 samples, 0.76%)</title><rect x="91.9879%" y="149" width="0.7559%" height="15" fill="rgb(214,192,32)"/><text x="92.2379%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 0.60%)</title><rect x="92.1391%" y="133" width="0.6047%" height="15" fill="rgb(209,36,54)"/><text x="92.3891%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::_{{closure}} (39 samples, 2.95%)</title><rect x="89.9471%" y="229" width="2.9478%" height="15" fill="rgb(220,10,11)"/><text x="90.1971%" y="239.50">ha..</text></g><g><title>hashbrown::map::make_hash (38 samples, 2.87%)</title><rect x="90.0227%" y="213" width="2.8723%" height="15" fill="rgb(221,106,17)"/><text x="90.2727%" y="223.50">ha..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.15%)</title><rect x="92.7438%" y="197" width="0.1512%" height="15" fill="rgb(251,142,44)"/><text x="92.9938%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (2 samples, 0.15%)</title><rect x="92.8949%" y="229" width="0.1512%" height="15" fill="rgb(238,13,15)"/><text x="93.1449%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (2 samples, 0.15%)</title><rect x="92.8949%" y="213" width="0.1512%" height="15" fill="rgb(208,107,27)"/><text x="93.1449%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.15%)</title><rect x="92.8949%" y="197" width="0.1512%" height="15" fill="rgb(205,136,37)"/><text x="93.1449%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.15%)</title><rect x="93.2729%" y="213" width="0.1512%" height="15" fill="rgb(250,205,27)"/><text x="93.5229%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (2 samples, 0.15%)</title><rect x="93.2729%" y="197" width="0.1512%" height="15" fill="rgb(210,80,43)"/><text x="93.5229%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (5 samples, 0.38%)</title><rect x="93.1217%" y="229" width="0.3779%" height="15" fill="rgb(247,160,36)"/><text x="93.3717%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.15%)</title><rect x="93.4996%" y="197" width="0.1512%" height="15" fill="rgb(234,13,49)"/><text x="93.7496%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.15%)</title><rect x="93.4996%" y="181" width="0.1512%" height="15" fill="rgb(234,122,0)"/><text x="93.7496%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter (3 samples, 0.23%)</title><rect x="93.4996%" y="229" width="0.2268%" height="15" fill="rgb(207,146,38)"/><text x="93.7496%" y="239.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (3 samples, 0.23%)</title><rect x="93.4996%" y="213" width="0.2268%" height="15" fill="rgb(207,177,25)"/><text x="93.7496%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.15%)</title><rect x="93.8020%" y="213" width="0.1512%" height="15" fill="rgb(211,178,42)"/><text x="94.0520%" y="223.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.15%)</title><rect x="93.8020%" y="197" width="0.1512%" height="15" fill="rgb(230,69,54)"/><text x="94.0520%" y="207.50"></text></g><g><title>_int_malloc (42 samples, 3.17%)</title><rect x="94.1799%" y="165" width="3.1746%" height="15" fill="rgb(214,135,41)"/><text x="94.4299%" y="175.50">_in..</text></g><g><title>unlink_chunk (2 samples, 0.15%)</title><rect x="97.2033%" y="149" width="0.1512%" height="15" fill="rgb(237,67,25)"/><text x="97.4533%" y="159.50"></text></g><g><title>checked_request2size (6 samples, 0.45%)</title><rect x="97.3545%" y="165" width="0.4535%" height="15" fill="rgb(222,189,50)"/><text x="97.6045%" y="175.50"></text></g><g><title>__GI___libc_malloc (52 samples, 3.93%)</title><rect x="94.0287%" y="181" width="3.9305%" height="15" fill="rgb(245,148,34)"/><text x="94.2787%" y="191.50">__GI..</text></g><g><title>tcache_get (2 samples, 0.15%)</title><rect x="97.8080%" y="165" width="0.1512%" height="15" fill="rgb(222,29,6)"/><text x="98.0580%" y="175.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 4.16%)</title><rect x="94.0287%" y="197" width="4.1572%" height="15" fill="rgb(221,189,43)"/><text x="94.2787%" y="207.50">alloc..</text></g><g><title>__rdl_alloc (3 samples, 0.23%)</title><rect x="97.9592%" y="181" width="0.2268%" height="15" fill="rgb(207,36,27)"/><text x="98.2092%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.23%)</title><rect x="97.9592%" y="165" width="0.2268%" height="15" fill="rgb(217,90,24)"/><text x="98.2092%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (59 samples, 4.46%)</title><rect x="93.9531%" y="213" width="4.4596%" height="15" fill="rgb(224,66,35)"/><text x="94.2031%" y="223.50">hashb..</text></g><g><title>hashbrown::raw::calculate_layout (3 samples, 0.23%)</title><rect x="98.1859%" y="197" width="0.2268%" height="15" fill="rgb(221,13,50)"/><text x="98.4359%" y="207.50"></text></g><g><title>core::alloc::Layout::extend (2 samples, 0.15%)</title><rect x="98.2615%" y="181" width="0.1512%" height="15" fill="rgb(236,68,49)"/><text x="98.5115%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::try_with_capacity (67 samples, 5.06%)</title><rect x="93.8020%" y="229" width="5.0642%" height="15" fill="rgb(229,146,28)"/><text x="94.0520%" y="239.50">hashbr..</text></g><g><title>hashbrown::raw::capacity_to_buckets (6 samples, 0.45%)</title><rect x="98.4127%" y="213" width="0.4535%" height="15" fill="rgb(225,31,38)"/><text x="98.6627%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (4 samples, 0.30%)</title><rect x="98.5639%" y="197" width="0.3023%" height="15" fill="rgb(250,208,3)"/><text x="98.8139%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (4 samples, 0.30%)</title><rect x="98.5639%" y="181" width="0.3023%" height="15" fill="rgb(246,54,23)"/><text x="98.8139%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (156 samples, 11.79%)</title><rect x="87.2260%" y="245" width="11.7914%" height="15" fill="rgb(243,76,11)"/><text x="87.4760%" y="255.50">hashbrown::raw::R..</text></g><g><title>hashbrown::scopeguard::guard (2 samples, 0.15%)</title><rect x="98.8662%" y="229" width="0.1512%" height="15" fill="rgb(245,21,50)"/><text x="99.1162%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (160 samples, 12.09%)</title><rect x="86.9992%" y="277" width="12.0937%" height="15" fill="rgb(228,9,43)"/><text x="87.2492%" y="287.50">hashbrown::raw::Ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (160 samples, 12.09%)</title><rect x="86.9992%" y="261" width="12.0937%" height="15" fill="rgb(208,100,47)"/><text x="87.2492%" y="271.50">hashbrown::raw::Ra..</text></g><g><title>spacelox_vm::vm::VmExecutor::op_set_property (309 samples, 23.36%)</title><rect x="76.1905%" y="341" width="23.3560%" height="15" fill="rgb(232,26,8)"/><text x="76.4405%" y="351.50">spacelox_vm::vm::VmExecutor::op_set_p..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (237 samples, 17.91%)</title><rect x="81.6327%" y="325" width="17.9138%" height="15" fill="rgb(216,166,38)"/><text x="81.8827%" y="335.50">std::collections::hash::map:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (234 samples, 17.69%)</title><rect x="81.8594%" y="309" width="17.6871%" height="15" fill="rgb(251,202,51)"/><text x="82.1094%" y="319.50">hashbrown::map::HashMap&lt;K,V..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (189 samples, 14.29%)</title><rect x="85.2608%" y="293" width="14.2857%" height="15" fill="rgb(254,216,34)"/><text x="85.5108%" y="303.50">hashbrown::raw::RawTab..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::set_ctrl (6 samples, 0.45%)</title><rect x="99.0930%" y="277" width="0.4535%" height="15" fill="rgb(251,32,27)"/><text x="99.3430%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (5 samples, 0.38%)</title><rect x="99.1686%" y="261" width="0.3779%" height="15" fill="rgb(208,127,28)"/><text x="99.4186%" y="271.50"></text></g><g><title>__libc_start_main (1,160 samples, 87.68%)</title><rect x="12.2449%" y="533" width="87.6795%" height="15" fill="rgb(224,137,22)"/><text x="12.4949%" y="543.50">__libc_start_main</text></g><g><title>main (1,160 samples, 87.68%)</title><rect x="12.2449%" y="517" width="87.6795%" height="15" fill="rgb(254,70,32)"/><text x="12.4949%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (1,160 samples, 87.68%)</title><rect x="12.2449%" y="501" width="87.6795%" height="15" fill="rgb(229,75,37)"/><text x="12.4949%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,160 samples, 87.68%)</title><rect x="12.2449%" y="485" width="87.6795%" height="15" fill="rgb(252,64,23)"/><text x="12.4949%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,160 samples, 87.68%)</title><rect x="12.2449%" y="469" width="87.6795%" height="15" fill="rgb(232,162,48)"/><text x="12.4949%" y="479.50">std::panicking::try</text></g><g><title>__rust_maybe_catch_panic (1,160 samples, 87.68%)</title><rect x="12.2449%" y="453" width="87.6795%" height="15" fill="rgb(246,160,12)"/><text x="12.4949%" y="463.50">__rust_maybe_catch_panic</text></g><g><title>std::panicking::try::do_call (1,160 samples, 87.68%)</title><rect x="12.2449%" y="437" width="87.6795%" height="15" fill="rgb(247,166,0)"/><text x="12.4949%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,160 samples, 87.68%)</title><rect x="12.2449%" y="421" width="87.6795%" height="15" fill="rgb(249,219,21)"/><text x="12.4949%" y="431.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::rt::lang_start::_{{closure}} (1,160 samples, 87.68%)</title><rect x="12.2449%" y="405" width="87.6795%" height="15" fill="rgb(205,209,3)"/><text x="12.4949%" y="415.50">std::rt::lang_start::_{{closure}}</text></g><g><title>spacelox::main (1,160 samples, 87.68%)</title><rect x="12.2449%" y="389" width="87.6795%" height="15" fill="rgb(243,44,1)"/><text x="12.4949%" y="399.50">spacelox::main</text></g><g><title>spacelox_vm::vm::Vm::interpret (1,160 samples, 87.68%)</title><rect x="12.2449%" y="373" width="87.6795%" height="15" fill="rgb(206,159,16)"/><text x="12.4949%" y="383.50">spacelox_vm::vm::Vm::interpret</text></g><g><title>spacelox_vm::vm::VmExecutor::run (1,160 samples, 87.68%)</title><rect x="12.2449%" y="357" width="87.6795%" height="15" fill="rgb(244,77,30)"/><text x="12.4949%" y="367.50">spacelox_vm::vm::VmExecutor::run</text></g><g><title>spacelox_vm::vm::VmExecutor::op_sub (5 samples, 0.38%)</title><rect x="99.5465%" y="341" width="0.3779%" height="15" fill="rgb(218,69,12)"/><text x="99.7965%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor::pop (4 samples, 0.30%)</title><rect x="99.6221%" y="325" width="0.3023%" height="15" fill="rgb(212,87,7)"/><text x="99.8721%" y="335.50"></text></g><g><title>core::mem::replace (3 samples, 0.23%)</title><rect x="99.6977%" y="309" width="0.2268%" height="15" fill="rgb(245,114,25)"/><text x="99.9477%" y="319.50"></text></g><g><title>core::mem::swap (3 samples, 0.23%)</title><rect x="99.6977%" y="293" width="0.2268%" height="15" fill="rgb(210,61,42)"/><text x="99.9477%" y="303.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (3 samples, 0.23%)</title><rect x="99.6977%" y="277" width="0.2268%" height="15" fill="rgb(211,52,33)"/><text x="99.9477%" y="287.50"></text></g><g><title>core::ptr::read (2 samples, 0.15%)</title><rect x="99.7732%" y="261" width="0.1512%" height="15" fill="rgb(234,58,33)"/><text x="100.0232%" y="271.50"></text></g><g><title>all (1,323 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(220,115,36)"/><text x="0.2500%" y="591.50"></text></g><g><title>spacelox (1,318 samples, 99.62%)</title><rect x="0.3779%" y="565" width="99.6221%" height="15" fill="rgb(243,153,54)"/><text x="0.6279%" y="575.50">spacelox</text></g><g><title>_start (1,161 samples, 87.76%)</title><rect x="12.2449%" y="549" width="87.7551%" height="15" fill="rgb(251,47,18)"/><text x="12.4949%" y="559.50">_start</text></g></svg></svg>