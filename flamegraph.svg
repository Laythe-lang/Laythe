<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="661.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="661.00"> </text><svg id="frames" x="10" width="1180"><g><title>perf (5 samples, 3.76%)</title><rect x="0.0000%" y="613" width="3.7594%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="623.50">perf</text></g><g><title>[unknown] (5 samples, 3.76%)</title><rect x="0.0000%" y="597" width="3.7594%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="607.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.76%)</title><rect x="0.0000%" y="581" width="3.7594%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="591.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.76%)</title><rect x="0.0000%" y="565" width="3.7594%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="575.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.76%)</title><rect x="0.0000%" y="549" width="3.7594%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="559.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.76%)</title><rect x="0.0000%" y="533" width="3.7594%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="543.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.76%)</title><rect x="0.0000%" y="517" width="3.7594%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="527.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.76%)</title><rect x="0.0000%" y="501" width="3.7594%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="511.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.76%)</title><rect x="0.0000%" y="485" width="3.7594%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="495.50">[unk..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (2 samples, 1.50%)</title><rect x="3.7594%" y="581" width="1.5038%" height="15" fill="rgb(220,122,19)"/><text x="4.0094%" y="591.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (3 samples, 2.26%)</title><rect x="5.2632%" y="581" width="2.2556%" height="15" fill="rgb(250,228,42)"/><text x="5.5132%" y="591.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke_from_class (1 samples, 0.75%)</title><rect x="7.5188%" y="581" width="0.7519%" height="15" fill="rgb(240,193,28)"/><text x="7.7688%" y="591.50"></text></g><g><title>[[stack]] (9 samples, 6.77%)</title><rect x="3.7594%" y="597" width="6.7669%" height="15" fill="rgb(216,20,37)"/><text x="4.0094%" y="607.50">[[stack]]</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::resolve_call (3 samples, 2.26%)</title><rect x="8.2707%" y="581" width="2.2556%" height="15" fill="rgb(206,188,39)"/><text x="8.5207%" y="591.50">s..</text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (1 samples, 0.75%)</title><rect x="11.2782%" y="581" width="0.7519%" height="15" fill="rgb(217,207,13)"/><text x="11.5282%" y="591.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (4 samples, 3.01%)</title><rect x="12.0301%" y="581" width="3.0075%" height="15" fill="rgb(231,73,38)"/><text x="12.2801%" y="591.50">spa..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke_from_class (1 samples, 0.75%)</title><rect x="15.0376%" y="581" width="0.7519%" height="15" fill="rgb(225,20,46)"/><text x="15.2876%" y="591.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_invoke (2 samples, 1.50%)</title><rect x="15.7895%" y="565" width="1.5038%" height="15" fill="rgb(210,31,41)"/><text x="16.0395%" y="575.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke (2 samples, 1.50%)</title><rect x="15.7895%" y="549" width="1.5038%" height="15" fill="rgb(221,200,47)"/><text x="16.0395%" y="559.50"></text></g><g><title>spacelox_core::object::Instance::get_field (2 samples, 1.50%)</title><rect x="15.7895%" y="533" width="1.5038%" height="15" fill="rgb(226,26,5)"/><text x="16.0395%" y="543.50"></text></g><g><title>[unknown] (11 samples, 8.27%)</title><rect x="10.5263%" y="597" width="8.2707%" height="15" fill="rgb(249,33,26)"/><text x="10.7763%" y="607.50">[unknown]</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::run (4 samples, 3.01%)</title><rect x="15.7895%" y="581" width="3.0075%" height="15" fill="rgb(235,183,28)"/><text x="16.0395%" y="591.50">spa..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_return (2 samples, 1.50%)</title><rect x="17.2932%" y="565" width="1.5038%" height="15" fill="rgb(221,5,38)"/><text x="17.5432%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 3.76%)</title><rect x="21.0526%" y="373" width="3.7594%" height="15" fill="rgb(247,18,42)"/><text x="21.3026%" y="383.50">hash..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (5 samples, 3.76%)</title><rect x="21.0526%" y="357" width="3.7594%" height="15" fill="rgb(241,131,45)"/><text x="21.3026%" y="367.50">&lt;spa..</text></g><g><title>core::ptr::hash (5 samples, 3.76%)</title><rect x="21.0526%" y="341" width="3.7594%" height="15" fill="rgb(249,31,29)"/><text x="21.3026%" y="351.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (5 samples, 3.76%)</title><rect x="21.0526%" y="325" width="3.7594%" height="15" fill="rgb(225,111,53)"/><text x="21.3026%" y="335.50">core..</text></g><g><title>core::hash::Hasher::write_usize (5 samples, 3.76%)</title><rect x="21.0526%" y="309" width="3.7594%" height="15" fill="rgb(238,160,17)"/><text x="21.3026%" y="319.50">core..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (5 samples, 3.76%)</title><rect x="21.0526%" y="293" width="3.7594%" height="15" fill="rgb(214,148,48)"/><text x="21.3026%" y="303.50">&lt;fnv..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 1.50%)</title><rect x="23.3083%" y="277" width="1.5038%" height="15" fill="rgb(232,36,49)"/><text x="23.5583%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.75%)</title><rect x="24.8120%" y="357" width="0.7519%" height="15" fill="rgb(209,103,24)"/><text x="25.0620%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.75%)</title><rect x="25.5639%" y="341" width="0.7519%" height="15" fill="rgb(229,88,8)"/><text x="25.8139%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (1 samples, 0.75%)</title><rect x="25.5639%" y="325" width="0.7519%" height="15" fill="rgb(213,181,19)"/><text x="25.8139%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (1 samples, 0.75%)</title><rect x="25.5639%" y="309" width="0.7519%" height="15" fill="rgb(254,191,54)"/><text x="25.8139%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.50%)</title><rect x="25.5639%" y="357" width="1.5038%" height="15" fill="rgb(241,83,37)"/><text x="25.8139%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.75%)</title><rect x="26.3158%" y="341" width="0.7519%" height="15" fill="rgb(233,36,39)"/><text x="26.5658%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="26.3158%" y="325" width="0.7519%" height="15" fill="rgb(226,3,54)"/><text x="26.5658%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="26.3158%" y="309" width="0.7519%" height="15" fill="rgb(245,192,40)"/><text x="26.5658%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="26.3158%" y="293" width="0.7519%" height="15" fill="rgb(238,167,29)"/><text x="26.5658%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="26.3158%" y="277" width="0.7519%" height="15" fill="rgb(232,182,51)"/><text x="26.5658%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="26.3158%" y="261" width="0.7519%" height="15" fill="rgb(231,60,39)"/><text x="26.5658%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="26.3158%" y="245" width="0.7519%" height="15" fill="rgb(208,69,12)"/><text x="26.5658%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="26.3158%" y="229" width="0.7519%" height="15" fill="rgb(235,93,37)"/><text x="26.5658%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="26.3158%" y="213" width="0.7519%" height="15" fill="rgb(213,116,39)"/><text x="26.5658%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="26.3158%" y="197" width="0.7519%" height="15" fill="rgb(222,207,29)"/><text x="26.5658%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (1 samples, 0.75%)</title><rect x="27.0677%" y="357" width="0.7519%" height="15" fill="rgb(206,96,30)"/><text x="27.3177%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.75%)</title><rect x="27.0677%" y="341" width="0.7519%" height="15" fill="rgb(218,138,4)"/><text x="27.3177%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.75%)</title><rect x="27.0677%" y="325" width="0.7519%" height="15" fill="rgb(250,191,14)"/><text x="27.3177%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.75%)</title><rect x="27.0677%" y="309" width="0.7519%" height="15" fill="rgb(239,60,40)"/><text x="27.3177%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="27.0677%" y="293" width="0.7519%" height="15" fill="rgb(206,27,48)"/><text x="27.3177%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="27.0677%" y="277" width="0.7519%" height="15" fill="rgb(225,35,8)"/><text x="27.3177%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="27.0677%" y="261" width="0.7519%" height="15" fill="rgb(250,213,24)"/><text x="27.3177%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="27.0677%" y="245" width="0.7519%" height="15" fill="rgb(247,123,22)"/><text x="27.3177%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="27.0677%" y="229" width="0.7519%" height="15" fill="rgb(231,138,38)"/><text x="27.3177%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="27.0677%" y="213" width="0.7519%" height="15" fill="rgb(231,145,46)"/><text x="27.3177%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="27.0677%" y="197" width="0.7519%" height="15" fill="rgb(251,118,11)"/><text x="27.3177%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="27.0677%" y="181" width="0.7519%" height="15" fill="rgb(217,147,25)"/><text x="27.3177%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="27.0677%" y="165" width="0.7519%" height="15" fill="rgb(247,81,37)"/><text x="27.3177%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="27.0677%" y="149" width="0.7519%" height="15" fill="rgb(209,12,38)"/><text x="27.3177%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.75%)</title><rect x="27.8195%" y="357" width="0.7519%" height="15" fill="rgb(227,1,9)"/><text x="28.0695%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.75%)</title><rect x="27.8195%" y="341" width="0.7519%" height="15" fill="rgb(248,47,43)"/><text x="28.0695%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.75%)</title><rect x="27.8195%" y="325" width="0.7519%" height="15" fill="rgb(221,10,30)"/><text x="28.0695%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 3.01%)</title><rect x="28.5714%" y="341" width="3.0075%" height="15" fill="rgb(210,229,1)"/><text x="28.8214%" y="351.50">cor..</text></g><g><title>[unknown] (4 samples, 3.01%)</title><rect x="28.5714%" y="325" width="3.0075%" height="15" fill="rgb(222,148,37)"/><text x="28.8214%" y="335.50">[un..</text></g><g><title>[unknown] (4 samples, 3.01%)</title><rect x="28.5714%" y="309" width="3.0075%" height="15" fill="rgb(234,67,33)"/><text x="28.8214%" y="319.50">[un..</text></g><g><title>[unknown] (4 samples, 3.01%)</title><rect x="28.5714%" y="293" width="3.0075%" height="15" fill="rgb(247,98,35)"/><text x="28.8214%" y="303.50">[un..</text></g><g><title>[unknown] (4 samples, 3.01%)</title><rect x="28.5714%" y="277" width="3.0075%" height="15" fill="rgb(247,138,52)"/><text x="28.8214%" y="287.50">[un..</text></g><g><title>[unknown] (4 samples, 3.01%)</title><rect x="28.5714%" y="261" width="3.0075%" height="15" fill="rgb(213,79,30)"/><text x="28.8214%" y="271.50">[un..</text></g><g><title>[unknown] (4 samples, 3.01%)</title><rect x="28.5714%" y="245" width="3.0075%" height="15" fill="rgb(246,177,23)"/><text x="28.8214%" y="255.50">[un..</text></g><g><title>[unknown] (4 samples, 3.01%)</title><rect x="28.5714%" y="229" width="3.0075%" height="15" fill="rgb(230,62,27)"/><text x="28.8214%" y="239.50">[un..</text></g><g><title>[unknown] (4 samples, 3.01%)</title><rect x="28.5714%" y="213" width="3.0075%" height="15" fill="rgb(216,154,8)"/><text x="28.8214%" y="223.50">[un..</text></g><g><title>[unknown] (4 samples, 3.01%)</title><rect x="28.5714%" y="197" width="3.0075%" height="15" fill="rgb(244,35,45)"/><text x="28.8214%" y="207.50">[un..</text></g><g><title>[unknown] (2 samples, 1.50%)</title><rect x="30.0752%" y="181" width="1.5038%" height="15" fill="rgb(251,115,12)"/><text x="30.3252%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="30.8271%" y="165" width="0.7519%" height="15" fill="rgb(240,54,50)"/><text x="31.0771%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="30.8271%" y="149" width="0.7519%" height="15" fill="rgb(233,84,52)"/><text x="31.0771%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="30.8271%" y="133" width="0.7519%" height="15" fill="rgb(207,117,47)"/><text x="31.0771%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="30.8271%" y="117" width="0.7519%" height="15" fill="rgb(249,43,39)"/><text x="31.0771%" y="127.50"></text></g><g><title>spacelox_core::module::Module::get_symbol (18 samples, 13.53%)</title><rect x="21.0526%" y="421" width="13.5338%" height="15" fill="rgb(209,38,44)"/><text x="21.3026%" y="431.50">spacelox_core::modul..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (18 samples, 13.53%)</title><rect x="21.0526%" y="405" width="13.5338%" height="15" fill="rgb(236,212,23)"/><text x="21.3026%" y="415.50">hashbrown::map::Hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (18 samples, 13.53%)</title><rect x="21.0526%" y="389" width="13.5338%" height="15" fill="rgb(242,79,21)"/><text x="21.3026%" y="399.50">hashbrown::map::Hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (13 samples, 9.77%)</title><rect x="24.8120%" y="373" width="9.7744%" height="15" fill="rgb(211,96,35)"/><text x="25.0620%" y="383.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 6.02%)</title><rect x="28.5714%" y="357" width="6.0150%" height="15" fill="rgb(253,215,40)"/><text x="28.8214%" y="367.50">hashbrow..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (4 samples, 3.01%)</title><rect x="31.5789%" y="341" width="3.0075%" height="15" fill="rgb(211,81,21)"/><text x="31.8289%" y="351.50">cor..</text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (4 samples, 3.01%)</title><rect x="31.5789%" y="325" width="3.0075%" height="15" fill="rgb(208,190,38)"/><text x="31.8289%" y="335.50">cor..</text></g><g><title>core::core_arch::simd::i8x16::new (4 samples, 3.01%)</title><rect x="31.5789%" y="309" width="3.0075%" height="15" fill="rgb(235,213,38)"/><text x="31.8289%" y="319.50">cor..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (1 samples, 0.75%)</title><rect x="34.5865%" y="421" width="0.7519%" height="15" fill="rgb(237,122,38)"/><text x="34.8365%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="34.5865%" y="405" width="0.7519%" height="15" fill="rgb(244,218,35)"/><text x="34.8365%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="34.5865%" y="389" width="0.7519%" height="15" fill="rgb(240,68,47)"/><text x="34.8365%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="34.5865%" y="373" width="0.7519%" height="15" fill="rgb(210,16,53)"/><text x="34.8365%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="34.5865%" y="357" width="0.7519%" height="15" fill="rgb(235,124,12)"/><text x="34.8365%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="34.5865%" y="341" width="0.7519%" height="15" fill="rgb(224,169,11)"/><text x="34.8365%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="34.5865%" y="325" width="0.7519%" height="15" fill="rgb(250,166,2)"/><text x="34.8365%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="34.5865%" y="309" width="0.7519%" height="15" fill="rgb(242,216,29)"/><text x="34.8365%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="34.5865%" y="293" width="0.7519%" height="15" fill="rgb(230,116,27)"/><text x="34.8365%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="34.5865%" y="277" width="0.7519%" height="15" fill="rgb(228,99,48)"/><text x="34.8365%" y="287.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_global (20 samples, 15.04%)</title><rect x="21.0526%" y="437" width="15.0376%" height="15" fill="rgb(253,11,6)"/><text x="21.3026%" y="447.50">spacelox_vm::vm::VmExec..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_short (1 samples, 0.75%)</title><rect x="35.3383%" y="421" width="0.7519%" height="15" fill="rgb(247,143,39)"/><text x="35.5883%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (1 samples, 0.75%)</title><rect x="35.3383%" y="405" width="0.7519%" height="15" fill="rgb(236,97,10)"/><text x="35.5883%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.75%)</title><rect x="35.3383%" y="389" width="0.7519%" height="15" fill="rgb(233,208,19)"/><text x="35.5883%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="35.3383%" y="373" width="0.7519%" height="15" fill="rgb(216,164,2)"/><text x="35.5883%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="35.3383%" y="357" width="0.7519%" height="15" fill="rgb(220,129,5)"/><text x="35.5883%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="35.3383%" y="341" width="0.7519%" height="15" fill="rgb(242,17,10)"/><text x="35.5883%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="35.3383%" y="325" width="0.7519%" height="15" fill="rgb(242,107,0)"/><text x="35.5883%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="35.3383%" y="309" width="0.7519%" height="15" fill="rgb(251,28,31)"/><text x="35.5883%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="35.3383%" y="293" width="0.7519%" height="15" fill="rgb(233,223,10)"/><text x="35.5883%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="35.3383%" y="277" width="0.7519%" height="15" fill="rgb(215,21,27)"/><text x="35.5883%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="35.3383%" y="261" width="0.7519%" height="15" fill="rgb(232,23,21)"/><text x="35.5883%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="35.3383%" y="245" width="0.7519%" height="15" fill="rgb(244,5,23)"/><text x="35.5883%" y="255.50"></text></g><g><title>&lt;linear_map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.75%)</title><rect x="39.8496%" y="357" width="0.7519%" height="15" fill="rgb(226,81,46)"/><text x="40.0996%" y="367.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.75%)</title><rect x="39.8496%" y="341" width="0.7519%" height="15" fill="rgb(247,70,30)"/><text x="40.0996%" y="351.50"></text></g><g><title>spacelox_core::object::Instance::get_field (6 samples, 4.51%)</title><rect x="36.8421%" y="405" width="4.5113%" height="15" fill="rgb(212,68,19)"/><text x="37.0921%" y="415.50">space..</text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (6 samples, 4.51%)</title><rect x="36.8421%" y="389" width="4.5113%" height="15" fill="rgb(240,187,13)"/><text x="37.0921%" y="399.50">space..</text></g><g><title>linear_map::LinearMap&lt;K,V&gt;::get (3 samples, 2.26%)</title><rect x="39.0977%" y="373" width="2.2556%" height="15" fill="rgb(223,113,26)"/><text x="39.3477%" y="383.50">l..</text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="40.6015%" y="357" width="0.7519%" height="15" fill="rgb(206,192,2)"/><text x="40.8515%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="40.6015%" y="341" width="0.7519%" height="15" fill="rgb(241,108,4)"/><text x="40.8515%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="40.6015%" y="325" width="0.7519%" height="15" fill="rgb(247,173,49)"/><text x="40.8515%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="40.6015%" y="309" width="0.7519%" height="15" fill="rgb(224,114,35)"/><text x="40.8515%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="40.6015%" y="293" width="0.7519%" height="15" fill="rgb(245,159,27)"/><text x="40.8515%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="40.6015%" y="277" width="0.7519%" height="15" fill="rgb(245,172,44)"/><text x="40.8515%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="40.6015%" y="261" width="0.7519%" height="15" fill="rgb(236,23,11)"/><text x="40.8515%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="40.6015%" y="245" width="0.7519%" height="15" fill="rgb(205,117,38)"/><text x="40.8515%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="40.6015%" y="229" width="0.7519%" height="15" fill="rgb(237,72,25)"/><text x="40.8515%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="40.6015%" y="213" width="0.7519%" height="15" fill="rgb(244,70,9)"/><text x="40.8515%" y="223.50"></text></g><g><title>spacelox_core::value::boxed::Value::kind (4 samples, 3.01%)</title><rect x="42.1053%" y="389" width="3.0075%" height="15" fill="rgb(217,125,39)"/><text x="42.3553%" y="399.50">spa..</text></g><g><title>spacelox_core::value::boxed::Value::value_class (6 samples, 4.51%)</title><rect x="41.3534%" y="405" width="4.5113%" height="15" fill="rgb(235,36,10)"/><text x="41.6034%" y="415.50">space..</text></g><g><title>spacelox_core::value::boxed::Value::to_instance (1 samples, 0.75%)</title><rect x="45.1128%" y="389" width="0.7519%" height="15" fill="rgb(251,123,47)"/><text x="45.3628%" y="399.50"></text></g><g><title>spacelox_core::value::boxed::Value::to_obj_tag (1 samples, 0.75%)</title><rect x="45.1128%" y="373" width="0.7519%" height="15" fill="rgb(221,13,13)"/><text x="45.3628%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="57.1429%" y="389" width="0.7519%" height="15" fill="rgb(238,131,9)"/><text x="57.3929%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="57.1429%" y="373" width="0.7519%" height="15" fill="rgb(211,50,8)"/><text x="57.3929%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="57.1429%" y="357" width="0.7519%" height="15" fill="rgb(245,182,24)"/><text x="57.3929%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="57.1429%" y="341" width="0.7519%" height="15" fill="rgb(242,14,37)"/><text x="57.3929%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="57.1429%" y="325" width="0.7519%" height="15" fill="rgb(246,228,12)"/><text x="57.3929%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="57.1429%" y="309" width="0.7519%" height="15" fill="rgb(213,55,15)"/><text x="57.3929%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (18 samples, 13.53%)</title><rect x="45.8647%" y="405" width="13.5338%" height="15" fill="rgb(209,9,3)"/><text x="46.1147%" y="415.50">spacelox_vm::vm::VmE..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::check_arity (2 samples, 1.50%)</title><rect x="57.8947%" y="389" width="1.5038%" height="15" fill="rgb(230,59,30)"/><text x="58.1447%" y="399.50"></text></g><g><title>spacelox_core::arity::ArityKind::check (2 samples, 1.50%)</title><rect x="57.8947%" y="373" width="1.5038%" height="15" fill="rgb(209,121,21)"/><text x="58.1447%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 4.51%)</title><rect x="63.1579%" y="325" width="4.5113%" height="15" fill="rgb(220,109,13)"/><text x="63.4079%" y="335.50">hashb..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (6 samples, 4.51%)</title><rect x="63.1579%" y="309" width="4.5113%" height="15" fill="rgb(232,18,1)"/><text x="63.4079%" y="319.50">&lt;spac..</text></g><g><title>core::ptr::hash (6 samples, 4.51%)</title><rect x="63.1579%" y="293" width="4.5113%" height="15" fill="rgb(215,41,42)"/><text x="63.4079%" y="303.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (6 samples, 4.51%)</title><rect x="63.1579%" y="277" width="4.5113%" height="15" fill="rgb(224,123,36)"/><text x="63.4079%" y="287.50">core:..</text></g><g><title>core::hash::Hasher::write_usize (6 samples, 4.51%)</title><rect x="63.1579%" y="261" width="4.5113%" height="15" fill="rgb(240,125,3)"/><text x="63.4079%" y="271.50">core:..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (6 samples, 4.51%)</title><rect x="63.1579%" y="245" width="4.5113%" height="15" fill="rgb(205,98,50)"/><text x="63.4079%" y="255.50">&lt;fnv:..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.75%)</title><rect x="66.9173%" y="229" width="0.7519%" height="15" fill="rgb(205,185,37)"/><text x="67.1673%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.50%)</title><rect x="67.6692%" y="309" width="1.5038%" height="15" fill="rgb(238,207,15)"/><text x="67.9192%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.75%)</title><rect x="69.1729%" y="293" width="0.7519%" height="15" fill="rgb(213,199,42)"/><text x="69.4229%" y="303.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke_from_class (15 samples, 11.28%)</title><rect x="59.3985%" y="405" width="11.2782%" height="15" fill="rgb(235,201,11)"/><text x="59.6485%" y="415.50">spacelox_vm::vm::..</text></g><g><title>spacelox_core::object::Class::get_method (12 samples, 9.02%)</title><rect x="61.6541%" y="389" width="9.0226%" height="15" fill="rgb(207,46,11)"/><text x="61.9041%" y="399.50">spacelox_core..</text></g><g><title>spacelox_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (10 samples, 7.52%)</title><rect x="63.1579%" y="373" width="7.5188%" height="15" fill="rgb(241,35,35)"/><text x="63.4079%" y="383.50">spacelox_c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (10 samples, 7.52%)</title><rect x="63.1579%" y="357" width="7.5188%" height="15" fill="rgb(243,32,47)"/><text x="63.4079%" y="367.50">hashbrown:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (10 samples, 7.52%)</title><rect x="63.1579%" y="341" width="7.5188%" height="15" fill="rgb(247,202,23)"/><text x="63.4079%" y="351.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (4 samples, 3.01%)</title><rect x="67.6692%" y="325" width="3.0075%" height="15" fill="rgb(219,102,11)"/><text x="67.9192%" y="335.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 1.50%)</title><rect x="69.1729%" y="309" width="1.5038%" height="15" fill="rgb(243,110,44)"/><text x="69.4229%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.75%)</title><rect x="69.9248%" y="293" width="0.7519%" height="15" fill="rgb(222,74,54)"/><text x="70.1748%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.75%)</title><rect x="69.9248%" y="277" width="0.7519%" height="15" fill="rgb(216,99,12)"/><text x="70.1748%" y="287.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.75%)</title><rect x="69.9248%" y="261" width="0.7519%" height="15" fill="rgb(226,22,26)"/><text x="70.1748%" y="271.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke (51 samples, 38.35%)</title><rect x="36.0902%" y="421" width="38.3459%" height="15" fill="rgb(217,163,10)"/><text x="36.3402%" y="431.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::resolve_call (5 samples, 3.76%)</title><rect x="70.6767%" y="405" width="3.7594%" height="15" fill="rgb(213,25,53)"/><text x="70.9267%" y="415.50">spac..</text></g><g><title>spacelox_core::value::boxed::Value::kind (4 samples, 3.01%)</title><rect x="71.4286%" y="389" width="3.0075%" height="15" fill="rgb(252,105,26)"/><text x="71.6786%" y="399.50">spa..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_short (1 samples, 0.75%)</title><rect x="74.4361%" y="421" width="0.7519%" height="15" fill="rgb(220,39,43)"/><text x="74.6861%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (1 samples, 0.75%)</title><rect x="74.4361%" y="405" width="0.7519%" height="15" fill="rgb(229,68,48)"/><text x="74.6861%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.75%)</title><rect x="74.4361%" y="389" width="0.7519%" height="15" fill="rgb(252,8,32)"/><text x="74.6861%" y="399.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_invoke (54 samples, 40.60%)</title><rect x="36.0902%" y="437" width="40.6015%" height="15" fill="rgb(223,20,43)"/><text x="36.3402%" y="447.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::op_invoke</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (2 samples, 1.50%)</title><rect x="75.1880%" y="421" width="1.5038%" height="15" fill="rgb(229,81,49)"/><text x="75.4380%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_constant (2 samples, 1.50%)</title><rect x="75.1880%" y="405" width="1.5038%" height="15" fill="rgb(236,28,36)"/><text x="75.4380%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 1.50%)</title><rect x="75.1880%" y="389" width="1.5038%" height="15" fill="rgb(249,185,26)"/><text x="75.4380%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (2 samples, 1.50%)</title><rect x="75.1880%" y="373" width="1.5038%" height="15" fill="rgb(249,174,33)"/><text x="75.4380%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 1.50%)</title><rect x="75.1880%" y="357" width="1.5038%" height="15" fill="rgb(233,201,37)"/><text x="75.4380%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_jump_if_not_false (1 samples, 0.75%)</title><rect x="76.6917%" y="437" width="0.7519%" height="15" fill="rgb(221,78,26)"/><text x="76.9417%" y="447.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::peek (1 samples, 0.75%)</title><rect x="76.6917%" y="421" width="0.7519%" height="15" fill="rgb(250,127,30)"/><text x="76.9417%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::get_val (1 samples, 0.75%)</title><rect x="76.6917%" y="405" width="0.7519%" height="15" fill="rgb(230,49,44)"/><text x="76.9417%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.75%)</title><rect x="80.4511%" y="405" width="0.7519%" height="15" fill="rgb(229,67,23)"/><text x="80.7011%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 2.26%)</title><rect x="80.4511%" y="421" width="2.2556%" height="15" fill="rgb(249,83,47)"/><text x="80.7011%" y="431.50">&lt;..</text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 1.50%)</title><rect x="81.2030%" y="405" width="1.5038%" height="15" fill="rgb(215,43,3)"/><text x="81.4530%" y="415.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 1.50%)</title><rect x="81.2030%" y="389" width="1.5038%" height="15" fill="rgb(238,154,13)"/><text x="81.4530%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="82.7068%" y="421" width="0.7519%" height="15" fill="rgb(219,56,2)"/><text x="82.9568%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="82.7068%" y="405" width="0.7519%" height="15" fill="rgb(233,0,4)"/><text x="82.9568%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="82.7068%" y="389" width="0.7519%" height="15" fill="rgb(235,30,7)"/><text x="82.9568%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="82.7068%" y="373" width="0.7519%" height="15" fill="rgb(250,79,13)"/><text x="82.9568%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="82.7068%" y="357" width="0.7519%" height="15" fill="rgb(211,146,34)"/><text x="82.9568%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="82.7068%" y="341" width="0.7519%" height="15" fill="rgb(228,22,38)"/><text x="82.9568%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="82.7068%" y="325" width="0.7519%" height="15" fill="rgb(235,168,5)"/><text x="82.9568%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="82.7068%" y="309" width="0.7519%" height="15" fill="rgb(221,155,16)"/><text x="82.9568%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="82.7068%" y="293" width="0.7519%" height="15" fill="rgb(215,215,53)"/><text x="82.9568%" y="303.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (1 samples, 0.75%)</title><rect x="83.4586%" y="421" width="0.7519%" height="15" fill="rgb(223,4,10)"/><text x="83.7086%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="83.4586%" y="405" width="0.7519%" height="15" fill="rgb(234,103,6)"/><text x="83.7086%" y="415.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (1 samples, 0.75%)</title><rect x="84.2105%" y="421" width="0.7519%" height="15" fill="rgb(227,97,0)"/><text x="84.4605%" y="431.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_return (11 samples, 8.27%)</title><rect x="77.4436%" y="437" width="8.2707%" height="15" fill="rgb(234,150,53)"/><text x="77.6936%" y="447.50">spacelox_vm:..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::pop (1 samples, 0.75%)</title><rect x="84.9624%" y="421" width="0.7519%" height="15" fill="rgb(228,201,54)"/><text x="85.2124%" y="431.50"></text></g><g><title>[unknown] (2 samples, 1.50%)</title><rect x="95.4887%" y="405" width="1.5038%" height="15" fill="rgb(222,22,37)"/><text x="95.7387%" y="415.50"></text></g><g><title>[unknown] (2 samples, 1.50%)</title><rect x="95.4887%" y="389" width="1.5038%" height="15" fill="rgb(237,53,32)"/><text x="95.7387%" y="399.50"></text></g><g><title>[unknown] (2 samples, 1.50%)</title><rect x="95.4887%" y="373" width="1.5038%" height="15" fill="rgb(233,25,53)"/><text x="95.7387%" y="383.50"></text></g><g><title>[unknown] (2 samples, 1.50%)</title><rect x="95.4887%" y="357" width="1.5038%" height="15" fill="rgb(210,40,34)"/><text x="95.7387%" y="367.50"></text></g><g><title>[unknown] (2 samples, 1.50%)</title><rect x="95.4887%" y="341" width="1.5038%" height="15" fill="rgb(241,220,44)"/><text x="95.7387%" y="351.50"></text></g><g><title>[unknown] (2 samples, 1.50%)</title><rect x="95.4887%" y="325" width="1.5038%" height="15" fill="rgb(235,28,35)"/><text x="95.7387%" y="335.50"></text></g><g><title>[unknown] (2 samples, 1.50%)</title><rect x="95.4887%" y="309" width="1.5038%" height="15" fill="rgb(210,56,17)"/><text x="95.7387%" y="319.50"></text></g><g><title>[unknown] (2 samples, 1.50%)</title><rect x="95.4887%" y="293" width="1.5038%" height="15" fill="rgb(224,130,29)"/><text x="95.7387%" y="303.50"></text></g><g><title>[unknown] (2 samples, 1.50%)</title><rect x="95.4887%" y="277" width="1.5038%" height="15" fill="rgb(235,212,8)"/><text x="95.7387%" y="287.50"></text></g><g><title>[unknown] (2 samples, 1.50%)</title><rect x="95.4887%" y="261" width="1.5038%" height="15" fill="rgb(223,33,50)"/><text x="95.7387%" y="271.50"></text></g><g><title>__libc_start_main (107 samples, 80.45%)</title><rect x="18.7970%" y="581" width="80.4511%" height="15" fill="rgb(219,149,13)"/><text x="19.0470%" y="591.50">__libc_start_main</text></g><g><title>main (107 samples, 80.45%)</title><rect x="18.7970%" y="565" width="80.4511%" height="15" fill="rgb(250,156,29)"/><text x="19.0470%" y="575.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (107 samples, 80.45%)</title><rect x="18.7970%" y="549" width="80.4511%" height="15" fill="rgb(216,193,19)"/><text x="19.0470%" y="559.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::rt::lang_start_internal::_{{closure}}::_{{closure}} (107 samples, 80.45%)</title><rect x="18.7970%" y="533" width="80.4511%" height="15" fill="rgb(216,135,14)"/><text x="19.0470%" y="543.50">std::rt::lang_start_internal::_{{closure}}::_{{closure}}</text></g><g><title>std::rt::lang_start::_{{closure}} (107 samples, 80.45%)</title><rect x="18.7970%" y="517" width="80.4511%" height="15" fill="rgb(241,47,5)"/><text x="19.0470%" y="527.50">std::rt::lang_start::_{{closure}}</text></g><g><title>spacelox::main (107 samples, 80.45%)</title><rect x="18.7970%" y="501" width="80.4511%" height="15" fill="rgb(233,42,35)"/><text x="19.0470%" y="511.50">spacelox::main</text></g><g><title>spacelox_vm::vm::Vm&lt;I&gt;::run (107 samples, 80.45%)</title><rect x="18.7970%" y="485" width="80.4511%" height="15" fill="rgb(231,13,6)"/><text x="19.0470%" y="495.50">spacelox_vm::vm::Vm&lt;I&gt;::run</text></g><g><title>spacelox_vm::vm::Vm&lt;I&gt;::interpret (107 samples, 80.45%)</title><rect x="18.7970%" y="469" width="80.4511%" height="15" fill="rgb(207,181,40)"/><text x="19.0470%" y="479.50">spacelox_vm::vm::Vm&lt;I&gt;::interpret</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::run (107 samples, 80.45%)</title><rect x="18.7970%" y="453" width="80.4511%" height="15" fill="rgb(254,173,49)"/><text x="19.0470%" y="463.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::run</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (18 samples, 13.53%)</title><rect x="85.7143%" y="437" width="13.5338%" height="15" fill="rgb(221,1,38)"/><text x="85.9643%" y="447.50">spacelox_vm::vm::VmE..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::update_ip (11 samples, 8.27%)</title><rect x="90.9774%" y="421" width="8.2707%" height="15" fill="rgb(206,124,46)"/><text x="91.2274%" y="431.50">spacelox_vm:..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 2.26%)</title><rect x="96.9925%" y="405" width="2.2556%" height="15" fill="rgb(249,21,11)"/><text x="97.2425%" y="415.50">c..</text></g><g><title>all (133 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(222,201,40)"/><text x="0.2500%" y="639.50"></text></g><g><title>spacelox (128 samples, 96.24%)</title><rect x="3.7594%" y="613" width="96.2406%" height="15" fill="rgb(235,61,29)"/><text x="4.0094%" y="623.50">spacelox</text></g><g><title>_start (108 samples, 81.20%)</title><rect x="18.7970%" y="597" width="81.2030%" height="15" fill="rgb(219,207,3)"/><text x="19.0470%" y="607.50">_start</text></g><g><title>_dl_start (1 samples, 0.75%)</title><rect x="99.2481%" y="581" width="0.7519%" height="15" fill="rgb(222,56,46)"/><text x="99.4981%" y="591.50"></text></g><g><title>_dl_start_final (1 samples, 0.75%)</title><rect x="99.2481%" y="565" width="0.7519%" height="15" fill="rgb(239,76,54)"/><text x="99.4981%" y="575.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.75%)</title><rect x="99.2481%" y="549" width="0.7519%" height="15" fill="rgb(231,124,27)"/><text x="99.4981%" y="559.50"></text></g><g><title>dl_main (1 samples, 0.75%)</title><rect x="99.2481%" y="533" width="0.7519%" height="15" fill="rgb(249,195,6)"/><text x="99.4981%" y="543.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.75%)</title><rect x="99.2481%" y="517" width="0.7519%" height="15" fill="rgb(237,174,47)"/><text x="99.4981%" y="527.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.75%)</title><rect x="99.2481%" y="501" width="0.7519%" height="15" fill="rgb(206,201,31)"/><text x="99.4981%" y="511.50"></text></g><g><title>openaux (1 samples, 0.75%)</title><rect x="99.2481%" y="485" width="0.7519%" height="15" fill="rgb(231,57,52)"/><text x="99.4981%" y="495.50"></text></g><g><title>_dl_map_object (1 samples, 0.75%)</title><rect x="99.2481%" y="469" width="0.7519%" height="15" fill="rgb(248,177,22)"/><text x="99.4981%" y="479.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.75%)</title><rect x="99.2481%" y="453" width="0.7519%" height="15" fill="rgb(215,211,37)"/><text x="99.4981%" y="463.50"></text></g><g><title>_dl_map_segments (1 samples, 0.75%)</title><rect x="99.2481%" y="437" width="0.7519%" height="15" fill="rgb(241,128,51)"/><text x="99.4981%" y="447.50"></text></g><g><title>__mmap64 (1 samples, 0.75%)</title><rect x="99.2481%" y="421" width="0.7519%" height="15" fill="rgb(227,165,31)"/><text x="99.4981%" y="431.50"></text></g><g><title>__mmap64 (1 samples, 0.75%)</title><rect x="99.2481%" y="405" width="0.7519%" height="15" fill="rgb(228,167,24)"/><text x="99.4981%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="389" width="0.7519%" height="15" fill="rgb(228,143,12)"/><text x="99.4981%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="373" width="0.7519%" height="15" fill="rgb(249,149,8)"/><text x="99.4981%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="357" width="0.7519%" height="15" fill="rgb(243,35,44)"/><text x="99.4981%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="341" width="0.7519%" height="15" fill="rgb(246,89,9)"/><text x="99.4981%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="325" width="0.7519%" height="15" fill="rgb(233,213,13)"/><text x="99.4981%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="309" width="0.7519%" height="15" fill="rgb(233,141,41)"/><text x="99.4981%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="293" width="0.7519%" height="15" fill="rgb(239,167,4)"/><text x="99.4981%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="277" width="0.7519%" height="15" fill="rgb(209,217,16)"/><text x="99.4981%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="261" width="0.7519%" height="15" fill="rgb(219,88,35)"/><text x="99.4981%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="245" width="0.7519%" height="15" fill="rgb(220,193,23)"/><text x="99.4981%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="229" width="0.7519%" height="15" fill="rgb(230,90,52)"/><text x="99.4981%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="213" width="0.7519%" height="15" fill="rgb(252,106,19)"/><text x="99.4981%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="197" width="0.7519%" height="15" fill="rgb(206,74,20)"/><text x="99.4981%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="181" width="0.7519%" height="15" fill="rgb(230,138,44)"/><text x="99.4981%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="165" width="0.7519%" height="15" fill="rgb(235,182,43)"/><text x="99.4981%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="149" width="0.7519%" height="15" fill="rgb(242,16,51)"/><text x="99.4981%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="133" width="0.7519%" height="15" fill="rgb(248,9,4)"/><text x="99.4981%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="117" width="0.7519%" height="15" fill="rgb(210,31,22)"/><text x="99.4981%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="101" width="0.7519%" height="15" fill="rgb(239,54,39)"/><text x="99.4981%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="85" width="0.7519%" height="15" fill="rgb(230,99,41)"/><text x="99.4981%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="69" width="0.7519%" height="15" fill="rgb(253,106,12)"/><text x="99.4981%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="53" width="0.7519%" height="15" fill="rgb(213,46,41)"/><text x="99.4981%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.75%)</title><rect x="99.2481%" y="37" width="0.7519%" height="15" fill="rgb(215,133,35)"/><text x="99.4981%" y="47.50"></text></g></svg></svg>