<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="629.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="629.00"> </text><svg id="frames" x="10" width="1180"><g><title>perf (4 samples, 0.31%)</title><rect x="0.0000%" y="581" width="0.3077%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="0.0000%" y="565" width="0.3077%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="0.0000%" y="549" width="0.3077%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="0.0000%" y="533" width="0.3077%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="0.0000%" y="517" width="0.3077%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="0.0000%" y="501" width="0.3077%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="0.0000%" y="485" width="0.3077%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="0.0000%" y="469" width="0.3077%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="0.0000%" y="453" width="0.3077%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="0.0000%" y="437" width="0.3077%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="447.50"></text></g><g><title>spacelox_core::value::Value::to_string (9 samples, 0.69%)</title><rect x="0.3077%" y="549" width="0.6923%" height="15" fill="rgb(250,228,42)"/><text x="0.5577%" y="559.50"></text></g><g><title>[[heap]] (28 samples, 2.15%)</title><rect x="0.3077%" y="565" width="2.1538%" height="15" fill="rgb(240,193,28)"/><text x="0.5577%" y="575.50">[..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (19 samples, 1.46%)</title><rect x="1.0000%" y="549" width="1.4615%" height="15" fill="rgb(216,20,37)"/><text x="1.2500%" y="559.50"></text></g><g><title>&lt;spacelox_core::chunk::ByteCode as core::convert::From&lt;u8&gt;&gt;::from (46 samples, 3.54%)</title><rect x="2.6154%" y="549" width="3.5385%" height="15" fill="rgb(206,188,39)"/><text x="2.8654%" y="559.50">&lt;sp..</text></g><g><title>spacelox_core::value::Value::to_string (2 samples, 0.15%)</title><rect x="6.3077%" y="549" width="0.1538%" height="15" fill="rgb(217,207,13)"/><text x="6.5577%" y="559.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (28 samples, 2.15%)</title><rect x="6.4615%" y="549" width="2.1538%" height="15" fill="rgb(231,73,38)"/><text x="6.7115%" y="559.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (25 samples, 1.92%)</title><rect x="8.6154%" y="549" width="1.9231%" height="15" fill="rgb(225,20,46)"/><text x="8.8654%" y="559.50">s..</text></g><g><title>[unknown] (134 samples, 10.31%)</title><rect x="2.5385%" y="565" width="10.3077%" height="15" fill="rgb(210,31,41)"/><text x="2.7885%" y="575.50">[unknown]</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke_from_class (30 samples, 2.31%)</title><rect x="10.5385%" y="549" width="2.3077%" height="15" fill="rgb(221,200,47)"/><text x="10.7885%" y="559.50">s..</text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="22.7692%" y="357" width="0.3846%" height="15" fill="rgb(226,26,5)"/><text x="23.0192%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="22.7692%" y="341" width="0.3846%" height="15" fill="rgb(249,33,26)"/><text x="23.0192%" y="351.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="22.8462%" y="325" width="0.3077%" height="15" fill="rgb(235,183,28)"/><text x="23.0962%" y="335.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="22.8462%" y="309" width="0.3077%" height="15" fill="rgb(221,5,38)"/><text x="23.0962%" y="319.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="22.8462%" y="293" width="0.3077%" height="15" fill="rgb(247,18,42)"/><text x="23.0962%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="22.8462%" y="277" width="0.3077%" height="15" fill="rgb(241,131,45)"/><text x="23.0962%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="22.8462%" y="261" width="0.3077%" height="15" fill="rgb(249,31,29)"/><text x="23.0962%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="22.8462%" y="245" width="0.3077%" height="15" fill="rgb(225,111,53)"/><text x="23.0962%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="22.8462%" y="229" width="0.3077%" height="15" fill="rgb(238,160,17)"/><text x="23.0962%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="22.8462%" y="213" width="0.3077%" height="15" fill="rgb(214,148,48)"/><text x="23.0962%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.54%)</title><rect x="24.0769%" y="341" width="0.5385%" height="15" fill="rgb(232,36,49)"/><text x="24.3269%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (7 samples, 0.54%)</title><rect x="24.0769%" y="325" width="0.5385%" height="15" fill="rgb(209,103,24)"/><text x="24.3269%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.54%)</title><rect x="24.0769%" y="309" width="0.5385%" height="15" fill="rgb(229,88,8)"/><text x="24.3269%" y="319.50"></text></g><g><title>&lt;spacelox_core::chunk::ByteCode as core::convert::From&lt;u8&gt;&gt;::from (2 samples, 0.15%)</title><rect x="24.6154%" y="341" width="0.1538%" height="15" fill="rgb(213,181,19)"/><text x="24.8654%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::frame_instruction (34 samples, 2.62%)</title><rect x="23.1538%" y="357" width="2.6154%" height="15" fill="rgb(254,191,54)"/><text x="23.4038%" y="367.50">sp..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 1.00%)</title><rect x="24.7692%" y="341" width="1.0000%" height="15" fill="rgb(241,83,37)"/><text x="25.0192%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="25.6154%" y="325" width="0.1538%" height="15" fill="rgb(233,36,39)"/><text x="25.8654%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="25.6154%" y="309" width="0.1538%" height="15" fill="rgb(226,3,54)"/><text x="25.8654%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="25.6154%" y="293" width="0.1538%" height="15" fill="rgb(245,192,40)"/><text x="25.8654%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="25.6154%" y="277" width="0.1538%" height="15" fill="rgb(238,167,29)"/><text x="25.8654%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="25.6154%" y="261" width="0.1538%" height="15" fill="rgb(232,182,51)"/><text x="25.8654%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="25.6154%" y="245" width="0.1538%" height="15" fill="rgb(231,60,39)"/><text x="25.8654%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="25.6154%" y="229" width="0.1538%" height="15" fill="rgb(208,69,12)"/><text x="25.8654%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="25.6154%" y="213" width="0.1538%" height="15" fill="rgb(235,93,37)"/><text x="25.8654%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="25.6154%" y="197" width="0.1538%" height="15" fill="rgb(213,116,39)"/><text x="25.8654%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="25.6154%" y="181" width="0.1538%" height="15" fill="rgb(222,207,29)"/><text x="25.8654%" y="191.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_add (2 samples, 0.15%)</title><rect x="25.7692%" y="357" width="0.1538%" height="15" fill="rgb(206,96,30)"/><text x="26.0192%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_constant (3 samples, 0.23%)</title><rect x="25.9231%" y="357" width="0.2308%" height="15" fill="rgb(218,138,4)"/><text x="26.1731%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_constant (3 samples, 0.23%)</title><rect x="25.9231%" y="341" width="0.2308%" height="15" fill="rgb(250,191,14)"/><text x="26.1731%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.23%)</title><rect x="25.9231%" y="325" width="0.2308%" height="15" fill="rgb(239,60,40)"/><text x="26.1731%" y="335.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.15%)</title><rect x="26.0000%" y="309" width="0.1538%" height="15" fill="rgb(206,27,48)"/><text x="26.2500%" y="319.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.15%)</title><rect x="26.0000%" y="293" width="0.1538%" height="15" fill="rgb(225,35,8)"/><text x="26.2500%" y="303.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (13 samples, 1.00%)</title><rect x="26.2308%" y="341" width="1.0000%" height="15" fill="rgb(250,213,24)"/><text x="26.4808%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.46%)</title><rect x="26.7692%" y="325" width="0.4615%" height="15" fill="rgb(247,123,22)"/><text x="27.0192%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (6 samples, 0.46%)</title><rect x="26.7692%" y="309" width="0.4615%" height="15" fill="rgb(231,138,38)"/><text x="27.0192%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.46%)</title><rect x="26.7692%" y="293" width="0.4615%" height="15" fill="rgb(231,145,46)"/><text x="27.0192%" y="303.50"></text></g><g><title>spacelox_core::value::Value::to_string (9 samples, 0.69%)</title><rect x="27.2308%" y="325" width="0.6923%" height="15" fill="rgb(251,118,11)"/><text x="27.4808%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (19 samples, 1.46%)</title><rect x="27.2308%" y="341" width="1.4615%" height="15" fill="rgb(217,147,25)"/><text x="27.4808%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_constant (10 samples, 0.77%)</title><rect x="27.9231%" y="325" width="0.7692%" height="15" fill="rgb(247,81,37)"/><text x="28.1731%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="31.3077%" y="197" width="0.2308%" height="15" fill="rgb(209,12,38)"/><text x="31.5577%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="31.3077%" y="181" width="0.2308%" height="15" fill="rgb(227,1,9)"/><text x="31.5577%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="31.3077%" y="165" width="0.2308%" height="15" fill="rgb(248,47,43)"/><text x="31.5577%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="31.3077%" y="149" width="0.2308%" height="15" fill="rgb(221,10,30)"/><text x="31.5577%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="31.3077%" y="133" width="0.2308%" height="15" fill="rgb(210,229,1)"/><text x="31.5577%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="31.3077%" y="117" width="0.2308%" height="15" fill="rgb(222,148,37)"/><text x="31.5577%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="31.3077%" y="101" width="0.2308%" height="15" fill="rgb(234,67,33)"/><text x="31.5577%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="31.3077%" y="85" width="0.2308%" height="15" fill="rgb(247,98,35)"/><text x="31.5577%" y="95.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="31.3077%" y="69" width="0.2308%" height="15" fill="rgb(247,138,52)"/><text x="31.5577%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="31.3846%" y="53" width="0.1538%" height="15" fill="rgb(213,79,30)"/><text x="31.6346%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (100 samples, 7.69%)</title><rect x="28.6923%" y="293" width="7.6923%" height="15" fill="rgb(246,177,23)"/><text x="28.9423%" y="303.50">hashbrown::..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (100 samples, 7.69%)</title><rect x="28.6923%" y="277" width="7.6923%" height="15" fill="rgb(230,62,27)"/><text x="28.9423%" y="287.50">&lt;spacelox_c..</text></g><g><title>core::ptr::hash (100 samples, 7.69%)</title><rect x="28.6923%" y="261" width="7.6923%" height="15" fill="rgb(216,154,8)"/><text x="28.9423%" y="271.50">core::ptr::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (100 samples, 7.69%)</title><rect x="28.6923%" y="245" width="7.6923%" height="15" fill="rgb(244,35,45)"/><text x="28.9423%" y="255.50">core::hash:..</text></g><g><title>core::hash::Hasher::write_usize (100 samples, 7.69%)</title><rect x="28.6923%" y="229" width="7.6923%" height="15" fill="rgb(251,115,12)"/><text x="28.9423%" y="239.50">core::hash:..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (100 samples, 7.69%)</title><rect x="28.6923%" y="213" width="7.6923%" height="15" fill="rgb(240,54,50)"/><text x="28.9423%" y="223.50">&lt;fnv::FnvHa..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (63 samples, 4.85%)</title><rect x="31.5385%" y="197" width="4.8462%" height="15" fill="rgb(233,84,52)"/><text x="31.7885%" y="207.50">core::..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.92%)</title><rect x="37.6154%" y="277" width="0.9231%" height="15" fill="rgb(207,117,47)"/><text x="37.8654%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (12 samples, 0.92%)</title><rect x="37.6154%" y="261" width="0.9231%" height="15" fill="rgb(249,43,39)"/><text x="37.8654%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (12 samples, 0.92%)</title><rect x="37.6154%" y="245" width="0.9231%" height="15" fill="rgb(209,38,44)"/><text x="37.8654%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="38.5385%" y="277" width="0.1538%" height="15" fill="rgb(236,212,23)"/><text x="38.7885%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="38.5385%" y="261" width="0.1538%" height="15" fill="rgb(242,79,21)"/><text x="38.7885%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="38.5385%" y="245" width="0.1538%" height="15" fill="rgb(211,96,35)"/><text x="38.7885%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="38.5385%" y="229" width="0.1538%" height="15" fill="rgb(253,215,40)"/><text x="38.7885%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="38.5385%" y="213" width="0.1538%" height="15" fill="rgb(211,81,21)"/><text x="38.7885%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="38.5385%" y="197" width="0.1538%" height="15" fill="rgb(208,190,38)"/><text x="38.7885%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="38.5385%" y="181" width="0.1538%" height="15" fill="rgb(235,213,38)"/><text x="38.7885%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="38.5385%" y="165" width="0.1538%" height="15" fill="rgb(237,122,38)"/><text x="38.7885%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="38.5385%" y="149" width="0.1538%" height="15" fill="rgb(244,218,35)"/><text x="38.7885%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (3 samples, 0.23%)</title><rect x="38.6923%" y="277" width="0.2308%" height="15" fill="rgb(240,68,47)"/><text x="38.9423%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.15%)</title><rect x="38.7692%" y="261" width="0.1538%" height="15" fill="rgb(210,16,53)"/><text x="39.0192%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (12 samples, 0.92%)</title><rect x="38.9231%" y="277" width="0.9231%" height="15" fill="rgb(235,124,12)"/><text x="39.1731%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (12 samples, 0.92%)</title><rect x="38.9231%" y="261" width="0.9231%" height="15" fill="rgb(224,169,11)"/><text x="39.1731%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.92%)</title><rect x="38.9231%" y="245" width="0.9231%" height="15" fill="rgb(250,166,2)"/><text x="39.1731%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 1.08%)</title><rect x="39.8462%" y="261" width="1.0769%" height="15" fill="rgb(242,216,29)"/><text x="40.0962%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="40.7692%" y="245" width="0.1538%" height="15" fill="rgb(230,116,27)"/><text x="41.0192%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="40.7692%" y="229" width="0.1538%" height="15" fill="rgb(228,99,48)"/><text x="41.0192%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="40.7692%" y="213" width="0.1538%" height="15" fill="rgb(253,11,6)"/><text x="41.0192%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="40.7692%" y="197" width="0.1538%" height="15" fill="rgb(247,143,39)"/><text x="41.0192%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="40.7692%" y="181" width="0.1538%" height="15" fill="rgb(236,97,10)"/><text x="41.0192%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="40.7692%" y="165" width="0.1538%" height="15" fill="rgb(233,208,19)"/><text x="41.0192%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="40.7692%" y="149" width="0.1538%" height="15" fill="rgb(216,164,2)"/><text x="41.0192%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="40.7692%" y="133" width="0.1538%" height="15" fill="rgb(220,129,5)"/><text x="41.0192%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="40.7692%" y="117" width="0.1538%" height="15" fill="rgb(242,17,10)"/><text x="41.0192%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="40.7692%" y="101" width="0.1538%" height="15" fill="rgb(242,107,0)"/><text x="41.0192%" y="111.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_global (220 samples, 16.92%)</title><rect x="26.1538%" y="357" width="16.9231%" height="15" fill="rgb(251,28,31)"/><text x="26.4038%" y="367.50">spacelox_vm::vm::VmExecuto..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (187 samples, 14.38%)</title><rect x="28.6923%" y="341" width="14.3846%" height="15" fill="rgb(233,223,10)"/><text x="28.9423%" y="351.50">std::collections::hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (187 samples, 14.38%)</title><rect x="28.6923%" y="325" width="14.3846%" height="15" fill="rgb(215,21,27)"/><text x="28.9423%" y="335.50">hashbrown::map::HashMa..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (187 samples, 14.38%)</title><rect x="28.6923%" y="309" width="14.3846%" height="15" fill="rgb(232,23,21)"/><text x="28.9423%" y="319.50">hashbrown::map::HashMa..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (87 samples, 6.69%)</title><rect x="36.3846%" y="293" width="6.6923%" height="15" fill="rgb(244,5,23)"/><text x="36.6346%" y="303.50">hashbrown..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (42 samples, 3.23%)</title><rect x="39.8462%" y="277" width="3.2308%" height="15" fill="rgb(226,81,46)"/><text x="40.0962%" y="287.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (28 samples, 2.15%)</title><rect x="40.9231%" y="261" width="2.1538%" height="15" fill="rgb(247,70,30)"/><text x="41.1731%" y="271.50">c..</text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (28 samples, 2.15%)</title><rect x="40.9231%" y="245" width="2.1538%" height="15" fill="rgb(212,68,19)"/><text x="41.1731%" y="255.50">c..</text></g><g><title>core::core_arch::simd::i8x16::new (28 samples, 2.15%)</title><rect x="40.9231%" y="229" width="2.1538%" height="15" fill="rgb(240,187,13)"/><text x="41.1731%" y="239.50">c..</text></g><g><title>[unknown] (6 samples, 0.46%)</title><rect x="42.6154%" y="213" width="0.4615%" height="15" fill="rgb(223,113,26)"/><text x="42.8654%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.46%)</title><rect x="42.6154%" y="197" width="0.4615%" height="15" fill="rgb(206,192,2)"/><text x="42.8654%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.46%)</title><rect x="42.6154%" y="181" width="0.4615%" height="15" fill="rgb(241,108,4)"/><text x="42.8654%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.46%)</title><rect x="42.6154%" y="165" width="0.4615%" height="15" fill="rgb(247,173,49)"/><text x="42.8654%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.46%)</title><rect x="42.6154%" y="149" width="0.4615%" height="15" fill="rgb(224,114,35)"/><text x="42.8654%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.46%)</title><rect x="42.6154%" y="133" width="0.4615%" height="15" fill="rgb(245,159,27)"/><text x="42.8654%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.46%)</title><rect x="42.6154%" y="117" width="0.4615%" height="15" fill="rgb(245,172,44)"/><text x="42.8654%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="42.6923%" y="101" width="0.3846%" height="15" fill="rgb(236,23,11)"/><text x="42.9423%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="42.6923%" y="85" width="0.3846%" height="15" fill="rgb(205,117,38)"/><text x="42.9423%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (15 samples, 1.15%)</title><rect x="54.8462%" y="325" width="1.1538%" height="15" fill="rgb(237,72,25)"/><text x="55.0962%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (14 samples, 1.08%)</title><rect x="54.9231%" y="309" width="1.0769%" height="15" fill="rgb(244,70,9)"/><text x="55.1731%" y="319.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.54%)</title><rect x="56.0000%" y="325" width="0.5385%" height="15" fill="rgb(217,125,39)"/><text x="56.2500%" y="335.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::call (112 samples, 8.62%)</title><rect x="48.0769%" y="341" width="8.6154%" height="15" fill="rgb(235,36,10)"/><text x="48.3269%" y="351.50">spacelox_vm:..</text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="57.3077%" y="325" width="0.2308%" height="15" fill="rgb(251,123,47)"/><text x="57.5577%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.23%)</title><rect x="57.3077%" y="309" width="0.2308%" height="15" fill="rgb(221,13,13)"/><text x="57.5577%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="57.3846%" y="293" width="0.1538%" height="15" fill="rgb(238,131,9)"/><text x="57.6346%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="57.3846%" y="277" width="0.1538%" height="15" fill="rgb(211,50,8)"/><text x="57.6346%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="57.3846%" y="261" width="0.1538%" height="15" fill="rgb(245,182,24)"/><text x="57.6346%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="57.3846%" y="245" width="0.1538%" height="15" fill="rgb(242,14,37)"/><text x="57.6346%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="57.3846%" y="229" width="0.1538%" height="15" fill="rgb(246,228,12)"/><text x="57.6346%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="57.3846%" y="213" width="0.1538%" height="15" fill="rgb(213,55,15)"/><text x="57.6346%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="57.3846%" y="197" width="0.1538%" height="15" fill="rgb(209,9,3)"/><text x="57.6346%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="59.5385%" y="181" width="0.1538%" height="15" fill="rgb(230,59,30)"/><text x="59.7885%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="59.5385%" y="165" width="0.1538%" height="15" fill="rgb(209,121,21)"/><text x="59.7885%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="59.5385%" y="149" width="0.1538%" height="15" fill="rgb(220,109,13)"/><text x="59.7885%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="59.5385%" y="133" width="0.1538%" height="15" fill="rgb(232,18,1)"/><text x="59.7885%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="59.5385%" y="117" width="0.1538%" height="15" fill="rgb(215,41,42)"/><text x="59.7885%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="59.5385%" y="101" width="0.1538%" height="15" fill="rgb(224,123,36)"/><text x="59.7885%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="59.5385%" y="85" width="0.1538%" height="15" fill="rgb(240,125,3)"/><text x="59.7885%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="59.5385%" y="69" width="0.1538%" height="15" fill="rgb(205,98,50)"/><text x="59.7885%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="59.5385%" y="53" width="0.1538%" height="15" fill="rgb(205,185,37)"/><text x="59.7885%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (43 samples, 3.31%)</title><rect x="57.5385%" y="277" width="3.3077%" height="15" fill="rgb(238,207,15)"/><text x="57.7885%" y="287.50">has..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (43 samples, 3.31%)</title><rect x="57.5385%" y="261" width="3.3077%" height="15" fill="rgb(213,199,42)"/><text x="57.7885%" y="271.50">&lt;sp..</text></g><g><title>core::ptr::hash (43 samples, 3.31%)</title><rect x="57.5385%" y="245" width="3.3077%" height="15" fill="rgb(235,201,11)"/><text x="57.7885%" y="255.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (43 samples, 3.31%)</title><rect x="57.5385%" y="229" width="3.3077%" height="15" fill="rgb(207,46,11)"/><text x="57.7885%" y="239.50">cor..</text></g><g><title>core::hash::Hasher::write_usize (43 samples, 3.31%)</title><rect x="57.5385%" y="213" width="3.3077%" height="15" fill="rgb(241,35,35)"/><text x="57.7885%" y="223.50">cor..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (43 samples, 3.31%)</title><rect x="57.5385%" y="197" width="3.3077%" height="15" fill="rgb(243,32,47)"/><text x="57.7885%" y="207.50">&lt;fn..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (15 samples, 1.15%)</title><rect x="59.6923%" y="181" width="1.1538%" height="15" fill="rgb(247,202,23)"/><text x="59.9423%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.77%)</title><rect x="61.6923%" y="261" width="0.7692%" height="15" fill="rgb(219,102,11)"/><text x="61.9423%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (10 samples, 0.77%)</title><rect x="61.6923%" y="245" width="0.7692%" height="15" fill="rgb(243,110,44)"/><text x="61.9423%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (8 samples, 0.62%)</title><rect x="61.8462%" y="229" width="0.6154%" height="15" fill="rgb(222,74,54)"/><text x="62.0962%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (12 samples, 0.92%)</title><rect x="62.4615%" y="261" width="0.9231%" height="15" fill="rgb(216,99,12)"/><text x="62.7115%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5 samples, 0.38%)</title><rect x="63.0000%" y="245" width="0.3846%" height="15" fill="rgb(226,22,26)"/><text x="63.2500%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.38%)</title><rect x="63.0000%" y="229" width="0.3846%" height="15" fill="rgb(217,163,10)"/><text x="63.2500%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (5 samples, 0.38%)</title><rect x="63.0000%" y="213" width="0.3846%" height="15" fill="rgb(213,25,53)"/><text x="63.2500%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::ctrl (3 samples, 0.23%)</title><rect x="63.3846%" y="261" width="0.2308%" height="15" fill="rgb(252,105,26)"/><text x="63.6346%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.23%)</title><rect x="63.6154%" y="261" width="0.2308%" height="15" fill="rgb(220,39,43)"/><text x="63.8654%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 1.15%)</title><rect x="63.8462%" y="245" width="1.1538%" height="15" fill="rgb(229,68,48)"/><text x="64.0962%" y="255.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::invoke_from_class (119 samples, 9.15%)</title><rect x="56.6923%" y="341" width="9.1538%" height="15" fill="rgb(252,8,32)"/><text x="56.9423%" y="351.50">spacelox_vm::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (108 samples, 8.31%)</title><rect x="57.5385%" y="325" width="8.3077%" height="15" fill="rgb(223,20,43)"/><text x="57.7885%" y="335.50">std::collect..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (108 samples, 8.31%)</title><rect x="57.5385%" y="309" width="8.3077%" height="15" fill="rgb(229,81,49)"/><text x="57.7885%" y="319.50">hashbrown::m..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (108 samples, 8.31%)</title><rect x="57.5385%" y="293" width="8.3077%" height="15" fill="rgb(236,28,36)"/><text x="57.7885%" y="303.50">hashbrown::m..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (65 samples, 5.00%)</title><rect x="60.8462%" y="277" width="5.0000%" height="15" fill="rgb(249,185,26)"/><text x="61.0962%" y="287.50">hashbr..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (26 samples, 2.00%)</title><rect x="63.8462%" y="261" width="2.0000%" height="15" fill="rgb(249,174,33)"/><text x="64.0962%" y="271.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (11 samples, 0.85%)</title><rect x="65.0000%" y="245" width="0.8462%" height="15" fill="rgb(233,201,37)"/><text x="65.2500%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (11 samples, 0.85%)</title><rect x="65.0000%" y="229" width="0.8462%" height="15" fill="rgb(221,78,26)"/><text x="65.2500%" y="239.50"></text></g><g><title>core::core_arch::simd::i8x16::new (11 samples, 0.85%)</title><rect x="65.0000%" y="213" width="0.8462%" height="15" fill="rgb(250,127,30)"/><text x="65.2500%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 1.08%)</title><rect x="66.6923%" y="309" width="1.0769%" height="15" fill="rgb(230,49,44)"/><text x="66.9423%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (14 samples, 1.08%)</title><rect x="66.6923%" y="293" width="1.0769%" height="15" fill="rgb(229,67,23)"/><text x="66.9423%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (14 samples, 1.08%)</title><rect x="66.6923%" y="277" width="1.0769%" height="15" fill="rgb(249,83,47)"/><text x="66.9423%" y="287.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::peek (26 samples, 2.00%)</title><rect x="65.8462%" y="341" width="2.0000%" height="15" fill="rgb(215,43,3)"/><text x="66.0962%" y="351.50">s..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::get_val (20 samples, 1.54%)</title><rect x="66.3077%" y="325" width="1.5385%" height="15" fill="rgb(238,154,13)"/><text x="66.5577%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 1.85%)</title><rect x="67.9231%" y="325" width="1.8462%" height="15" fill="rgb(219,56,2)"/><text x="68.1731%" y="335.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (24 samples, 1.85%)</title><rect x="67.9231%" y="309" width="1.8462%" height="15" fill="rgb(233,0,4)"/><text x="68.1731%" y="319.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (24 samples, 1.85%)</title><rect x="67.9231%" y="293" width="1.8462%" height="15" fill="rgb(235,30,7)"/><text x="68.1731%" y="303.50">a..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (27 samples, 2.08%)</title><rect x="67.8462%" y="341" width="2.0769%" height="15" fill="rgb(250,79,13)"/><text x="68.0962%" y="351.50">s..</text></g><g><title>spacelox_core::value::Value::to_string (7 samples, 0.54%)</title><rect x="69.9231%" y="325" width="0.5385%" height="15" fill="rgb(211,146,34)"/><text x="70.1731%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.31%)</title><rect x="72.6923%" y="309" width="0.3077%" height="15" fill="rgb(228,22,38)"/><text x="72.9423%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.31%)</title><rect x="72.6923%" y="293" width="0.3077%" height="15" fill="rgb(235,168,5)"/><text x="72.9423%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (4 samples, 0.31%)</title><rect x="72.6923%" y="277" width="0.3077%" height="15" fill="rgb(221,155,16)"/><text x="72.9423%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.31%)</title><rect x="72.6923%" y="261" width="0.3077%" height="15" fill="rgb(215,215,53)"/><text x="72.9423%" y="271.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (41 samples, 3.15%)</title><rect x="69.9231%" y="341" width="3.1538%" height="15" fill="rgb(223,4,10)"/><text x="70.1731%" y="351.50">spa..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_constant (33 samples, 2.54%)</title><rect x="70.5385%" y="325" width="2.5385%" height="15" fill="rgb(234,103,6)"/><text x="70.7885%" y="335.50">sp..</text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="77.2308%" y="197" width="0.3846%" height="15" fill="rgb(227,97,0)"/><text x="77.4808%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="77.2308%" y="181" width="0.3846%" height="15" fill="rgb(234,150,53)"/><text x="77.4808%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="77.2308%" y="165" width="0.3846%" height="15" fill="rgb(228,201,54)"/><text x="77.4808%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="77.2308%" y="149" width="0.3846%" height="15" fill="rgb(222,22,37)"/><text x="77.4808%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="77.2308%" y="133" width="0.3846%" height="15" fill="rgb(237,53,32)"/><text x="77.4808%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="77.2308%" y="117" width="0.3846%" height="15" fill="rgb(233,25,53)"/><text x="77.4808%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="77.2308%" y="101" width="0.3846%" height="15" fill="rgb(210,40,34)"/><text x="77.4808%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="77.2308%" y="85" width="0.3846%" height="15" fill="rgb(241,220,44)"/><text x="77.4808%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="77.2308%" y="69" width="0.3846%" height="15" fill="rgb(235,28,35)"/><text x="77.4808%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.38%)</title><rect x="77.2308%" y="53" width="0.3846%" height="15" fill="rgb(210,56,17)"/><text x="77.4808%" y="63.50"></text></g><g><title>[unknown] (4 samples, 0.31%)</title><rect x="77.3077%" y="37" width="0.3077%" height="15" fill="rgb(224,130,29)"/><text x="77.5577%" y="47.50"></text></g><g><title>hashbrown::map::make_hash (69 samples, 5.31%)</title><rect x="73.0769%" y="293" width="5.3077%" height="15" fill="rgb(235,212,8)"/><text x="73.3269%" y="303.50">hashbr..</text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (69 samples, 5.31%)</title><rect x="73.0769%" y="277" width="5.3077%" height="15" fill="rgb(223,33,50)"/><text x="73.3269%" y="287.50">&lt;space..</text></g><g><title>core::ptr::hash (68 samples, 5.23%)</title><rect x="73.1538%" y="261" width="5.2308%" height="15" fill="rgb(219,149,13)"/><text x="73.4038%" y="271.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (68 samples, 5.23%)</title><rect x="73.1538%" y="245" width="5.2308%" height="15" fill="rgb(250,156,29)"/><text x="73.4038%" y="255.50">core::..</text></g><g><title>core::hash::Hasher::write_usize (68 samples, 5.23%)</title><rect x="73.1538%" y="229" width="5.2308%" height="15" fill="rgb(216,193,19)"/><text x="73.4038%" y="239.50">core::..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (68 samples, 5.23%)</title><rect x="73.1538%" y="213" width="5.2308%" height="15" fill="rgb(216,135,14)"/><text x="73.4038%" y="223.50">&lt;fnv::..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (10 samples, 0.77%)</title><rect x="77.6154%" y="197" width="0.7692%" height="15" fill="rgb(241,47,5)"/><text x="77.8654%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (5 samples, 0.38%)</title><rect x="79.3846%" y="277" width="0.3846%" height="15" fill="rgb(233,42,35)"/><text x="79.6346%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.31%)</title><rect x="79.7692%" y="277" width="0.3077%" height="15" fill="rgb(231,13,6)"/><text x="80.0192%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.31%)</title><rect x="80.0769%" y="277" width="0.3077%" height="15" fill="rgb(207,181,40)"/><text x="80.3269%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.31%)</title><rect x="80.0769%" y="261" width="0.3077%" height="15" fill="rgb(254,173,49)"/><text x="80.3269%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.31%)</title><rect x="80.0769%" y="245" width="0.3077%" height="15" fill="rgb(221,1,38)"/><text x="80.3269%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.54%)</title><rect x="80.3846%" y="261" width="0.5385%" height="15" fill="rgb(206,124,46)"/><text x="80.6346%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (19 samples, 1.46%)</title><rect x="80.3846%" y="277" width="1.4615%" height="15" fill="rgb(249,21,11)"/><text x="80.6346%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (12 samples, 0.92%)</title><rect x="80.9231%" y="261" width="0.9231%" height="15" fill="rgb(222,201,40)"/><text x="81.1731%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (12 samples, 0.92%)</title><rect x="80.9231%" y="245" width="0.9231%" height="15" fill="rgb(235,61,29)"/><text x="81.1731%" y="255.50"></text></g><g><title>core::core_arch::simd::i8x16::new (12 samples, 0.92%)</title><rect x="80.9231%" y="229" width="0.9231%" height="15" fill="rgb(219,207,3)"/><text x="81.1731%" y="239.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_invoke (505 samples, 38.85%)</title><rect x="43.0769%" y="357" width="38.8462%" height="15" fill="rgb(222,56,46)"/><text x="43.3269%" y="367.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::op_invoke</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (115 samples, 8.85%)</title><rect x="73.0769%" y="341" width="8.8462%" height="15" fill="rgb(239,76,54)"/><text x="73.3269%" y="351.50">std::collect..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (115 samples, 8.85%)</title><rect x="73.0769%" y="325" width="8.8462%" height="15" fill="rgb(231,124,27)"/><text x="73.3269%" y="335.50">hashbrown::m..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (115 samples, 8.85%)</title><rect x="73.0769%" y="309" width="8.8462%" height="15" fill="rgb(249,195,6)"/><text x="73.3269%" y="319.50">hashbrown::m..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (46 samples, 3.54%)</title><rect x="78.3846%" y="293" width="3.5385%" height="15" fill="rgb(237,174,47)"/><text x="78.6346%" y="303.50">has..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_less (2 samples, 0.15%)</title><rect x="82.0000%" y="357" width="0.1538%" height="15" fill="rgb(206,201,31)"/><text x="82.2500%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::pop (2 samples, 0.15%)</title><rect x="82.0000%" y="341" width="0.1538%" height="15" fill="rgb(231,57,52)"/><text x="82.2500%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_literal (5 samples, 0.38%)</title><rect x="82.1538%" y="357" width="0.3846%" height="15" fill="rgb(248,177,22)"/><text x="82.4038%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (5 samples, 0.38%)</title><rect x="82.1538%" y="341" width="0.3846%" height="15" fill="rgb(215,211,37)"/><text x="82.4038%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::set_val (4 samples, 0.31%)</title><rect x="82.2308%" y="325" width="0.3077%" height="15" fill="rgb(241,128,51)"/><text x="82.4808%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.15%)</title><rect x="82.3846%" y="309" width="0.1538%" height="15" fill="rgb(227,165,31)"/><text x="82.6346%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (2 samples, 0.15%)</title><rect x="82.3846%" y="293" width="0.1538%" height="15" fill="rgb(228,167,24)"/><text x="82.6346%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.15%)</title><rect x="82.3846%" y="277" width="0.1538%" height="15" fill="rgb(228,143,12)"/><text x="82.6346%" y="287.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_loop (4 samples, 0.31%)</title><rect x="82.5385%" y="357" width="0.3077%" height="15" fill="rgb(249,149,8)"/><text x="82.7885%" y="367.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_short (2 samples, 0.15%)</title><rect x="82.6923%" y="341" width="0.1538%" height="15" fill="rgb(243,35,44)"/><text x="82.9423%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_byte (2 samples, 0.15%)</title><rect x="82.6923%" y="325" width="0.1538%" height="15" fill="rgb(246,89,9)"/><text x="82.9423%" y="335.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.15%)</title><rect x="82.6923%" y="309" width="0.1538%" height="15" fill="rgb(233,213,13)"/><text x="82.9423%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (18 samples, 1.38%)</title><rect x="86.6923%" y="325" width="1.3846%" height="15" fill="rgb(233,141,41)"/><text x="86.9423%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (18 samples, 1.38%)</title><rect x="86.6923%" y="309" width="1.3846%" height="15" fill="rgb(239,167,4)"/><text x="86.9423%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (18 samples, 1.38%)</title><rect x="86.6923%" y="293" width="1.3846%" height="15" fill="rgb(209,217,16)"/><text x="86.9423%" y="303.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::close_upvalues (29 samples, 2.23%)</title><rect x="86.6923%" y="341" width="2.2308%" height="15" fill="rgb(219,88,35)"/><text x="86.9423%" y="351.50">s..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::retain (11 samples, 0.85%)</title><rect x="88.0769%" y="325" width="0.8462%" height="15" fill="rgb(220,193,23)"/><text x="88.3269%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (11 samples, 0.85%)</title><rect x="88.0769%" y="309" width="0.8462%" height="15" fill="rgb(230,90,52)"/><text x="88.3269%" y="319.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::current_frame (11 samples, 0.85%)</title><rect x="88.9231%" y="341" width="0.8462%" height="15" fill="rgb(252,106,19)"/><text x="89.1731%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::pop (35 samples, 2.69%)</title><rect x="89.7692%" y="341" width="2.6923%" height="15" fill="rgb(206,74,20)"/><text x="90.0192%" y="351.50">sp..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.46%)</title><rect x="92.0000%" y="325" width="0.4615%" height="15" fill="rgb(230,138,44)"/><text x="92.2500%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (6 samples, 0.46%)</title><rect x="92.0000%" y="309" width="0.4615%" height="15" fill="rgb(235,182,43)"/><text x="92.2500%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.46%)</title><rect x="92.0000%" y="293" width="0.4615%" height="15" fill="rgb(242,16,51)"/><text x="92.2500%" y="303.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_return (145 samples, 11.15%)</title><rect x="82.8462%" y="357" width="11.1538%" height="15" fill="rgb(248,9,4)"/><text x="83.0962%" y="367.50">spacelox_vm::vm:..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::push (20 samples, 1.54%)</title><rect x="92.4615%" y="341" width="1.5385%" height="15" fill="rgb(210,31,22)"/><text x="92.7115%" y="351.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::set_val (10 samples, 0.77%)</title><rect x="93.2308%" y="325" width="0.7692%" height="15" fill="rgb(239,54,39)"/><text x="93.4808%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.15%)</title><rect x="94.1538%" y="309" width="0.1538%" height="15" fill="rgb(230,99,41)"/><text x="94.4038%" y="319.50"></text></g><g><title>&lt;spacelox_core::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (2 samples, 0.15%)</title><rect x="94.1538%" y="293" width="0.1538%" height="15" fill="rgb(253,106,12)"/><text x="94.4038%" y="303.50"></text></g><g><title>core::ptr::hash (2 samples, 0.15%)</title><rect x="94.1538%" y="277" width="0.1538%" height="15" fill="rgb(213,46,41)"/><text x="94.4038%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (2 samples, 0.15%)</title><rect x="94.1538%" y="261" width="0.1538%" height="15" fill="rgb(215,133,35)"/><text x="94.4038%" y="271.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.15%)</title><rect x="94.1538%" y="245" width="0.1538%" height="15" fill="rgb(213,28,5)"/><text x="94.4038%" y="255.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (2 samples, 0.15%)</title><rect x="94.1538%" y="229" width="0.1538%" height="15" fill="rgb(215,77,49)"/><text x="94.4038%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 0.15%)</title><rect x="94.1538%" y="213" width="0.1538%" height="15" fill="rgb(248,100,22)"/><text x="94.4038%" y="223.50"></text></g><g><title>__libc_start_main (1,061 samples, 81.62%)</title><rect x="12.8462%" y="549" width="81.6154%" height="15" fill="rgb(208,67,9)"/><text x="13.0962%" y="559.50">__libc_start_main</text></g><g><title>main (1,061 samples, 81.62%)</title><rect x="12.8462%" y="533" width="81.6154%" height="15" fill="rgb(219,133,21)"/><text x="13.0962%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (1,061 samples, 81.62%)</title><rect x="12.8462%" y="517" width="81.6154%" height="15" fill="rgb(246,46,29)"/><text x="13.0962%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,061 samples, 81.62%)</title><rect x="12.8462%" y="501" width="81.6154%" height="15" fill="rgb(246,185,52)"/><text x="13.0962%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,061 samples, 81.62%)</title><rect x="12.8462%" y="485" width="81.6154%" height="15" fill="rgb(252,136,11)"/><text x="13.0962%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,061 samples, 81.62%)</title><rect x="12.8462%" y="469" width="81.6154%" height="15" fill="rgb(219,138,53)"/><text x="13.0962%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,061 samples, 81.62%)</title><rect x="12.8462%" y="453" width="81.6154%" height="15" fill="rgb(211,51,23)"/><text x="13.0962%" y="463.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::rt::lang_start::_{{closure}} (1,061 samples, 81.62%)</title><rect x="12.8462%" y="437" width="81.6154%" height="15" fill="rgb(247,221,28)"/><text x="13.0962%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>spacelox::main (1,061 samples, 81.62%)</title><rect x="12.8462%" y="421" width="81.6154%" height="15" fill="rgb(251,222,45)"/><text x="13.0962%" y="431.50">spacelox::main</text></g><g><title>spacelox_vm::vm::Vm&lt;I&gt;::run (1,061 samples, 81.62%)</title><rect x="12.8462%" y="405" width="81.6154%" height="15" fill="rgb(217,162,53)"/><text x="13.0962%" y="415.50">spacelox_vm::vm::Vm&lt;I&gt;::run</text></g><g><title>spacelox_vm::vm::Vm&lt;I&gt;::interpret (1,061 samples, 81.62%)</title><rect x="12.8462%" y="389" width="81.6154%" height="15" fill="rgb(229,93,14)"/><text x="13.0962%" y="399.50">spacelox_vm::vm::Vm&lt;I&gt;::interpret</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::run (1,061 samples, 81.62%)</title><rect x="12.8462%" y="373" width="81.6154%" height="15" fill="rgb(209,67,49)"/><text x="13.0962%" y="383.50">spacelox_vm::vm::VmExecutor&lt;I&gt;::run</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_set_global (6 samples, 0.46%)</title><rect x="94.0000%" y="357" width="0.4615%" height="15" fill="rgb(213,87,29)"/><text x="94.2500%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.31%)</title><rect x="94.1538%" y="341" width="0.3077%" height="15" fill="rgb(205,151,52)"/><text x="94.4038%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.31%)</title><rect x="94.1538%" y="325" width="0.3077%" height="15" fill="rgb(253,215,39)"/><text x="94.4038%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 0.15%)</title><rect x="94.3077%" y="309" width="0.1538%" height="15" fill="rgb(221,220,41)"/><text x="94.5577%" y="319.50"></text></g><g><title>_start (1,062 samples, 81.69%)</title><rect x="12.8462%" y="565" width="81.6923%" height="15" fill="rgb(218,133,21)"/><text x="13.0962%" y="575.50">_start</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::frame_instruction (44 samples, 3.38%)</title><rect x="94.5385%" y="533" width="3.3846%" height="15" fill="rgb(221,193,43)"/><text x="94.7885%" y="543.50">spa..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_get_global (10 samples, 0.77%)</title><rect x="97.9231%" y="533" width="0.7692%" height="15" fill="rgb(240,128,52)"/><text x="98.1731%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (10 samples, 0.77%)</title><rect x="97.9231%" y="517" width="0.7692%" height="15" fill="rgb(253,114,12)"/><text x="98.1731%" y="527.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::op_invoke (15 samples, 1.15%)</title><rect x="98.6923%" y="533" width="1.1538%" height="15" fill="rgb(215,223,47)"/><text x="98.9423%" y="543.50"></text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::read_string (5 samples, 0.38%)</title><rect x="99.4615%" y="517" width="0.3846%" height="15" fill="rgb(248,225,23)"/><text x="99.7115%" y="527.50"></text></g><g><title>all (1,300 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(250,108,0)"/><text x="0.2500%" y="607.50"></text></g><g><title>spacelox (1,296 samples, 99.69%)</title><rect x="0.3077%" y="581" width="99.6923%" height="15" fill="rgb(228,208,7)"/><text x="0.5577%" y="591.50">spacelox</text></g><g><title>spacelox_vm::vm::Vm&lt;I&gt;::interpret (71 samples, 5.46%)</title><rect x="94.5385%" y="565" width="5.4615%" height="15" fill="rgb(244,45,10)"/><text x="94.7885%" y="575.50">spacelo..</text></g><g><title>spacelox_vm::vm::VmExecutor&lt;I&gt;::run (71 samples, 5.46%)</title><rect x="94.5385%" y="549" width="5.4615%" height="15" fill="rgb(207,125,25)"/><text x="94.7885%" y="559.50">spacelo..</text></g></svg></svg>