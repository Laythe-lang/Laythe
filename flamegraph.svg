<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="597.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="597.00"> </text><svg id="frames" x="10" width="1180"><g><title>laythe_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (1 samples, 0.45%)</title><rect x="0.0000%" y="517" width="0.4525%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="527.50"></text></g><g><title>laythe_core::object::BuiltinPrimitives::for_value (1 samples, 0.45%)</title><rect x="0.4525%" y="517" width="0.4525%" height="15" fill="rgb(217,0,24)"/><text x="0.7025%" y="527.50"></text></g><g><title>laythe_vm::vm::VmExecutor::call (3 samples, 1.36%)</title><rect x="0.9050%" y="517" width="1.3575%" height="15" fill="rgb(221,193,54)"/><text x="1.1550%" y="527.50"></text></g><g><title>laythe_vm::vm::VmExecutor::get_property (3 samples, 1.36%)</title><rect x="2.2624%" y="517" width="1.3575%" height="15" fill="rgb(248,212,6)"/><text x="2.5124%" y="527.50"></text></g><g><title>laythe_core::object::Instance::get_field (3 samples, 1.36%)</title><rect x="2.2624%" y="501" width="1.3575%" height="15" fill="rgb(208,68,35)"/><text x="2.5124%" y="511.50"></text></g><g><title>[[heap]] (9 samples, 4.07%)</title><rect x="0.0000%" y="533" width="4.0724%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="543.50">[[he..</text></g><g><title>laythe_vm::vm::VmExecutor::invoke_from_class (1 samples, 0.45%)</title><rect x="3.6199%" y="517" width="0.4525%" height="15" fill="rgb(207,160,47)"/><text x="3.8699%" y="527.50"></text></g><g><title>laythe_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (1 samples, 0.45%)</title><rect x="4.0724%" y="517" width="0.4525%" height="15" fill="rgb(228,23,34)"/><text x="4.3224%" y="527.50"></text></g><g><title>laythe_vm::vm::VmExecutor::close_upvalues (2 samples, 0.90%)</title><rect x="4.5249%" y="517" width="0.9050%" height="15" fill="rgb(218,30,26)"/><text x="4.7749%" y="527.50"></text></g><g><title>laythe_vm::vm::VmExecutor::get_property (2 samples, 0.90%)</title><rect x="5.4299%" y="517" width="0.9050%" height="15" fill="rgb(220,122,19)"/><text x="5.6799%" y="527.50"></text></g><g><title>laythe_vm::vm::VmExecutor::invoke (1 samples, 0.45%)</title><rect x="6.3348%" y="517" width="0.4525%" height="15" fill="rgb(250,228,42)"/><text x="6.5848%" y="527.50"></text></g><g><title>laythe_vm::vm::VmExecutor::invoke_from_class (5 samples, 2.26%)</title><rect x="6.7873%" y="517" width="2.2624%" height="15" fill="rgb(240,193,28)"/><text x="7.0373%" y="527.50">l..</text></g><g><title>laythe_vm::vm::VmExecutor::resolve_call (1 samples, 0.45%)</title><rect x="9.0498%" y="517" width="0.4525%" height="15" fill="rgb(216,20,37)"/><text x="9.2998%" y="527.50"></text></g><g><title>laythe_vm::vm::VmExecutor::op_invoke (1 samples, 0.45%)</title><rect x="9.5023%" y="501" width="0.4525%" height="15" fill="rgb(206,188,39)"/><text x="9.7523%" y="511.50"></text></g><g><title>[[stack]] (17 samples, 7.69%)</title><rect x="4.0724%" y="533" width="7.6923%" height="15" fill="rgb(217,207,13)"/><text x="4.3224%" y="543.50">[[stack]]</text></g><g><title>laythe_vm::vm::VmExecutor::run (5 samples, 2.26%)</title><rect x="9.5023%" y="517" width="2.2624%" height="15" fill="rgb(231,73,38)"/><text x="9.7523%" y="527.50">l..</text></g><g><title>laythe_vm::vm::VmExecutor::op_return (4 samples, 1.81%)</title><rect x="9.9548%" y="501" width="1.8100%" height="15" fill="rgb(225,20,46)"/><text x="10.2048%" y="511.50">l..</text></g><g><title>laythe_vm::vm::VmExecutor::pop_frame (4 samples, 1.81%)</title><rect x="9.9548%" y="485" width="1.8100%" height="15" fill="rgb(210,31,41)"/><text x="10.2048%" y="495.50">l..</text></g><g><title>laythe_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (1 samples, 0.45%)</title><rect x="11.7647%" y="517" width="0.4525%" height="15" fill="rgb(221,200,47)"/><text x="12.0147%" y="527.50"></text></g><g><title>laythe_core::object::BuiltinPrimitives::for_value (1 samples, 0.45%)</title><rect x="12.2172%" y="517" width="0.4525%" height="15" fill="rgb(226,26,5)"/><text x="12.4672%" y="527.50"></text></g><g><title>laythe_vm::vm::VmExecutor::close_upvalues (1 samples, 0.45%)</title><rect x="12.6697%" y="517" width="0.4525%" height="15" fill="rgb(249,33,26)"/><text x="12.9197%" y="527.50"></text></g><g><title>laythe_vm::vm::VmExecutor::invoke (1 samples, 0.45%)</title><rect x="13.1222%" y="517" width="0.4525%" height="15" fill="rgb(235,183,28)"/><text x="13.3722%" y="527.50"></text></g><g><title>laythe_vm::vm::VmExecutor::invoke_from_class (3 samples, 1.36%)</title><rect x="13.5747%" y="517" width="1.3575%" height="15" fill="rgb(221,5,38)"/><text x="13.8247%" y="527.50"></text></g><g><title>laythe_core::object::Class::get_method (1 samples, 0.45%)</title><rect x="14.4796%" y="501" width="0.4525%" height="15" fill="rgb(247,18,42)"/><text x="14.7296%" y="511.50"></text></g><g><title>[unknown] (8 samples, 3.62%)</title><rect x="11.7647%" y="533" width="3.6199%" height="15" fill="rgb(241,131,45)"/><text x="12.0147%" y="543.50">[unk..</text></g><g><title>laythe_vm::vm::VmExecutor::resolve_call (1 samples, 0.45%)</title><rect x="14.9321%" y="517" width="0.4525%" height="15" fill="rgb(249,31,29)"/><text x="15.1821%" y="527.50"></text></g><g><title>laythe_vm::vm::VmExecutor::op_add (1 samples, 0.45%)</title><rect x="18.5520%" y="373" width="0.4525%" height="15" fill="rgb(225,111,53)"/><text x="18.8020%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 6.33%)</title><rect x="19.0045%" y="293" width="6.3348%" height="15" fill="rgb(238,160,17)"/><text x="19.2545%" y="303.50">hashbrow..</text></g><g><title>&lt;laythe_env::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (14 samples, 6.33%)</title><rect x="19.0045%" y="277" width="6.3348%" height="15" fill="rgb(214,148,48)"/><text x="19.2545%" y="287.50">&lt;laythe_..</text></g><g><title>core::ptr::hash (14 samples, 6.33%)</title><rect x="19.0045%" y="261" width="6.3348%" height="15" fill="rgb(232,36,49)"/><text x="19.2545%" y="271.50">core::pt..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (14 samples, 6.33%)</title><rect x="19.0045%" y="245" width="6.3348%" height="15" fill="rgb(209,103,24)"/><text x="19.2545%" y="255.50">core::ha..</text></g><g><title>core::hash::Hasher::write_usize (14 samples, 6.33%)</title><rect x="19.0045%" y="229" width="6.3348%" height="15" fill="rgb(229,88,8)"/><text x="19.2545%" y="239.50">core::ha..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (12 samples, 5.43%)</title><rect x="19.9095%" y="213" width="5.4299%" height="15" fill="rgb(213,181,19)"/><text x="20.1595%" y="223.50">&lt;fnv::F..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (9 samples, 4.07%)</title><rect x="21.2670%" y="197" width="4.0724%" height="15" fill="rgb(254,191,54)"/><text x="21.5170%" y="207.50">core..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.36%)</title><rect x="25.3394%" y="277" width="1.3575%" height="15" fill="rgb(241,83,37)"/><text x="25.5894%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.90%)</title><rect x="26.6968%" y="277" width="0.9050%" height="15" fill="rgb(233,36,39)"/><text x="26.9468%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.90%)</title><rect x="26.6968%" y="261" width="0.9050%" height="15" fill="rgb(226,3,54)"/><text x="26.9468%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (2 samples, 0.90%)</title><rect x="26.6968%" y="245" width="0.9050%" height="15" fill="rgb(245,192,40)"/><text x="26.9468%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (2 samples, 0.90%)</title><rect x="26.6968%" y="229" width="0.9050%" height="15" fill="rgb(238,167,29)"/><text x="26.9468%" y="239.50"></text></g><g><title>core::num::&lt;impl u16&gt;::trailing_zeros (2 samples, 0.90%)</title><rect x="26.6968%" y="213" width="0.9050%" height="15" fill="rgb(232,182,51)"/><text x="26.9468%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (1 samples, 0.45%)</title><rect x="27.6018%" y="277" width="0.4525%" height="15" fill="rgb(231,60,39)"/><text x="27.8518%" y="287.50"></text></g><g><title>&lt;laythe_env::managed::Managed&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.45%)</title><rect x="27.6018%" y="261" width="0.4525%" height="15" fill="rgb(208,69,12)"/><text x="27.8518%" y="271.50"></text></g><g><title>core::ptr::eq (1 samples, 0.45%)</title><rect x="27.6018%" y="245" width="0.4525%" height="15" fill="rgb(235,93,37)"/><text x="27.8518%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 1.81%)</title><rect x="28.0543%" y="261" width="1.8100%" height="15" fill="rgb(213,116,39)"/><text x="28.3043%" y="271.50">c..</text></g><g><title>laythe_core::module::Module::get_symbol (27 samples, 12.22%)</title><rect x="19.0045%" y="357" width="12.2172%" height="15" fill="rgb(222,207,29)"/><text x="19.2545%" y="367.50">laythe_core::modul..</text></g><g><title>laythe_core::object::Map&lt;K,V&gt;::get (27 samples, 12.22%)</title><rect x="19.0045%" y="341" width="12.2172%" height="15" fill="rgb(206,96,30)"/><text x="19.2545%" y="351.50">laythe_core::objec..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (27 samples, 12.22%)</title><rect x="19.0045%" y="325" width="12.2172%" height="15" fill="rgb(218,138,4)"/><text x="19.2545%" y="335.50">hashbrown::map::Ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (27 samples, 12.22%)</title><rect x="19.0045%" y="309" width="12.2172%" height="15" fill="rgb(250,191,14)"/><text x="19.2545%" y="319.50">hashbrown::map::Ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (13 samples, 5.88%)</title><rect x="25.3394%" y="293" width="5.8824%" height="15" fill="rgb(239,60,40)"/><text x="25.5894%" y="303.50">hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 3.17%)</title><rect x="28.0543%" y="277" width="3.1674%" height="15" fill="rgb(206,27,48)"/><text x="28.3043%" y="287.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 1.36%)</title><rect x="29.8643%" y="261" width="1.3575%" height="15" fill="rgb(225,35,8)"/><text x="30.1143%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 1.36%)</title><rect x="29.8643%" y="245" width="1.3575%" height="15" fill="rgb(250,213,24)"/><text x="30.1143%" y="255.50"></text></g><g><title>core::core_arch::simd::i8x16::new (3 samples, 1.36%)</title><rect x="29.8643%" y="229" width="1.3575%" height="15" fill="rgb(247,123,22)"/><text x="30.1143%" y="239.50"></text></g><g><title>laythe_vm::vm::VmExecutor::push (2 samples, 0.90%)</title><rect x="31.2217%" y="357" width="0.9050%" height="15" fill="rgb(231,138,38)"/><text x="31.4717%" y="367.50"></text></g><g><title>laythe_core::value::boxed::Value::to_str (1 samples, 0.45%)</title><rect x="32.1267%" y="341" width="0.4525%" height="15" fill="rgb(231,145,46)"/><text x="32.3767%" y="351.50"></text></g><g><title>laythe_core::value::boxed::Value::to_obj_tag (1 samples, 0.45%)</title><rect x="32.1267%" y="325" width="0.4525%" height="15" fill="rgb(251,118,11)"/><text x="32.3767%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="309" width="0.4525%" height="15" fill="rgb(217,147,25)"/><text x="32.3767%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="293" width="0.4525%" height="15" fill="rgb(247,81,37)"/><text x="32.3767%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="277" width="0.4525%" height="15" fill="rgb(209,12,38)"/><text x="32.3767%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="261" width="0.4525%" height="15" fill="rgb(227,1,9)"/><text x="32.3767%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="245" width="0.4525%" height="15" fill="rgb(248,47,43)"/><text x="32.3767%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="229" width="0.4525%" height="15" fill="rgb(221,10,30)"/><text x="32.3767%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="213" width="0.4525%" height="15" fill="rgb(210,229,1)"/><text x="32.3767%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="197" width="0.4525%" height="15" fill="rgb(222,148,37)"/><text x="32.3767%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="181" width="0.4525%" height="15" fill="rgb(234,67,33)"/><text x="32.3767%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="165" width="0.4525%" height="15" fill="rgb(247,98,35)"/><text x="32.3767%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="149" width="0.4525%" height="15" fill="rgb(247,138,52)"/><text x="32.3767%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="133" width="0.4525%" height="15" fill="rgb(213,79,30)"/><text x="32.3767%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="117" width="0.4525%" height="15" fill="rgb(246,177,23)"/><text x="32.3767%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="101" width="0.4525%" height="15" fill="rgb(230,62,27)"/><text x="32.3767%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="85" width="0.4525%" height="15" fill="rgb(216,154,8)"/><text x="32.3767%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="69" width="0.4525%" height="15" fill="rgb(244,35,45)"/><text x="32.3767%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="53" width="0.4525%" height="15" fill="rgb(251,115,12)"/><text x="32.3767%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="32.1267%" y="37" width="0.4525%" height="15" fill="rgb(240,54,50)"/><text x="32.3767%" y="47.50"></text></g><g><title>laythe_vm::vm::VmExecutor::op_get_global (32 samples, 14.48%)</title><rect x="19.0045%" y="373" width="14.4796%" height="15" fill="rgb(233,84,52)"/><text x="19.2545%" y="383.50">laythe_vm::vm::VmExecu..</text></g><g><title>laythe_vm::vm::VmExecutor::read_string (3 samples, 1.36%)</title><rect x="32.1267%" y="357" width="1.3575%" height="15" fill="rgb(207,117,47)"/><text x="32.3767%" y="367.50"></text></g><g><title>laythe_vm::vm::VmExecutor::read_constant (2 samples, 0.90%)</title><rect x="32.5792%" y="341" width="0.9050%" height="15" fill="rgb(249,43,39)"/><text x="32.8292%" y="351.50"></text></g><g><title>laythe_vm::vm::VmExecutor::op_get_local (3 samples, 1.36%)</title><rect x="33.4842%" y="373" width="1.3575%" height="15" fill="rgb(209,38,44)"/><text x="33.7342%" y="383.50"></text></g><g><title>laythe_vm::vm::VmExecutor::read_byte (1 samples, 0.45%)</title><rect x="34.3891%" y="357" width="0.4525%" height="15" fill="rgb(236,212,23)"/><text x="34.6391%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 4.52%)</title><rect x="37.5566%" y="277" width="4.5249%" height="15" fill="rgb(242,79,21)"/><text x="37.8066%" y="287.50">hashb..</text></g><g><title>&lt;laythe_env::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (10 samples, 4.52%)</title><rect x="37.5566%" y="261" width="4.5249%" height="15" fill="rgb(211,96,35)"/><text x="37.8066%" y="271.50">&lt;layt..</text></g><g><title>core::ptr::hash (10 samples, 4.52%)</title><rect x="37.5566%" y="245" width="4.5249%" height="15" fill="rgb(253,215,40)"/><text x="37.8066%" y="255.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (10 samples, 4.52%)</title><rect x="37.5566%" y="229" width="4.5249%" height="15" fill="rgb(211,81,21)"/><text x="37.8066%" y="239.50">core:..</text></g><g><title>core::hash::Hasher::write_usize (10 samples, 4.52%)</title><rect x="37.5566%" y="213" width="4.5249%" height="15" fill="rgb(208,190,38)"/><text x="37.8066%" y="223.50">core:..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (9 samples, 4.07%)</title><rect x="38.0090%" y="197" width="4.0724%" height="15" fill="rgb(235,213,38)"/><text x="38.2590%" y="207.50">&lt;fnv..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (9 samples, 4.07%)</title><rect x="38.0090%" y="181" width="4.0724%" height="15" fill="rgb(237,122,38)"/><text x="38.2590%" y="191.50">core..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.45%)</title><rect x="42.9864%" y="261" width="0.4525%" height="15" fill="rgb(244,218,35)"/><text x="43.2364%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.45%)</title><rect x="43.4389%" y="261" width="0.4525%" height="15" fill="rgb(240,68,47)"/><text x="43.6889%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.45%)</title><rect x="43.4389%" y="245" width="0.4525%" height="15" fill="rgb(210,16,53)"/><text x="43.6889%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit_nonzero (1 samples, 0.45%)</title><rect x="43.4389%" y="229" width="0.4525%" height="15" fill="rgb(235,124,12)"/><text x="43.6889%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (1 samples, 0.45%)</title><rect x="43.4389%" y="213" width="0.4525%" height="15" fill="rgb(224,169,11)"/><text x="43.6889%" y="223.50"></text></g><g><title>core::num::&lt;impl u16&gt;::trailing_zeros (1 samples, 0.45%)</title><rect x="43.4389%" y="197" width="0.4525%" height="15" fill="rgb(250,166,2)"/><text x="43.6889%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (4 samples, 1.81%)</title><rect x="43.8914%" y="261" width="1.8100%" height="15" fill="rgb(242,216,29)"/><text x="44.1414%" y="271.50">h..</text></g><g><title>&lt;laythe_env::managed::Managed&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 1.36%)</title><rect x="44.3439%" y="245" width="1.3575%" height="15" fill="rgb(230,116,27)"/><text x="44.5939%" y="255.50"></text></g><g><title>core::ptr::eq (3 samples, 1.36%)</title><rect x="44.3439%" y="229" width="1.3575%" height="15" fill="rgb(228,99,48)"/><text x="44.5939%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (1 samples, 0.45%)</title><rect x="45.7014%" y="261" width="0.4525%" height="15" fill="rgb(253,11,6)"/><text x="45.9514%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.45%)</title><rect x="46.1538%" y="261" width="0.4525%" height="15" fill="rgb(247,143,39)"/><text x="46.4038%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.90%)</title><rect x="46.6063%" y="245" width="0.9050%" height="15" fill="rgb(236,97,10)"/><text x="46.8563%" y="255.50"></text></g><g><title>laythe_core::object::Instance::get_field (26 samples, 11.76%)</title><rect x="37.1041%" y="341" width="11.7647%" height="15" fill="rgb(233,208,19)"/><text x="37.3541%" y="351.50">laythe_core::obje..</text></g><g><title>laythe_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (26 samples, 11.76%)</title><rect x="37.1041%" y="325" width="11.7647%" height="15" fill="rgb(216,164,2)"/><text x="37.3541%" y="335.50">laythe_core::dyna..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (25 samples, 11.31%)</title><rect x="37.5566%" y="309" width="11.3122%" height="15" fill="rgb(220,129,5)"/><text x="37.8066%" y="319.50">hashbrown::map::H..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (25 samples, 11.31%)</title><rect x="37.5566%" y="293" width="11.3122%" height="15" fill="rgb(242,17,10)"/><text x="37.8066%" y="303.50">hashbrown::map::H..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (15 samples, 6.79%)</title><rect x="42.0814%" y="277" width="6.7873%" height="15" fill="rgb(242,107,0)"/><text x="42.3314%" y="287.50">hashbrown..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 2.26%)</title><rect x="46.6063%" y="261" width="2.2624%" height="15" fill="rgb(251,28,31)"/><text x="46.8563%" y="271.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 1.36%)</title><rect x="47.5113%" y="245" width="1.3575%" height="15" fill="rgb(233,223,10)"/><text x="47.7613%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 1.36%)</title><rect x="47.5113%" y="229" width="1.3575%" height="15" fill="rgb(215,21,27)"/><text x="47.7613%" y="239.50"></text></g><g><title>core::core_arch::simd::i8x16::new (3 samples, 1.36%)</title><rect x="47.5113%" y="213" width="1.3575%" height="15" fill="rgb(232,23,21)"/><text x="47.7613%" y="223.50"></text></g><g><title>laythe_core::value::boxed::Value::kind (2 samples, 0.90%)</title><rect x="48.8688%" y="341" width="0.9050%" height="15" fill="rgb(244,5,23)"/><text x="49.1188%" y="351.50"></text></g><g><title>laythe_core::value::boxed::Value::is_num (2 samples, 0.90%)</title><rect x="48.8688%" y="325" width="0.9050%" height="15" fill="rgb(226,81,46)"/><text x="49.1188%" y="335.50"></text></g><g><title>laythe_vm::vm::VmExecutor::get_property (35 samples, 15.84%)</title><rect x="34.8416%" y="357" width="15.8371%" height="15" fill="rgb(247,70,30)"/><text x="35.0916%" y="367.50">laythe_vm::vm::VmExecuto..</text></g><g><title>laythe_core::value::boxed::Value::to_instance (2 samples, 0.90%)</title><rect x="49.7738%" y="341" width="0.9050%" height="15" fill="rgb(212,68,19)"/><text x="50.0238%" y="351.50"></text></g><g><title>laythe_core::value::boxed::Value::to_obj_tag (2 samples, 0.90%)</title><rect x="49.7738%" y="325" width="0.9050%" height="15" fill="rgb(240,187,13)"/><text x="50.0238%" y="335.50"></text></g><g><title>laythe_core::value::boxed::Value::to_str (1 samples, 0.45%)</title><rect x="50.6787%" y="341" width="0.4525%" height="15" fill="rgb(223,113,26)"/><text x="50.9287%" y="351.50"></text></g><g><title>laythe_core::value::boxed::Value::to_obj_tag (1 samples, 0.45%)</title><rect x="50.6787%" y="325" width="0.4525%" height="15" fill="rgb(206,192,2)"/><text x="50.9287%" y="335.50"></text></g><g><title>laythe_vm::vm::VmExecutor::op_get_property (38 samples, 17.19%)</title><rect x="34.8416%" y="373" width="17.1946%" height="15" fill="rgb(241,108,4)"/><text x="35.0916%" y="383.50">laythe_vm::vm::VmExecutor::..</text></g><g><title>laythe_vm::vm::VmExecutor::read_string (3 samples, 1.36%)</title><rect x="50.6787%" y="357" width="1.3575%" height="15" fill="rgb(247,173,49)"/><text x="50.9287%" y="367.50"></text></g><g><title>laythe_vm::vm::VmExecutor::read_constant (2 samples, 0.90%)</title><rect x="51.1312%" y="341" width="0.9050%" height="15" fill="rgb(224,114,35)"/><text x="51.3812%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.90%)</title><rect x="51.1312%" y="325" width="0.9050%" height="15" fill="rgb(245,159,27)"/><text x="51.3812%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (2 samples, 0.90%)</title><rect x="51.1312%" y="309" width="0.9050%" height="15" fill="rgb(245,172,44)"/><text x="51.3812%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.90%)</title><rect x="51.1312%" y="293" width="0.9050%" height="15" fill="rgb(236,23,11)"/><text x="51.3812%" y="303.50"></text></g><g><title>laythe_vm::vm::VmExecutor::check_arity (1 samples, 0.45%)</title><rect x="53.3937%" y="341" width="0.4525%" height="15" fill="rgb(205,117,38)"/><text x="53.6437%" y="351.50"></text></g><g><title>laythe_core::signature::Arity::check (1 samples, 0.45%)</title><rect x="53.3937%" y="325" width="0.4525%" height="15" fill="rgb(237,72,25)"/><text x="53.6437%" y="335.50"></text></g><g><title>laythe_vm::vm::VmExecutor::call (8 samples, 3.62%)</title><rect x="52.0362%" y="357" width="3.6199%" height="15" fill="rgb(244,70,9)"/><text x="52.2862%" y="367.50">layt..</text></g><g><title>laythe_vm::vm::VmExecutor::push_frame (4 samples, 1.81%)</title><rect x="53.8462%" y="341" width="1.8100%" height="15" fill="rgb(217,125,39)"/><text x="54.0962%" y="351.50">l..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 1.36%)</title><rect x="54.2986%" y="325" width="1.3575%" height="15" fill="rgb(235,36,10)"/><text x="54.5486%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (3 samples, 1.36%)</title><rect x="54.2986%" y="309" width="1.3575%" height="15" fill="rgb(251,123,47)"/><text x="54.5486%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 1.36%)</title><rect x="54.2986%" y="293" width="1.3575%" height="15" fill="rgb(221,13,13)"/><text x="54.5486%" y="303.50"></text></g><g><title>laythe_core::object::BuiltinPrimitives::for_value (8 samples, 3.62%)</title><rect x="57.0136%" y="341" width="3.6199%" height="15" fill="rgb(238,131,9)"/><text x="57.2636%" y="351.50">layt..</text></g><g><title>hashbrown::map::make_hash (5 samples, 2.26%)</title><rect x="61.0860%" y="277" width="2.2624%" height="15" fill="rgb(211,50,8)"/><text x="61.3360%" y="287.50">h..</text></g><g><title>&lt;laythe_env::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (5 samples, 2.26%)</title><rect x="61.0860%" y="261" width="2.2624%" height="15" fill="rgb(245,182,24)"/><text x="61.3360%" y="271.50">&lt;..</text></g><g><title>core::ptr::hash (5 samples, 2.26%)</title><rect x="61.0860%" y="245" width="2.2624%" height="15" fill="rgb(242,14,37)"/><text x="61.3360%" y="255.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (5 samples, 2.26%)</title><rect x="61.0860%" y="229" width="2.2624%" height="15" fill="rgb(246,228,12)"/><text x="61.3360%" y="239.50">c..</text></g><g><title>core::hash::Hasher::write_usize (5 samples, 2.26%)</title><rect x="61.0860%" y="213" width="2.2624%" height="15" fill="rgb(213,55,15)"/><text x="61.3360%" y="223.50">c..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (5 samples, 2.26%)</title><rect x="61.0860%" y="197" width="2.2624%" height="15" fill="rgb(209,9,3)"/><text x="61.3360%" y="207.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 0.90%)</title><rect x="62.4434%" y="181" width="0.9050%" height="15" fill="rgb(230,59,30)"/><text x="62.6934%" y="191.50"></text></g><g><title>laythe_core::object::Instance::get_field (8 samples, 3.62%)</title><rect x="60.6335%" y="341" width="3.6199%" height="15" fill="rgb(209,121,21)"/><text x="60.8835%" y="351.50">layt..</text></g><g><title>laythe_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (7 samples, 3.17%)</title><rect x="61.0860%" y="325" width="3.1674%" height="15" fill="rgb(220,109,13)"/><text x="61.3360%" y="335.50">lay..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (7 samples, 3.17%)</title><rect x="61.0860%" y="309" width="3.1674%" height="15" fill="rgb(232,18,1)"/><text x="61.3360%" y="319.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (7 samples, 3.17%)</title><rect x="61.0860%" y="293" width="3.1674%" height="15" fill="rgb(215,41,42)"/><text x="61.3360%" y="303.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 0.90%)</title><rect x="63.3484%" y="277" width="0.9050%" height="15" fill="rgb(224,123,36)"/><text x="63.5984%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.45%)</title><rect x="63.8009%" y="261" width="0.4525%" height="15" fill="rgb(240,125,3)"/><text x="64.0509%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.45%)</title><rect x="63.8009%" y="245" width="0.4525%" height="15" fill="rgb(205,98,50)"/><text x="64.0509%" y="255.50"></text></g><g><title>laythe_vm::vm::VmExecutor::invoke (21 samples, 9.50%)</title><rect x="55.6561%" y="357" width="9.5023%" height="15" fill="rgb(205,185,37)"/><text x="55.9061%" y="367.50">laythe_vm::vm:..</text></g><g><title>laythe_core::value::boxed::Value::kind (2 samples, 0.90%)</title><rect x="64.2534%" y="341" width="0.9050%" height="15" fill="rgb(238,207,15)"/><text x="64.5034%" y="351.50"></text></g><g><title>laythe_core::value::boxed::Value::is_num (1 samples, 0.45%)</title><rect x="64.7059%" y="325" width="0.4525%" height="15" fill="rgb(213,199,42)"/><text x="64.9559%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.45%)</title><rect x="66.0633%" y="325" width="0.4525%" height="15" fill="rgb(235,201,11)"/><text x="66.3133%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 5.88%)</title><rect x="66.5158%" y="277" width="5.8824%" height="15" fill="rgb(207,46,11)"/><text x="66.7658%" y="287.50">hashbro..</text></g><g><title>&lt;laythe_env::managed::Managed&lt;T&gt; as core::hash::Hash&gt;::hash (13 samples, 5.88%)</title><rect x="66.5158%" y="261" width="5.8824%" height="15" fill="rgb(241,35,35)"/><text x="66.7658%" y="271.50">&lt;laythe..</text></g><g><title>core::ptr::hash (13 samples, 5.88%)</title><rect x="66.5158%" y="245" width="5.8824%" height="15" fill="rgb(243,32,47)"/><text x="66.7658%" y="255.50">core::p..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for *const T&gt;::hash (13 samples, 5.88%)</title><rect x="66.5158%" y="229" width="5.8824%" height="15" fill="rgb(247,202,23)"/><text x="66.7658%" y="239.50">core::h..</text></g><g><title>core::hash::Hasher::write_usize (13 samples, 5.88%)</title><rect x="66.5158%" y="213" width="5.8824%" height="15" fill="rgb(219,102,11)"/><text x="66.7658%" y="223.50">core::h..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (11 samples, 4.98%)</title><rect x="67.4208%" y="197" width="4.9774%" height="15" fill="rgb(243,110,44)"/><text x="67.6708%" y="207.50">&lt;fnv::..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (7 samples, 3.17%)</title><rect x="69.2308%" y="181" width="3.1674%" height="15" fill="rgb(222,74,54)"/><text x="69.4808%" y="191.50">cor..</text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.45%)</title><rect x="72.8507%" y="261" width="0.4525%" height="15" fill="rgb(216,99,12)"/><text x="73.1007%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (4 samples, 1.81%)</title><rect x="73.3032%" y="261" width="1.8100%" height="15" fill="rgb(226,22,26)"/><text x="73.5532%" y="271.50">h..</text></g><g><title>&lt;laythe_env::managed::Managed&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 1.36%)</title><rect x="73.7557%" y="245" width="1.3575%" height="15" fill="rgb(217,163,10)"/><text x="74.0057%" y="255.50"></text></g><g><title>core::ptr::eq (3 samples, 1.36%)</title><rect x="73.7557%" y="229" width="1.3575%" height="15" fill="rgb(213,25,53)"/><text x="74.0057%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.45%)</title><rect x="75.1131%" y="245" width="0.4525%" height="15" fill="rgb(252,105,26)"/><text x="75.3631%" y="255.50"></text></g><g><title>laythe_vm::vm::VmExecutor::invoke_from_class (24 samples, 10.86%)</title><rect x="65.1584%" y="357" width="10.8597%" height="15" fill="rgb(220,39,43)"/><text x="65.4084%" y="367.50">laythe_vm::vm::V..</text></g><g><title>laythe_core::object::Class::get_method (22 samples, 9.95%)</title><rect x="66.0633%" y="341" width="9.9548%" height="15" fill="rgb(229,68,48)"/><text x="66.3133%" y="351.50">laythe_core::o..</text></g><g><title>laythe_core::dynamic_map::DynamicMap&lt;K,V&gt;::get (21 samples, 9.50%)</title><rect x="66.5158%" y="325" width="9.5023%" height="15" fill="rgb(252,8,32)"/><text x="66.7658%" y="335.50">laythe_core::d..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (21 samples, 9.50%)</title><rect x="66.5158%" y="309" width="9.5023%" height="15" fill="rgb(223,20,43)"/><text x="66.7658%" y="319.50">hashbrown::map..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (21 samples, 9.50%)</title><rect x="66.5158%" y="293" width="9.5023%" height="15" fill="rgb(229,81,49)"/><text x="66.7658%" y="303.50">hashbrown::map..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (8 samples, 3.62%)</title><rect x="72.3982%" y="277" width="3.6199%" height="15" fill="rgb(236,28,36)"/><text x="72.6482%" y="287.50">hash..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.90%)</title><rect x="75.1131%" y="261" width="0.9050%" height="15" fill="rgb(249,185,26)"/><text x="75.3631%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.45%)</title><rect x="75.5656%" y="245" width="0.4525%" height="15" fill="rgb(249,174,33)"/><text x="75.8156%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.45%)</title><rect x="75.5656%" y="229" width="0.4525%" height="15" fill="rgb(233,201,37)"/><text x="75.8156%" y="239.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.45%)</title><rect x="75.5656%" y="213" width="0.4525%" height="15" fill="rgb(221,78,26)"/><text x="75.8156%" y="223.50"></text></g><g><title>laythe_vm::vm::VmExecutor::peek (5 samples, 2.26%)</title><rect x="76.0181%" y="357" width="2.2624%" height="15" fill="rgb(250,127,30)"/><text x="76.2681%" y="367.50">l..</text></g><g><title>laythe_vm::vm::VmExecutor::get_val (1 samples, 0.45%)</title><rect x="77.8281%" y="341" width="0.4525%" height="15" fill="rgb(230,49,44)"/><text x="78.0781%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.45%)</title><rect x="77.8281%" y="325" width="0.4525%" height="15" fill="rgb(229,67,23)"/><text x="78.0781%" y="335.50"></text></g><g><title>laythe_vm::vm::VmExecutor::read_byte (1 samples, 0.45%)</title><rect x="78.2805%" y="357" width="0.4525%" height="15" fill="rgb(249,83,47)"/><text x="78.5305%" y="367.50"></text></g><g><title>laythe_vm::vm::VmExecutor::read_short (3 samples, 1.36%)</title><rect x="78.7330%" y="357" width="1.3575%" height="15" fill="rgb(215,43,3)"/><text x="78.9830%" y="367.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 0.90%)</title><rect x="79.1855%" y="341" width="0.9050%" height="15" fill="rgb(238,154,13)"/><text x="79.4355%" y="351.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (2 samples, 0.90%)</title><rect x="79.1855%" y="325" width="0.9050%" height="15" fill="rgb(219,56,2)"/><text x="79.4355%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.90%)</title><rect x="79.1855%" y="309" width="0.9050%" height="15" fill="rgb(233,0,4)"/><text x="79.4355%" y="319.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (2 samples, 0.90%)</title><rect x="79.1855%" y="293" width="0.9050%" height="15" fill="rgb(235,30,7)"/><text x="79.4355%" y="303.50"></text></g><g><title>laythe_vm::vm::VmExecutor::read_string (1 samples, 0.45%)</title><rect x="80.0905%" y="357" width="0.4525%" height="15" fill="rgb(250,79,13)"/><text x="80.3405%" y="367.50"></text></g><g><title>laythe_vm::vm::VmExecutor::read_constant (1 samples, 0.45%)</title><rect x="80.0905%" y="341" width="0.4525%" height="15" fill="rgb(211,146,34)"/><text x="80.3405%" y="351.50"></text></g><g><title>&lt;laythe_env::managed::Managed&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.45%)</title><rect x="80.0905%" y="325" width="0.4525%" height="15" fill="rgb(228,22,38)"/><text x="80.3405%" y="335.50"></text></g><g><title>laythe_core::value::boxed::Value::kind (6 samples, 2.71%)</title><rect x="82.8054%" y="341" width="2.7149%" height="15" fill="rgb(235,168,5)"/><text x="83.0554%" y="351.50">la..</text></g><g><title>laythe_core::value::boxed::Value::is_num (2 samples, 0.90%)</title><rect x="84.6154%" y="325" width="0.9050%" height="15" fill="rgb(221,155,16)"/><text x="84.8654%" y="335.50"></text></g><g><title>laythe_vm::vm::VmExecutor::op_invoke (75 samples, 33.94%)</title><rect x="52.0362%" y="373" width="33.9367%" height="15" fill="rgb(215,215,53)"/><text x="52.2862%" y="383.50">laythe_vm::vm::VmExecutor::op_invoke</text></g><g><title>laythe_vm::vm::VmExecutor::resolve_call (12 samples, 5.43%)</title><rect x="80.5430%" y="357" width="5.4299%" height="15" fill="rgb(223,4,10)"/><text x="80.7930%" y="367.50">laythe_..</text></g><g><title>laythe_core::value::boxed::Value::to_closure (1 samples, 0.45%)</title><rect x="85.5204%" y="341" width="0.4525%" height="15" fill="rgb(234,103,6)"/><text x="85.7704%" y="351.50"></text></g><g><title>laythe_core::value::boxed::Value::to_obj_tag (1 samples, 0.45%)</title><rect x="85.5204%" y="325" width="0.4525%" height="15" fill="rgb(227,97,0)"/><text x="85.7704%" y="335.50"></text></g><g><title>laythe_vm::vm::VmExecutor::op_return (2 samples, 0.90%)</title><rect x="85.9729%" y="373" width="0.9050%" height="15" fill="rgb(234,150,53)"/><text x="86.2229%" y="383.50"></text></g><g><title>laythe_vm::vm::VmExecutor::pop_frame (2 samples, 0.90%)</title><rect x="85.9729%" y="357" width="0.9050%" height="15" fill="rgb(228,201,54)"/><text x="86.2229%" y="367.50"></text></g><g><title>laythe_vm::vm::VmExecutor::op_set_global (2 samples, 0.90%)</title><rect x="86.8778%" y="373" width="0.9050%" height="15" fill="rgb(222,22,37)"/><text x="87.1278%" y="383.50"></text></g><g><title>laythe_core::module::Module::insert_symbol (2 samples, 0.90%)</title><rect x="86.8778%" y="357" width="0.9050%" height="15" fill="rgb(237,53,32)"/><text x="87.1278%" y="367.50"></text></g><g><title>laythe_core::hooks::GcHooks::grow (2 samples, 0.90%)</title><rect x="86.8778%" y="341" width="0.9050%" height="15" fill="rgb(233,25,53)"/><text x="87.1278%" y="351.50"></text></g><g><title>laythe_env::memory::Gc::grow (2 samples, 0.90%)</title><rect x="86.8778%" y="325" width="0.9050%" height="15" fill="rgb(210,40,34)"/><text x="87.1278%" y="335.50"></text></g><g><title>&lt;laythe_core::module::Module as laythe_env::managed::Manage&gt;::size (1 samples, 0.45%)</title><rect x="87.3303%" y="309" width="0.4525%" height="15" fill="rgb(241,220,44)"/><text x="87.5803%" y="319.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::capacity (1 samples, 0.45%)</title><rect x="87.3303%" y="293" width="0.4525%" height="15" fill="rgb(235,28,35)"/><text x="87.5803%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::capacity (1 samples, 0.45%)</title><rect x="87.3303%" y="277" width="0.4525%" height="15" fill="rgb(210,56,17)"/><text x="87.5803%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::capacity (1 samples, 0.45%)</title><rect x="87.3303%" y="261" width="0.4525%" height="15" fill="rgb(224,130,29)"/><text x="87.5803%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.90%)</title><rect x="90.4977%" y="341" width="0.9050%" height="15" fill="rgb(235,212,8)"/><text x="90.7477%" y="351.50"></text></g><g><title>__libc_start_main (180 samples, 81.45%)</title><rect x="15.3846%" y="517" width="81.4480%" height="15" fill="rgb(223,33,50)"/><text x="15.6346%" y="527.50">__libc_start_main</text></g><g><title>main (180 samples, 81.45%)</title><rect x="15.3846%" y="501" width="81.4480%" height="15" fill="rgb(219,149,13)"/><text x="15.6346%" y="511.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (180 samples, 81.45%)</title><rect x="15.3846%" y="485" width="81.4480%" height="15" fill="rgb(250,156,29)"/><text x="15.6346%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>std::rt::lang_start_internal::{{closure}}::{{closure}} (180 samples, 81.45%)</title><rect x="15.3846%" y="469" width="81.4480%" height="15" fill="rgb(216,193,19)"/><text x="15.6346%" y="479.50">std::rt::lang_start_internal::{{closure}}::{{closure}}</text></g><g><title>std::rt::lang_start::{{closure}} (180 samples, 81.45%)</title><rect x="15.3846%" y="453" width="81.4480%" height="15" fill="rgb(216,135,14)"/><text x="15.6346%" y="463.50">std::rt::lang_start::{{closure}}</text></g><g><title>laythe::main (180 samples, 81.45%)</title><rect x="15.3846%" y="437" width="81.4480%" height="15" fill="rgb(241,47,5)"/><text x="15.6346%" y="447.50">laythe::main</text></g><g><title>laythe_vm::vm::Vm::run (180 samples, 81.45%)</title><rect x="15.3846%" y="421" width="81.4480%" height="15" fill="rgb(233,42,35)"/><text x="15.6346%" y="431.50">laythe_vm::vm::Vm::run</text></g><g><title>laythe_vm::vm::Vm::interpret (180 samples, 81.45%)</title><rect x="15.3846%" y="405" width="81.4480%" height="15" fill="rgb(231,13,6)"/><text x="15.6346%" y="415.50">laythe_vm::vm::Vm::interpret</text></g><g><title>laythe_vm::vm::VmExecutor::run (180 samples, 81.45%)</title><rect x="15.3846%" y="389" width="81.4480%" height="15" fill="rgb(207,181,40)"/><text x="15.6346%" y="399.50">laythe_vm::vm::VmExecutor::run</text></g><g><title>laythe_vm::vm::VmExecutor::read_byte (20 samples, 9.05%)</title><rect x="87.7828%" y="373" width="9.0498%" height="15" fill="rgb(254,173,49)"/><text x="88.0328%" y="383.50">laythe_vm::vm..</text></g><g><title>laythe_vm::vm::VmExecutor::update_ip (14 samples, 6.33%)</title><rect x="90.4977%" y="357" width="6.3348%" height="15" fill="rgb(221,1,38)"/><text x="90.7477%" y="367.50">laythe_v..</text></g><g><title>laythe_vm::vm::VmExecutor::set_ip (12 samples, 5.43%)</title><rect x="91.4027%" y="341" width="5.4299%" height="15" fill="rgb(206,124,46)"/><text x="91.6527%" y="351.50">laythe_..</text></g><g><title>_start (181 samples, 81.90%)</title><rect x="15.3846%" y="533" width="81.9005%" height="15" fill="rgb(249,21,11)"/><text x="15.6346%" y="543.50">_start</text></g><g><title>_dl_start (1 samples, 0.45%)</title><rect x="96.8326%" y="517" width="0.4525%" height="15" fill="rgb(222,201,40)"/><text x="97.0826%" y="527.50"></text></g><g><title>_dl_start_final (1 samples, 0.45%)</title><rect x="96.8326%" y="501" width="0.4525%" height="15" fill="rgb(235,61,29)"/><text x="97.0826%" y="511.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.45%)</title><rect x="96.8326%" y="485" width="0.4525%" height="15" fill="rgb(219,207,3)"/><text x="97.0826%" y="495.50"></text></g><g><title>dl_main (1 samples, 0.45%)</title><rect x="96.8326%" y="469" width="0.4525%" height="15" fill="rgb(222,56,46)"/><text x="97.0826%" y="479.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.45%)</title><rect x="96.8326%" y="453" width="0.4525%" height="15" fill="rgb(239,76,54)"/><text x="97.0826%" y="463.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.45%)</title><rect x="96.8326%" y="437" width="0.4525%" height="15" fill="rgb(231,124,27)"/><text x="97.0826%" y="447.50"></text></g><g><title>openaux (1 samples, 0.45%)</title><rect x="96.8326%" y="421" width="0.4525%" height="15" fill="rgb(249,195,6)"/><text x="97.0826%" y="431.50"></text></g><g><title>_dl_map_object (1 samples, 0.45%)</title><rect x="96.8326%" y="405" width="0.4525%" height="15" fill="rgb(237,174,47)"/><text x="97.0826%" y="415.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.45%)</title><rect x="96.8326%" y="389" width="0.4525%" height="15" fill="rgb(206,201,31)"/><text x="97.0826%" y="399.50"></text></g><g><title>elf_get_dynamic_info (1 samples, 0.45%)</title><rect x="96.8326%" y="373" width="0.4525%" height="15" fill="rgb(231,57,52)"/><text x="97.0826%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="96.8326%" y="357" width="0.4525%" height="15" fill="rgb(248,177,22)"/><text x="97.0826%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="96.8326%" y="341" width="0.4525%" height="15" fill="rgb(215,211,37)"/><text x="97.0826%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="96.8326%" y="325" width="0.4525%" height="15" fill="rgb(241,128,51)"/><text x="97.0826%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="96.8326%" y="309" width="0.4525%" height="15" fill="rgb(227,165,31)"/><text x="97.0826%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="96.8326%" y="293" width="0.4525%" height="15" fill="rgb(228,167,24)"/><text x="97.0826%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.45%)</title><rect x="96.8326%" y="277" width="0.4525%" height="15" fill="rgb(228,143,12)"/><text x="97.0826%" y="287.50"></text></g><g><title>laythe (216 samples, 97.74%)</title><rect x="0.0000%" y="549" width="97.7376%" height="15" fill="rgb(249,149,8)"/><text x="0.2500%" y="559.50">laythe</text></g><g><title>laythe_vm::vm::VmExecutor::resolve_call (1 samples, 0.45%)</title><rect x="97.2851%" y="533" width="0.4525%" height="15" fill="rgb(243,35,44)"/><text x="97.5351%" y="543.50"></text></g><g><title>all (221 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(246,89,9)"/><text x="0.2500%" y="575.50"></text></g><g><title>perf (5 samples, 2.26%)</title><rect x="97.7376%" y="549" width="2.2624%" height="15" fill="rgb(233,213,13)"/><text x="97.9876%" y="559.50">p..</text></g><g><title>[unknown] (5 samples, 2.26%)</title><rect x="97.7376%" y="533" width="2.2624%" height="15" fill="rgb(233,141,41)"/><text x="97.9876%" y="543.50">[..</text></g><g><title>[unknown] (5 samples, 2.26%)</title><rect x="97.7376%" y="517" width="2.2624%" height="15" fill="rgb(239,167,4)"/><text x="97.9876%" y="527.50">[..</text></g><g><title>[unknown] (5 samples, 2.26%)</title><rect x="97.7376%" y="501" width="2.2624%" height="15" fill="rgb(209,217,16)"/><text x="97.9876%" y="511.50">[..</text></g><g><title>[unknown] (5 samples, 2.26%)</title><rect x="97.7376%" y="485" width="2.2624%" height="15" fill="rgb(219,88,35)"/><text x="97.9876%" y="495.50">[..</text></g><g><title>[unknown] (5 samples, 2.26%)</title><rect x="97.7376%" y="469" width="2.2624%" height="15" fill="rgb(220,193,23)"/><text x="97.9876%" y="479.50">[..</text></g><g><title>[unknown] (5 samples, 2.26%)</title><rect x="97.7376%" y="453" width="2.2624%" height="15" fill="rgb(230,90,52)"/><text x="97.9876%" y="463.50">[..</text></g><g><title>[unknown] (5 samples, 2.26%)</title><rect x="97.7376%" y="437" width="2.2624%" height="15" fill="rgb(252,106,19)"/><text x="97.9876%" y="447.50">[..</text></g><g><title>[unknown] (5 samples, 2.26%)</title><rect x="97.7376%" y="421" width="2.2624%" height="15" fill="rgb(206,74,20)"/><text x="97.9876%" y="431.50">[..</text></g><g><title>[unknown] (5 samples, 2.26%)</title><rect x="97.7376%" y="405" width="2.2624%" height="15" fill="rgb(230,138,44)"/><text x="97.9876%" y="415.50">[..</text></g><g><title>[unknown] (4 samples, 1.81%)</title><rect x="98.1900%" y="389" width="1.8100%" height="15" fill="rgb(235,182,43)"/><text x="98.4400%" y="399.50">[..</text></g><g><title>[unknown] (4 samples, 1.81%)</title><rect x="98.1900%" y="373" width="1.8100%" height="15" fill="rgb(242,16,51)"/><text x="98.4400%" y="383.50">[..</text></g></svg></svg>